{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"diffbot_browser","qualifiedName":"diffbot/diffbot_browser","packageName":"diffbot","packageIntro":"<h1>Diffbot</h1>\n<p>A Dart client library for <strong>Diffbot</strong> APIs.</p>\n<p><em>Q: What is Diffbot?</em>  \n<em>A: Diffbot is \"a visual learning robot that identifies and extracts the important parts of any web page\"</em></p>\n<h2>Supported APIs:</h2>\n<p>See <a href=\"http://diffbot.com/products/automatic/\">Diffbot documentation</a></p><ul><li><strong>Article API</strong>: The Article API is used to extract clean article text from news article web pages.</li><li><strong>Frontpage API</strong>: The Frontpage API takes in a multifaceted “homepage” and returns individual page elements.</li><li><strong>Product API</strong>: The Product API analyzes a shopping or e-commerce product page and returns information on the product.</li></ul>\n<h2>Usage</h2>\n<p>It works both in the browser and in the console.  \n<strong>Browser usage:</strong></p>\n<pre><code>import 'package:diffbot/diffbot_browser.dart';\nmain() {\n  var client = new Client('YOUR_TOKEN');\n  client.getArticle('http://www.aweso.me/blog/post').then((Article article) {\n    doSomethingWith(article);\n    // you can use article's title, date, author, metadata, etc:\n    // article.title\n    // article.date\n  });\n}\n\n</code></pre>\n<p><strong>Console usage:</strong></p>\n<pre><code>import 'package:diffbot/diffbot_console.dart';\nmain() {\n  var client = new Client('YOUR_TOKEN');\n  client.getFrontpage('http://yourfavorite.newspaper.com').then((Frontpage fp) {\n    // see documentation\n  });\n}\n</code></pre>\n<h2>Status</h2>\n<p><a href=\"https://drone.io/github.com/claudiodangelis/diffbot/latest\">!<a href=\"https://drone.io/github.com/claudiodangelis/diffbot/status.png\">Build Status</a></a></p>\n<h2>Examples</h2>\n<p>See <code>example/</code> directory.</p>\n<h2>Documentation</h2>\n<p>Official Diffbot APIs documentation can be found at <a href=\"http://diffbot.com/products/automatic/\">http://diffbot.com/products/automatic/</a></p>\n<p>Dart documentation can be found at <a href=\"http://claudiodangelis.com/docs/diffbot\">http://claudiodangelis.com/docs/diffbot</a>.</p>\n<h2>License</h2>\n<p>BSD 2-Clause License. See <em>LICENSE</em>.</p>\n<h2>Reporting bugs</h2>\n<p>You can file bugs at <a href=\"https://github.com/claudiodangelis/diffbot/issues\">diffbot/issues</a>.</p>"},{"name":"diffbot_console","qualifiedName":"diffbot/diffbot_console","packageName":"diffbot","packageIntro":"<h1>Diffbot</h1>\n<p>A Dart client library for <strong>Diffbot</strong> APIs.</p>\n<p><em>Q: What is Diffbot?</em>  \n<em>A: Diffbot is \"a visual learning robot that identifies and extracts the important parts of any web page\"</em></p>\n<h2>Supported APIs:</h2>\n<p>See <a href=\"http://diffbot.com/products/automatic/\">Diffbot documentation</a></p><ul><li><strong>Article API</strong>: The Article API is used to extract clean article text from news article web pages.</li><li><strong>Frontpage API</strong>: The Frontpage API takes in a multifaceted “homepage” and returns individual page elements.</li><li><strong>Product API</strong>: The Product API analyzes a shopping or e-commerce product page and returns information on the product.</li></ul>\n<h2>Usage</h2>\n<p>It works both in the browser and in the console.  \n<strong>Browser usage:</strong></p>\n<pre><code>import 'package:diffbot/diffbot_browser.dart';\nmain() {\n  var client = new Client('YOUR_TOKEN');\n  client.getArticle('http://www.aweso.me/blog/post').then((Article article) {\n    doSomethingWith(article);\n    // you can use article's title, date, author, metadata, etc:\n    // article.title\n    // article.date\n  });\n}\n\n</code></pre>\n<p><strong>Console usage:</strong></p>\n<pre><code>import 'package:diffbot/diffbot_console.dart';\nmain() {\n  var client = new Client('YOUR_TOKEN');\n  client.getFrontpage('http://yourfavorite.newspaper.com').then((Frontpage fp) {\n    // see documentation\n  });\n}\n</code></pre>\n<h2>Status</h2>\n<p><a href=\"https://drone.io/github.com/claudiodangelis/diffbot/latest\">!<a href=\"https://drone.io/github.com/claudiodangelis/diffbot/status.png\">Build Status</a></a></p>\n<h2>Examples</h2>\n<p>See <code>example/</code> directory.</p>\n<h2>Documentation</h2>\n<p>Official Diffbot APIs documentation can be found at <a href=\"http://diffbot.com/products/automatic/\">http://diffbot.com/products/automatic/</a></p>\n<p>Dart documentation can be found at <a href=\"http://claudiodangelis.com/docs/diffbot\">http://claudiodangelis.com/docs/diffbot</a>.</p>\n<h2>License</h2>\n<p>BSD 2-Clause License. See <em>LICENSE</em>.</p>\n<h2>Reporting bugs</h2>\n<p>You can file bugs at <a href=\"https://github.com/claudiodangelis/diffbot/issues\">diffbot/issues</a>.</p>"},{"name":"js","qualifiedName":"js/js","preview":"<p>The js.dart library provides simple JavaScript invocation from Dart that\nworks on both Dartium and on other modern browsers via Dart2JS.</p>","packageName":"js","packageIntro":"<h1>Dart JavaScript Interop</h1>\n<p>The js.dart library allows Dart code running in the browser to\nmanipulate JavaScript running in the same page.  It is intended to\nallow Dart code to easily interact with third-party JavaScript libraries.</p>\n<h2>Warning</h2>\n<p>The use of this library may result in a sizable increase in code size\nwhen compiled to JavaScript, because names cannot be minified. If the\nsize of the generated JavaScript is a concern, use the <a href=\"http://api.dartlang.org/docs/channels/stable/latest/dart_js.html\">dart:js</a>\nlibrary.</p>\n<h2>Documentation</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop\">API documentation</a>. You should also watch this <a href=\"http://www.youtube.com/watch?v=QFuCFUd2Zsw\">video tutorial</a>.</p>\n<h2>Samples</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop/example\">samples</a> that demonstrate interaction with JavaScript\ncode.  These include interoperation with the Google Maps JavaScript\nlibrary, the Google Visualization JavaScript library, and Twitter's\nquery API via JSONP.</p>\n<h2>Usage</h2>\n<p>The <a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Dart Editor</a> now includes pub support.  To try out this\nlibrary in the editor:</p><ol><li>\n<p><a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Update to the latest editor</a>.</p></li><li>\n<p>From the \"File\" menu, open a \"New Application\" (and make sure \"Add</p>\n<pre><code>Pub support\" is checked).\n</code></pre></li><li>\n<p>Add the following to your pubspec.yaml:</p>\n<pre><code>dependencies:\n  js: any\n</code></pre></li><li>\n<p>Under the \"Tools\" menu, run \"Pub Install\".</p></li><li>\n<p>Try the following test Dart file:</p>\n<pre><code>import 'package:js/js.dart' as js;\n\nvoid main() {\n  js.context.alert('Hello from Dart via JS');\n}\n</code></pre></li><li>\n<p>Add the script to your HTML page:</p>\n<pre><code>&lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n&lt;script src=\"packages/browser/interop.js\"&gt;&lt;/script&gt; \n</code></pre></li></ol>\n<h2>Running Tests</h2>\n<p>First, use the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> to install dependencies:</p>\n<pre><code>pub install\n</code></pre>\n<p>To run browser tests on Dartium, simply open <strong>test/browser_tests.html</strong>\nin Dartium.</p>\n<p>To run browser tests using JavaScript in any modern browser, first use the\nfollowing command to compile to JavaScript:</p>\n<pre><code>dart2js -otest/browser_tests.dart.js test/browser_tests.dart\n</code></pre>\n<p>and then open <strong>test/browser_tests.html</strong> in any browser.</p>"},{"name":"js-wrapping","qualifiedName":"js/js-wrapping","packageName":"js","packageIntro":"<h1>Dart JavaScript Interop</h1>\n<p>The js.dart library allows Dart code running in the browser to\nmanipulate JavaScript running in the same page.  It is intended to\nallow Dart code to easily interact with third-party JavaScript libraries.</p>\n<h2>Warning</h2>\n<p>The use of this library may result in a sizable increase in code size\nwhen compiled to JavaScript, because names cannot be minified. If the\nsize of the generated JavaScript is a concern, use the <a href=\"http://api.dartlang.org/docs/channels/stable/latest/dart_js.html\">dart:js</a>\nlibrary.</p>\n<h2>Documentation</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop\">API documentation</a>. You should also watch this <a href=\"http://www.youtube.com/watch?v=QFuCFUd2Zsw\">video tutorial</a>.</p>\n<h2>Samples</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop/example\">samples</a> that demonstrate interaction with JavaScript\ncode.  These include interoperation with the Google Maps JavaScript\nlibrary, the Google Visualization JavaScript library, and Twitter's\nquery API via JSONP.</p>\n<h2>Usage</h2>\n<p>The <a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Dart Editor</a> now includes pub support.  To try out this\nlibrary in the editor:</p><ol><li>\n<p><a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Update to the latest editor</a>.</p></li><li>\n<p>From the \"File\" menu, open a \"New Application\" (and make sure \"Add</p>\n<pre><code>Pub support\" is checked).\n</code></pre></li><li>\n<p>Add the following to your pubspec.yaml:</p>\n<pre><code>dependencies:\n  js: any\n</code></pre></li><li>\n<p>Under the \"Tools\" menu, run \"Pub Install\".</p></li><li>\n<p>Try the following test Dart file:</p>\n<pre><code>import 'package:js/js.dart' as js;\n\nvoid main() {\n  js.context.alert('Hello from Dart via JS');\n}\n</code></pre></li><li>\n<p>Add the script to your HTML page:</p>\n<pre><code>&lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n&lt;script src=\"packages/browser/interop.js\"&gt;&lt;/script&gt; \n</code></pre></li></ol>\n<h2>Running Tests</h2>\n<p>First, use the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> to install dependencies:</p>\n<pre><code>pub install\n</code></pre>\n<p>To run browser tests on Dartium, simply open <strong>test/browser_tests.html</strong>\nin Dartium.</p>\n<p>To run browser tests using JavaScript in any modern browser, first use the\nfollowing command to compile to JavaScript:</p>\n<pre><code>dart2js -otest/browser_tests.dart.js test/browser_tests.dart\n</code></pre>\n<p>and then open <strong>test/browser_tests.html</strong> in any browser.</p>"},{"name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageName":"path","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageName":"stack_trace","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>"},{"name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar is\nupdated in-place before and after each test is executed. If all test pass,\nyou should only see a couple lines in the terminal. If a test fails, the\nfailure is shown and the progress bar continues to be updated below it.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-interactive_html_config","qualifiedName":"unittest/unittest-interactive_html_config","preview":"<p>This configuration can be used to rerun selected tests, as well\nas see diagnostic output from tests. It runs each test in its own\nIFrame, so the configuration consists of two parts - a 'parent'\nconfig that manages all the tests, and a 'child' config for the\nIFrame that runs the individual tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-matcher","qualifiedName":"unittest/unittest-matcher","preview":"<p>Support for specifying test expectations,\nsuch as for unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mirror_matchers","qualifiedName":"unittest/unittest-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of dart:mirrors.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mock","qualifiedName":"unittest/unittest-mock","preview":"<p>A simple mocking/spy library.</p>","packageName":"unittest","packageIntro":""},{"name":"dart-collection","qualifiedName":"dart-collection","preview":"<p>Classes and utilities that supplement the collection support in dart:core.</p>","packageName":""},{"name":"dart-math","qualifiedName":"dart-math","preview":"<p>Mathematical constants and functions, plus a random number generator.</p>","packageName":""},{"name":"dart-convert","qualifiedName":"dart-convert","preview":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>","packageName":""},{"name":"dart-async","qualifiedName":"dart-async","preview":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>","packageName":""},{"name":"dart-isolate","qualifiedName":"dart-isolate","preview":"<p>Concurrent programming using <em>isolates</em>:\nindependent workers that are similar to threads\nbut don't share memory,\ncommunicating only via messages.</p>","packageName":""},{"name":"dart-mirrors","qualifiedName":"dart-mirrors","preview":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>","packageName":""},{"name":"dart-dom-html","qualifiedName":"dart-dom-html","preview":"<p>HTML elements and other resources for web-based applications that need to\ninteract with the browser and the DOM (Document Object Model).</p>","packageName":""},{"name":"dart-dom-web_gl","qualifiedName":"dart-dom-web_gl","preview":"<p>3D programming in the browser.</p>","packageName":""},{"name":"dart-typed_data","qualifiedName":"dart-typed_data","preview":"<p>Specialized integers and floating point numbers,\nwith SIMD support and efficient lists.</p>","packageName":""},{"name":"dart-dom-indexed_db","qualifiedName":"dart-dom-indexed_db","preview":"<p>A client-side key-value store with support for indexes.</p>","packageName":""},{"name":"dart-dom-svg","qualifiedName":"dart-dom-svg","preview":"<p>Scalable Vector Graphics:\nTwo-dimensional vector graphics with support for events and animation.</p>","packageName":""},{"name":"dart-dom-web_audio","qualifiedName":"dart-dom-web_audio","preview":"<p>High-fidelity audio programming in the browser.</p>","packageName":""},{"name":"dart-dom-web_sql","qualifiedName":"dart-dom-web_sql","preview":"<p>An API for storing data in the browser that can be queried with SQL.</p>","packageName":""},{"name":"dart-js","qualifiedName":"dart-js","preview":"<p>Support for interoperating with JavaScript.</p>","packageName":""},{"name":"dart-io","qualifiedName":"dart-io","preview":"<p>File, socket, HTTP, and other I/O support for server applications.</p>","packageName":""}],"introduction":"<p>Welcome to the Dart API reference documentation,\ncovering the official Dart API libraries.\nSome of the most fundamental Dart libraries include:</p><ul><li>\n<p><a href=\"#dart:core\">dart:core</a>:\n  Core functionality such as strings, numbers, collections, errors,\n  dates, and URIs.</p></li><li>\n<p><a href=\"#dart:html\">dart:html</a>:\n  DOM manipulation for web apps.</p></li><li>\n<p><a href=\"#dart:io\">dart:io</a>:\n  I/O for command-line apps.</p></li></ul>\n<p>Except for dart:core, you must import a library before you can use it.\nHere's an example of importing dart:html, dart:math, and a\nthird popular library called\n<a href=\"http://www.dartlang.org/polymer-dart/\">polymer.dart</a>:</p>\n<pre><code>import 'dart:html';\nimport 'dart:math';\nimport 'package:polymer/polymer.dart';\n</code></pre>\n<p>Polymer.dart is an example of a library that isn't\nincluded in the Dart download,\nbut is easy to get and update using the <em>pub package manager</em>.\nFor information on finding, using, and publishing libraries (and more)\nwith pub, see\n<a href=\"http://pub.dartlang.org\">pub.dartlang.org</a>.</p>\n<p>The main site for learning and using Dart is\n<a href=\"http://www.dartlang.org\">www.dartlang.org</a>.\nCheck out these pages:</p><ul><li><a href=\"http://www.dartlang.org\">Dart homepage</a></li><li><a href=\"http://www.dartlang.org/docs/tutorials/\">Tutorials</a></li><li><a href=\"http://www.dartlang.org/docs/\">Programmer's Guide</a></li><li><a href=\"http://www.dartlang.org/samples/\">Samples</a></li><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">A Tour of the Dart Libraries</a></li></ul>\n<p>This API reference is automatically generated from the source code in the\n<a href=\"https://code.google.com/p/dart/\">Dart project</a>.\nIf you'd like to contribute to this documentation, see\n<a href=\"https://code.google.com/p/dart/wiki/Contributing\">Contributing</a>\nand\n<a href=\"https://code.google.com/p/dart/wiki/WritingApiDocumentation\">Writing API Documentation</a>.</p>","filetype":"json","start-page":"diffbot"}