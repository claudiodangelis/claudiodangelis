// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"":"Object;i,list",
 get$hasNext: function() {
  return $.boolTypeCheck($.lt(this.i, this.list.length));
},
 next$0: function() {
  var t1, value;
  t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout0(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout0(2, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      value = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.get$hasNext();
      $.boolConversionCheck(t1);
    case 1:
      state0 = 0;
      if (!t1)
        throw $.$$throw($.StateError$("No more elements"));
      value = this.list[this.i];
      t1 = this.i;
    case 2:
      var t1, value;
      state0 = 0;
      this.i = $.intTypeCheck($.add(t1, 1));
      return value;
  }
},
 is$Iterator: true
};

$$.JSInvocationMirror = {"":"Object;memberName>,_internalName,_kind,_liblib1$_arguments,_namedArgumentNames,_namedIndices",
 get$isGetter: function() {
  return this._kind === 1;
},
 get$isSetter: function() {
  return this._kind === 2;
},
 get$isAccessor: function() {
  return !(this._kind === 0);
},
 get$positionalArguments: function() {
  var list, t1, t3, t4, argumentCount, index;
  if ($.boolConversionCheck(this.get$isGetter()))
    return;
  list = [];
  t1 = this._liblib1$_arguments;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.get$positionalArguments$bailout(1, list, t1);
  t3 = t1.length;
  t4 = this._namedArgumentNames;
  t4 = $.getInterceptor$JSStringJSArray(t4).get$length(t4);
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  argumentCount = t3 - t4;
  for (index = 0; index < argumentCount; ++index) {
    if (index >= t1.length)
      throw $.ioore(index);
    $.CONSTANT.add$1(list, t1[index]);
  }
  return list;
},
 get$positionalArguments$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      list = env0;
      break;
    case 2:
      argumentCount = env3;
      t3 = env2;
      t1 = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
      if ($.boolConversionCheck(this.get$isGetter()))
        return;
      list = [];
      t1 = this._liblib1$_arguments;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      t4 = t3.get$length(t1);
      t5 = this._namedArgumentNames;
      argumentCount = $.sub(t4, $.getInterceptor$JSStringJSArray(t5).get$length(t5));
    case 2:
      var list, t1, t3, t4, t5, argumentCount, index;
      state0 = 0;
      for (index = 0; $.lt(index, argumentCount); ++index)
        $.CONSTANT.add$1(list, t3.operator$index$1(t1, index));
      return list;
  }
},
 get$namedArguments: function() {
  var map, t2, t3, namedArgumentCount, t5, namedArgumentsStartIndex, i, t1, t4;
  if ($.boolConversionCheck(this.get$isAccessor()))
    return;
  map = $.makeLiteralMap([]);
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(1, map);
  t2 = this._namedArgumentNames;
  t3 = $.getInterceptor$JSStringJSArray(t2);
  namedArgumentCount = t3.get$length(t2);
  $.intTypeCheck(namedArgumentCount);
  if (namedArgumentCount !== (namedArgumentCount | 0))
    return this.get$namedArguments$bailout(2, map, t2, t3, namedArgumentCount);
  t5 = this._liblib1$_arguments;
  if (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(3, namedArgumentCount, map, t2, t5, t3);
  namedArgumentsStartIndex = t5.length - namedArgumentCount;
  for (i = 0; $.boolConversionCheck($.lt(i, namedArgumentCount)); i = $.intTypeCheck(i + 1)) {
    t1 = t3.operator$index$1(t2, i);
    if (typeof i !== 'number')
      throw $.iae(i);
    t4 = namedArgumentsStartIndex + i;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t5.length)
      throw $.ioore(t4);
    t4 = t5[t4];
    if (t1 !== (t1 | 0))
      throw $.iae(t1);
    if (t1 < 0 || t1 >= map.length)
      throw $.ioore(t1);
    map[t1] = t4;
  }
  return $.callTypeCheck(map, 'is$Map');
},
 get$namedArguments$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      map = env0;
      break;
    case 2:
      namedArgumentCount = env3;
      t3 = env2;
      t2 = env1;
      map = env0;
      break;
    case 3:
      t3 = env4;
      t5 = env3;
      t2 = env2;
      map = env1;
      namedArgumentCount = env0;
      break;
    case 4:
      namedArgumentCount = env6;
      t3 = env5;
      map = env4;
      t5 = env3;
      t2 = env2;
      namedArgumentsStartIndex = env1;
      t7 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if ($.boolConversionCheck(this.get$isAccessor()))
        return;
      map = $.makeLiteralMap([]);
    case 1:
      state0 = 0;
      t2 = this._namedArgumentNames;
      t3 = $.getInterceptor$JSStringJSArray(t2);
      namedArgumentCount = t3.get$length(t2);
      $.intTypeCheck(namedArgumentCount);
    case 2:
      state0 = 0;
      t5 = this._liblib1$_arguments;
    case 3:
      state0 = 0;
      t7 = $.getInterceptor$JSStringJSArray(t5);
      namedArgumentsStartIndex = $.sub(t7.get$length(t5), namedArgumentCount);
      $.intTypeCheck(namedArgumentsStartIndex);
    case 4:
      var map, t2, t3, namedArgumentCount, t5, t7, namedArgumentsStartIndex, i;
      state0 = 0;
      for (i = 0; $.boolConversionCheck($.lt(i, namedArgumentCount)); i = $.intTypeCheck($.add(i, 1)))
        $.indexSet(map, t3.operator$index$1(t2, i), t7.operator$index$1(t5, $.add(namedArgumentsStartIndex, i)));
      return $.callTypeCheck(map, 'is$Map');
  }
},
 is$InvocationMirror: true
};

$$.StackTrace = {"":"Object;stack",
 toString$0: function() {
  var t1 = this.stack;
  return $.stringTypeCheck(!(t1 == null) ? t1 : "");
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.Dynamic_ = {"":"Object;",
 is$Dynamic_: true
};

$$.Null = {"":"Object;"
};

$$.TypeErrorImplementation = {"":"Object;message",
 toString$0: function() {
  return this.message;
}
};

$$.CastErrorImplementation = {"":"Object;actualType,expectedType",
 toString$0: function() {
  return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
}
};

$$.ConstantMap = {"":"Object;length>,_jsObject,_liblib1$_keys>",
 containsKey$1: function(key) {
  $.stringTypeCheck(key);
  if (key === "__proto__")
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  var t1;
  $.stringTypeCheck(key);
  t1 = this.containsKey$1(key);
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.operator$index$1$bailout0(1, key, t1);
  if (!t1)
    return;
  return this._jsObject[key];
},
 operator$index$1$bailout0: function(state0, key, t1) {
  if (!t1)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this._liblib1$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(this, f));
},
 get$keys: function() {
  return $.listSuperNativeTypeCheck(this._liblib1$_keys, 'is$Collection');
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib1$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq(this.length, 0));
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
},
 operator$indexSet$2: function(key, val) {
  $.stringTypeCheck(key);
  return $.voidTypeCheck(this._throwUnmodifiable$0());
},
 remove$1: function(key) {
  $.stringTypeCheck(key);
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return $.voidTypeCheck(this._throwUnmodifiable$0());
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"":"Object;_tag>,_tags,_set>",
 is$MetaInfo: true
};

$$.JSSyntaxRegExp = {"":"Object;_liblib1$_pattern,_multiLine,_ignoreCase",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  $.stringTypeCheck(str);
  m = $.listTypeCheck($.regExpExec(this, $.checkString(str)));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.getInterceptor$JSStringJSArray(m).operator$index$1(m, 0);
  t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString($.stringTypeCheck(str)));
},
 allMatches$1: function(str) {
  $.stringTypeCheck(str);
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib1$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true,
 is$Pattern: true
};

$$._MatchImplementation = {"":"Object;pattern,str,start,end,_groups",
 group$1: function(index) {
  var t1 = this._groups;
  return $.stringTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index));
},
 operator$index$1: function(index) {
  var t1;
  $.intTypeCheck(index);
  t1 = this._groups;
  return $.stringTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index));
},
 is$Match: true
};

$$._AllMatchesIterable = {"":"Object;_re,_str",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
},
 is$Iterable: function() { return true; }
};

$$._AllMatchesIterator = {"":"Object;_re,_str,_liblib1$_next>,_done",
 set$_liblib1$_next: function(v) { this._liblib1$_next = $.propertyTypeCheck(v, 'is$Match');},
 next$0: function() {
  var t1, next;
  t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout3(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  next = this._liblib1$_next;
  this._liblib1$_next = null;
  return $.propertyTypeCheck(next, 'is$Match');
},
 next$0$bailout3: function(state0, t1) {
  var next;
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  next = this._liblib1$_next;
  this._liblib1$_next = null;
  return $.propertyTypeCheck(next, 'is$Match');
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib1$_next == null))
    return true;
  this._liblib1$_next = $.propertyTypeCheck(this._re.firstMatch$1(this._str), 'is$Match');
  if (this._liblib1$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
},
 is$Iterator: true
};

$$.StringMatch = {"":"Object;start,str,pattern",
 operator$index$1: function(g) {
  return $.stringTypeCheck(this.group$1($.intTypeCheck(g)));
},
 group$1: function(group_) {
  if (!(group_ === 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
},
 is$Match: true
};

$$.AssertionError = {"":"Object;"
};

$$.NullThrownError = {"":"Object;",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"":"ArgumentError;message",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"":"Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
  t1.i_1 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior())
    return this.toString$0$bailout(1, t1, t2);
  for (; $.boolConversionCheck($.lt(t1.i_1, t2.length)); t1.i_1 = $.intTypeCheck($.add(t1.i_1, 1))) {
    if ($.boolConversionCheck($.gt(t1.i_1, 0))) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_1;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    t2.forEach$1(new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior())
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_0;
  actualParameters = $.stringTypeCheck($.getInterceptor(t3).toString$0(t3));
  t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
  for (i = 0; $.boolConversionCheck($.lt(i, t2.length)); ++i) {
    if ($.boolConversionCheck($.gt(i, 0))) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_0;
  formalParameters = $.stringTypeCheck($.getInterceptor(t1).toString$0(t1));
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
      t1.i_1 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (t3 = $.getInterceptor$JSStringJSArray(t2); $.boolConversionCheck($.lt(t1.i_1, t3.get$length(t2))); t1.i_1 = $.intTypeCheck($.add(t1.i_1, 1))) {
          if ($.boolConversionCheck($.gt(t1.i_1, 0))) {
            t4 = t1.sb_0;
            $.getInterceptor$JSArray(t4).add$1(t4, ", ");
          }
          t4 = t1.sb_0;
          $.getInterceptor$JSArray(t4).add$1(t4, $.Error_safeToString(t3.operator$index$1(t2, t1.i_1)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        t2.forEach$1(new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, t4, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
      else {
        t3 = t1.sb_0;
        actualParameters = $.stringTypeCheck($.getInterceptor(t3).toString$0(t3));
        t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
        for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.boolConversionCheck($.lt(i, t3.get$length(t2))); i = $.intTypeCheck($.add(i, 1))) {
          if ($.boolConversionCheck($.gt(i, 0))) {
            t4 = t1.sb_0;
            $.getInterceptor$JSArray(t4).add$1(t4, ", ");
          }
          t4 = t1.sb_0;
          $.getInterceptor$JSArray(t4).add$1(t4, t3.operator$index$1(t2, i));
        }
        t1 = t1.sb_0;
        formalParameters = $.stringTypeCheck($.getInterceptor(t1).toString$0(t1));
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"":"Object;message>",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"":"Object;message>",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"":"Object;message",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {"":"Object;",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$.RuntimeError = {"":"Object;message",
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._ExceptionImplementation = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"":"Object;message",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"":"Object;_pattern,_errmsg",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {"":"Object;source,stackTrace>",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor$JSString(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {"":"Object;_isComplete,_value,_exception,_stackTrace,_exceptionHandled,_throwOnException,_successListeners,_exceptionHandlers,_completionListeners",
 get$value: function() {
  if (!$.boolConversionCheck(this.get$isComplete()))
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (!$.boolConversionCheck(this.get$isComplete()))
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return $.boolConversionCheck(this.get$isComplete()) && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  $.functionTypeCheck(onSuccess);
  if ($.boolConversionCheck(this.get$hasValue()))
    onSuccess.call$1(this.get$value());
  else {
    t1 = this.get$isComplete();
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.then$1$bailout(1, onSuccess, t1);
    if (!t1) {
      this._throwOnException = true;
      $.CONSTANT.add$1(this._successListeners, onSuccess);
    } else {
      t1 = this._exceptionHandled;
      $.boolConversionCheck(t1);
      if (typeof t1 !== 'boolean')
        return this.then$1$bailout(2, t1);
      if (!t1)
        throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
    }
  }
},
 then$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      onSuccess = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      $.functionTypeCheck(onSuccess);
    default:
      var t1, onSuccess;
      if (state0 === 0 && $.boolConversionCheck(this.get$hasValue()))
        onSuccess.call$1(this.get$value());
      else
        switch (state0) {
          case 0:
            t1 = this.get$isComplete();
            $.boolConversionCheck(t1);
          case 1:
            state0 = 0;
          case 2:
            if (state0 === 0 && !t1) {
              this._throwOnException = true;
              $.CONSTANT.add$1(this._successListeners, onSuccess);
            } else
              switch (state0) {
                case 0:
                  t1 = this._exceptionHandled;
                  $.boolConversionCheck(t1);
                case 2:
                  state0 = 0;
                  if (!t1)
                    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
              }
        }
  }
},
 handleException$1: function(onException) {
  var t1;
  $.functionTypeCheck(onException);
  if ($.boolConversionCheck(this._exceptionHandled))
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = $.boolTypeCheck(onException.call$1(t1));
  } else
    $.CONSTANT.add$1(this._exceptionHandlers, onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.CONSTANT.iterator$0(this._exceptionHandlers); $.boolConversionCheck(t1.get$hasNext());) {
        handler = t1.next$0();
        if ($.boolConversionCheck($.eq(handler.call$1(this._exception), true))) {
          this._exceptionHandled = true;
          break;
        }
      }
    if ($.boolConversionCheck(this.get$hasValue()))
      for (t1 = $.CONSTANT.iterator$0(this._successListeners); $.boolConversionCheck(t1.get$hasNext());) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (!$.boolConversionCheck(this._exceptionHandled) && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.CONSTANT.iterator$0(this._completionListeners); $.boolConversionCheck(t1.get$hasNext());) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
},
 is$_FutureImpl: true,
 is$Future: true
};

$$._CompleterImpl = {"":"Object;_futureImpl",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception, null);
},
 is$Completer: true
};

$$._HashMapImpl = {"":"Object;_keys>,_values,_loadLimit,_numberOfEntries,_numberOfDeleted",
 _probeForAdding$1: function(key) {
  var t1, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  t3 = this._keys;
  t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1);
  hash = (t1 & t3 - 1) >>> 0;
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.boolConversionCheck($.eq(existingKey, key)))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(5, hash, key, numberOfProbes0, insertionIndex);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      key = env0;
      break;
    case 3:
      t1 = env1;
      key = env0;
      break;
    case 4:
      numberOfProbes = env4;
      insertionIndex = env3;
      hash = env2;
      numberOfProbes0 = env1;
      key = env0;
      break;
    case 5:
      insertionIndex = env3;
      numberOfProbes0 = env2;
      key = env1;
      hash = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      t3 = this._keys;
      t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
    case 2:
      state0 = 0;
      $.intTypeCheck(t1);
      $.intTypeCheck(t3);
      t1 = $.and(t1, $.sub(t3, 1));
      $.intTypeCheck(t1);
    case 3:
      state0 = 0;
      hash = t1;
      insertionIndex = -1;
      numberOfProbes = 1;
    default:
      var t1, key, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0, t2;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
              if (existingKey == null) {
                if ($.boolConversionCheck($.lt(insertionIndex, 0)))
                  return hash;
                return insertionIndex;
              } else if ($.boolConversionCheck($.eq(existingKey, key)))
                return hash;
              else if ($.boolConversionCheck($.lt(insertionIndex, 0)) && existingKey === $.CONSTANT3)
                insertionIndex = hash;
              numberOfProbes0 = $.add(numberOfProbes, 1);
              $.intTypeCheck(numberOfProbes0);
            case 4:
              state0 = 0;
              t2 = this._keys;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
            case 5:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  t2 = this._keys;
  t2 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
  $.intTypeCheck(t1);
  $.intTypeCheck(t2);
  hash = $.intTypeCheck($.and(t1, $.sub(t2, 1)));
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
    if (existingKey == null)
      return -1;
    if ($.boolConversionCheck($.eq(existingKey, key)))
      return hash;
    numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1));
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, t1, numberOfFree;
  newNumberOfEntries = $.intTypeCheck($.add(this._numberOfEntries, 1));
  if ($.boolConversionCheck($.ge(newNumberOfEntries, this._loadLimit))) {
    t1 = this._keys;
    this._grow$1($.mul($.getInterceptor$JSStringJSArray(t1).get$length(t1), 2));
    return;
  }
  t1 = this._keys;
  numberOfFree = $.intTypeCheck($.sub($.intTypeCheck($.sub($.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1)), newNumberOfEntries)), this._numberOfDeleted));
  if ($.boolConversionCheck($.gt(this._numberOfDeleted, numberOfFree))) {
    t1 = this._keys;
    this._grow$1($.getInterceptor$JSStringJSArray(t1).get$length(t1));
  }
},
 _grow$1: function(newCapacity) {
  var t1, capacity, oldKeys, oldValues, t2, i, key, value, newIndex;
  $.intTypeCheck(newCapacity);
  $.assertHelper($.boolTypeCheck($.eq($.and(newCapacity, $.sub(newCapacity, 1)), 0)));
  t1 = this._keys;
  capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  $.intTypeCheck(capacity);
  if (capacity !== (capacity | 0))
    return this._grow$1$bailout(1, newCapacity, capacity);
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4));
  oldKeys = $.listTypeCheck(this._keys);
  oldValues = $.listTypeCheck(this._values);
  t2 = $.List_List(newCapacity);
  $.setRuntimeTypeInfo(t2, []);
  this._keys = t2;
  t2 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t2;
  for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; $.boolConversionCheck($.lt(i, capacity)); i = $.intTypeCheck($.add(i, 1))) {
    key = t1.operator$index$1(oldKeys, i);
    if (key == null || key === $.CONSTANT3)
      continue;
    value = t2.operator$index$1(oldValues, i);
    newIndex = $.intTypeCheck(this._probeForAdding$1(key));
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state0, newCapacity, capacity) {
  var oldKeys, oldValues, t2, t1, i, key, value, newIndex;
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4));
  oldKeys = $.listTypeCheck(this._keys);
  oldValues = $.listTypeCheck(this._values);
  t2 = $.List_List(newCapacity);
  $.setRuntimeTypeInfo(t2, []);
  this._keys = t2;
  t2 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t2;
  for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; $.boolConversionCheck($.lt(i, capacity)); i = $.intTypeCheck($.add(i, 1))) {
    key = t1.operator$index$1(oldKeys, i);
    if (key == null || key === $.CONSTANT3)
      continue;
    value = t2.operator$index$1(oldValues, i);
    newIndex = $.intTypeCheck(this._probeForAdding$1(key));
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.clear$0$bailout(1, length$);
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state0, length$) {
  var i;
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1, t2;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  $.intTypeCheck(index);
  t1 = this._keys;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) == null)) {
    t1 = this._keys;
    t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) === $.CONSTANT3;
    t1 = t2;
  } else
    t1 = true;
  if (t1) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.operator$indexSet$2$bailout0(1, key, value, t1, index);
    this._numberOfEntries = $.intTypeCheck(t1 + 1);
  }
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$indexSet$2$bailout0: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      index = env3;
      t1 = env2;
      value = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      this._ensureCapacity$0();
      index = this._probeForAdding$1(key);
      $.intTypeCheck(index);
      t1 = this._keys;
      if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) == null)) {
        t1 = this._keys;
        t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) === $.CONSTANT3;
        t1 = t2;
      } else
        t1 = true;
    case 1:
      var index, t1, t2, value, key;
      if (state0 === 1 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            t1 = this._numberOfEntries;
          case 1:
            state0 = 0;
            this._numberOfEntries = $.intTypeCheck($.add(t1, 1));
        }
      $.indexSet(this._keys, index, key);
      $.indexSet(this._values, index, value);
  }
},
 operator$index$1: function(key) {
  var index, t1;
  index = $.intTypeCheck(this._probeForLookup$1(key));
  if ($.boolConversionCheck($.lt(index, 0)))
    return;
  t1 = this._values;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  $.intTypeCheck(index);
  if ($.boolConversionCheck($.ge(index, 0))) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.remove$1$bailout(1, index, t1);
    this._numberOfEntries = $.intTypeCheck(t1 - 1);
    t1 = this._values;
    value = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CONSTANT3);
    t1 = this._numberOfDeleted;
    if (typeof t1 !== 'number')
      return this.remove$1$bailout(2, value, t1);
    this._numberOfDeleted = $.intTypeCheck(t1 + 1);
    return value;
  }
  return;
},
 remove$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      index = env0;
      break;
    case 2:
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      index = this._probeForLookup$1(key);
      $.intTypeCheck(index);
    default:
      var index, t1, value;
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.boolConversionCheck($.ge(index, 0)))
        switch (state0) {
          case 0:
            t1 = this._numberOfEntries;
          case 1:
            state0 = 0;
            this._numberOfEntries = $.intTypeCheck($.sub(t1, 1));
            t1 = this._values;
            value = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
            $.indexSet(this._values, index, null);
            $.indexSet(this._keys, index, $.CONSTANT3);
            t1 = this._numberOfDeleted;
          case 2:
            state0 = 0;
            this._numberOfDeleted = $.intTypeCheck($.add(t1, 1));
            return value;
        }
      return;
  }
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq(this._numberOfEntries, 0));
},
 get$length: function() {
  return $.intTypeCheck(this._numberOfEntries);
},
 forEach$1: function(f) {
  var t1, length$, i, key;
  $.functionTypeCheck(f);
  t1 = this._keys;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.forEach$1$bailout(1, f, length$);
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = this._keys;
    key = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
    if (!(key == null) && !(key === $.CONSTANT3)) {
      t1 = this._values;
      f.call$2(key, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i));
    }
  }
},
 forEach$1$bailout: function(state0, f, length$) {
  var i, t1, key;
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = this._keys;
    key = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
    if (!(key == null) && !(key === $.CONSTANT3)) {
      t1 = this._values;
      f.call$2(key, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i));
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  var t1 = $.List_List(8);
  $.setRuntimeTypeInfo(t1, []);
  this._keys = t1;
  t1 = $.List_List(8, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t1;
},
 is$_HashMapImpl: true,
 is$HashMap: true,
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"":"Object;"
};

$$._KeyValuePair = {"":"Object;key>,value=",
 is$_KeyValuePair: true
};

$$._LinkedHashMapImpl = {"":"Object;_liblib0$_list,_map",
 operator$indexSet$2: function(key, value) {
  var t1, t3;
  if ($.boolConversionCheck(this._map.containsKey$1(key))) {
    t1 = this._map;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout(1, key, value, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key].get$element().set$value(value);
  } else {
    t1 = this._liblib0$_list;
    $.getInterceptor$JSArray(t1).addLast$1(t1, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
    t1 = this._map;
    if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout(2, key, t1);
    t3 = this._liblib0$_list.lastEntry$0();
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = t3;
  }
},
 operator$indexSet$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env2;
      value = env1;
      key = env0;
      break;
    case 2:
      t1 = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, value, key;
      if (state0 === 1 || state0 === 0 && $.boolConversionCheck(this._map.containsKey$1(key)))
        switch (state0) {
          case 0:
            t1 = this._map;
          case 1:
            state0 = 0;
            $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
        }
      else
        switch (state0) {
          case 0:
            t1 = this._liblib0$_list;
            $.getInterceptor$JSArray(t1).addLast$1(t1, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
            t1 = this._map;
          case 2:
            state0 = 0;
            $.indexSet(t1, key, this._liblib0$_list.lastEntry$0());
        }
  }
},
 operator$index$1: function(key) {
  var t1, entry;
  t1 = this._map;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout(1, key, t1);
  if (key !== (key | 0))
    throw $.iae(key);
  if (key < 0 || key >= t1.length)
    throw $.ioore(key);
  entry = $.propertyTypeCheck(t1[key], 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 operator$index$1$bailout: function(state0, key, t1) {
  var entry = $.propertyTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = $.propertyTypeCheck(this._map.remove$1(key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.index_0 = 0;
  t2 = this._liblib0$_list;
  $.getInterceptor$JSArray(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(t1, list));
  $.assertHelper($.eq(t1.index_0, this.get$length()));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.index_0 = 0;
  t2 = this._liblib0$_list;
  $.getInterceptor$JSArray(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  $.assertHelper($.eq(t1.index_0, this.get$length()));
  return list;
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this._liblib0$_list;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return $.boolTypeCheck(this._map.containsKey$1(key));
},
 get$length: function() {
  var t1 = this._map;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq(this.get$length(), 0));
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._liblib0$_list;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  var t1, t2;
  t1 = $.getRuntimeTypeInfo(this)[0];
  t2 = $.getRuntimeTypeInfo(this);
  this._map = $.propertyTypeCheck($.HashMap_HashMap(t1, [$.DoubleLinkedQueueEntry, [$._KeyValuePair, t2[0], t2[1]]]), 'is$HashMap');
  t1 = $.getRuntimeTypeInfo(this);
  this._liblib0$_list = $.DoubleLinkedQueue$([$._KeyValuePair, t1[0], t1[1]]);
},
 is$HashMap: true,
 is$Map: function() { return true; }
};

$$.Object = {"":";",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$1: function(invocation) {
  $.propertyTypeCheck(invocation, 'is$InvocationMirror');
  throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
},
 registerPort$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("registerPort", "registerPort$2", 0, [$0, $1], []));
},
 replaceWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
},
 authorize$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("authorize", "authorize$2", 0, [$0, $1], []));
},
 floor$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0", 0, [], []));
},
 _setGlobals$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
},
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
},
 allMatches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
},
 operator$ge$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">=", "operator$ge$1", 0, [$0], []));
},
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
},
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
},
 $$dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
},
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2", 0, [$0, $1], []));
},
 load$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("load", "load$3", 0, [$0, $1, $2], []));
},
 operator$xor$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("^", "operator$xor$1", 0, [$0], []));
},
 firstMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
},
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
},
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
},
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
},
 _liblib4$_deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_liblib4$_deserializeMap$1", 0, [$0], []));
},
 operator$sub$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("-", "operator$sub$1", 0, [$0], []));
},
 truncate$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0", 0, [], []));
},
 concat$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("concat", "concat$1", 0, [$0], []));
},
 execute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("execute", "execute$1", 0, [$0], []));
},
 _toList$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_toList", "_toList$0", 0, [], []));
},
 completeException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$1", 0, [$0], []));
},
 completeException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$2", 0, [$0, $1], []));
},
 next$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("next", "next$0", 0, [], []));
},
 remove$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
},
 remove$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
},
 startsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
},
 getRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
},
 callSync$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
},
 iterator$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("iterator", "iterator$0", 0, [], []));
},
 toLowerCase$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
},
 cleanup$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
},
 operator$le$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<=", "operator$le$1", 0, [$0], []));
},
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
},
 _get_1$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1", 0, [$0], []));
},
 contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
},
 contains$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
},
 unregister$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
},
 MakeRequest$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("MakeRequest", "MakeRequest$0", 0, [], []));
},
 lookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
},
 $$dom_removeAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeAttribute", "$$dom_removeAttribute$1", 0, [$0], []));
},
 hasMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
},
 add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
},
 $$dom_createEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createEvent", "$$dom_createEvent$1", 0, [$0], []));
},
 operator$mul$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("*", "operator$mul$1", 0, [$0], []));
},
 previousEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
},
 $$dom_getAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
},
 run$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
},
 _complete$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_complete", "_complete$0", 0, [], []));
},
 auth$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("auth", "auth$0", 0, [], []));
},
 get$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("get", "get$1", 0, [$0], []));
},
 substring$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
},
 substring$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
},
 _dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
},
 _liblib4$_dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_liblib4$_dispatch$1", 0, [$0], []));
},
 addAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
},
 stringifyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
},
 operator$shr$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">>", "operator$shr$1", 0, [$0], []));
},
 query$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("query", "query$1", 0, [$0], []));
},
 queryAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("queryAll", "queryAll$1", 0, [$0], []));
},
 _update$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_update", "_update$1", 0, [$0], []));
},
 register$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
},
 charCodeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
},
 _initialize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_initialize", "_initialize$1", 0, [$0], []));
},
 complete$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
},
 $$dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
},
 $$dom_hasAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_hasAttribute", "$$dom_hasAttribute$1", 0, [$0], []));
},
 clear$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
},
 prepend$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
},
 addLast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
},
 _throwUnmodifiable$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_throwUnmodifiable", "_throwUnmodifiable$0", 0, [], []));
},
 map$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("map", "map$1", 0, [$0], []));
},
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
},
 toUpperCase$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toUpperCase", "toUpperCase$0", 0, [], []));
},
 forEach$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
},
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
},
 _liblib4$_deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_liblib4$_deserializeHelper$1", 0, [$0], []));
},
 toSendPort$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
},
 enterScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
},
 $$dom_dispatchEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_dispatchEvent", "$$dom_dispatchEvent$1", 0, [$0], []));
},
 $$dom_setAttribute$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
},
 _deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
},
 _liblib4$_deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_liblib4$_deserializeList$1", 0, [$0], []));
},
 endsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
},
 _getter$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_getter", "_getter$0", 0, [], []));
},
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
},
 insertBefore$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("insertBefore", "insertBefore$2", 0, [$0, $1], []));
},
 removeFirst$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
},
 group$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("group", "group$1", 0, [$0], []));
},
 close$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
},
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
},
 filter$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("filter", "filter$1", 0, [$0], []));
},
 _grow$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
},
 globalize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("globalize", "globalize$1", 0, [$0], []));
},
 _serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
},
 _liblib4$_serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_liblib4$_serializeList$1", 0, [$0], []));
},
 operator$add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("+", "operator$add$1", 0, [$0], []));
},
 postMessage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
},
 then$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
},
 indexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
},
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
},
 operator$tdiv$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("~/", "operator$tdiv$1", 0, [$0], []));
},
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
},
 _add_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
},
 _advance$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_advance", "_advance$0", 0, [], []));
},
 operator$indexSet$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("[]=", "operator$indexSet$2", 0, [$0, $1], []));
},
 compareAndNotify$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("compareAndNotify", "compareAndNotify$0", 0, [], []));
},
 _link$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
},
 containsKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
},
 operator$shl$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<<", "operator$shl$1", 0, [$0], []));
},
 operator$lt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<", "operator$lt$1", 0, [$0], []));
},
 removeRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("removeRange", "removeRange$2", 0, [$0, $1], []));
},
 runIteration$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
},
 invalidate$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("invalidate", "invalidate$1", 0, [$0], []));
},
 _ensureCapacity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
},
 operator$gt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">", "operator$gt$1", 0, [$0], []));
},
 _runHelper$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
},
 process$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
},
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
},
 $$dom_createElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createElement", "$$dom_createElement$1", 0, [$0], []));
},
 operator$and$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("&", "operator$and$1", 0, [$0], []));
},
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
},
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0", 0, [], []));
},
 exitScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
},
 lastEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
},
 ceil$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0", 0, [], []));
},
 _matches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_matches", "_matches$1", 0, [$0], []));
},
 setApiKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setApiKey", "setApiKey$1", 0, [$0], []));
},
 _callback$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
},
 _liblib3$_callback$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib3$_callback$1", 0, [$0], []));
},
 _liblib4$_callback$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib4$_callback$2", 0, [$0, $1], []));
},
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
},
 _liblib4$_deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_liblib4$_deserializeRef$1", 0, [$0], []));
},
 $$dom_appendChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
},
 reset$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
},
 _compare$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_compare", "_compare$1", 0, [$0], []));
},
 call$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
},
 call$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
},
 call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
},
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
},
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
},
 $$dom_removeChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
},
 lookupPort$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookupPort", "lookupPort$1", 0, [$0], []));
},
 _safeRead$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_safeRead", "_safeRead$0", 0, [], []));
},
 _get_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1", 0, [$0], []));
},
 toJson$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toJson", "toJson$0", 0, [], []));
},
 removeLast$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
},
 operator$index$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("[]", "operator$index$1", 0, [$0], []));
},
 get$_liblib2$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "get$_liblib2$_id", 1, [], []));
},
 get$_liblib4$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "get$_liblib4$_id", 1, [], []));
},
 get$_previous: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_previous", "get$_previous", 1, [], []));
},
 get$_backingMap: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_backingMap", "get$_backingMap", 1, [], []));
},
 get$isNaN: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNaN", "get$isNaN", 1, [], []));
},
 get$elements: function() {
  return this.noSuchMethod$1($.createInvocationMirror("elements", "get$elements", 1, [], []));
},
 get$$$dom_attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_attributes", "get$$$dom_attributes", 1, [], []));
},
 get$_set: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_set", "get$_set", 1, [], []));
},
 get$userAgent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("userAgent", "get$userAgent", 1, [], []));
},
 get$onAuthResponse: function() {
  return this.noSuchMethod$1($.createInvocationMirror("onAuthResponse", "get$onAuthResponse", 1, [], []));
},
 get$rootContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext", "get$rootContext", 1, [], []));
},
 get$sb: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sb", "get$sb", 1, [], []));
},
 get$last: function() {
  return this.noSuchMethod$1($.createInvocationMirror("last", "get$last", 1, [], []));
},
 get$click: function() {
  return this.noSuchMethod$1($.createInvocationMirror("click", "get$click", 1, [], []));
},
 get$length: function() {
  return this.noSuchMethod$1($.createInvocationMirror("length", "get$length", 1, [], []));
},
 get$isWorker: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isWorker", "get$isWorker", 1, [], []));
},
 get$_liblib0$_element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_element", "get$_liblib0$_element", 1, [], []));
},
 get$hasNext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hasNext", "get$hasNext", 1, [], []));
},
 get$mainManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mainManager", "get$mainManager", 1, [], []));
},
 get$future: function() {
  return this.noSuchMethod$1($.createInvocationMirror("future", "get$future", 1, [], []));
},
 get$id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("id", "get$id", 1, [], []));
},
 get$parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("parent", "get$parent", 1, [], []));
},
 get$value: function() {
  return this.noSuchMethod$1($.createInvocationMirror("value", "get$value", 1, [], []));
},
 get$gapi: function() {
  return this.noSuchMethod$1($.createInvocationMirror("gapi", "get$gapi", 1, [], []));
},
 get$auth: function() {
  return this.noSuchMethod$1($.createInvocationMirror("auth", "get$auth", 1, [], []));
},
 get$currentManagerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "get$currentManagerId", 1, [], []));
},
 get$_filtered: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_filtered", "get$_filtered", 1, [], []));
},
 get$_next: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_next", "get$_next", 1, [], []));
},
 get$client: function() {
  return this.noSuchMethod$1($.createInvocationMirror("client", "get$client", 1, [], []));
},
 get$sendPort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sendPort", "get$sendPort", 1, [], []));
},
 get$_portId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_portId", "get$_portId", 1, [], []));
},
 get$_futurePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "get$_futurePort", 1, [], []));
},
 get$fromCommandLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "get$fromCommandLine", 1, [], []));
},
 get$children: function() {
  return this.noSuchMethod$1($.createInvocationMirror("children", "get$children", 1, [], []));
},
 get$on: function() {
  return this.noSuchMethod$1($.createInvocationMirror("on", "get$on", 1, [], []));
},
 get$newValue: function() {
  return this.noSuchMethod$1($.createInvocationMirror("newValue", "get$newValue", 1, [], []));
},
 get$element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("element", "get$element", 1, [], []));
},
 get$_registry: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_registry", "get$_registry", 1, [], []));
},
 get$people: function() {
  return this.noSuchMethod$1($.createInvocationMirror("people", "get$people", 1, [], []));
},
 get$attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("attributes", "get$attributes", 1, [], []));
},
 get$_getter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_getter", "get$_getter", 1, [], []));
},
 get$body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("body", "get$body", 1, [], []));
},
 get$topEventLoop: function() {
  return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "get$topEventLoop", 1, [], []));
},
 get$nextNode: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextNode", "get$nextNode", 1, [], []));
},
 get$RequestCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("RequestCallback", "get$RequestCallback", 1, [], []));
},
 get$$$dom_localName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_localName", "get$$$dom_localName", 1, [], []));
},
 get$_scopeIndices: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_scopeIndices", "get$_scopeIndices", 1, [], []));
},
 get$style: function() {
  return this.noSuchMethod$1($.createInvocationMirror("style", "get$style", 1, [], []));
},
 get$_keys: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keys", "get$_keys", 1, [], []));
},
 get$documentElement: function() {
  return this.noSuchMethod$1($.createInvocationMirror("documentElement", "get$documentElement", 1, [], []));
},
 get$plus: function() {
  return this.noSuchMethod$1($.createInvocationMirror("plus", "get$plus", 1, [], []));
},
 get$_listenerName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_listenerName", "get$_listenerName", 1, [], []));
},
 get$isolates: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isolates", "get$isolates", 1, [], []));
},
 get$managers: function() {
  return this.noSuchMethod$1($.createInvocationMirror("managers", "get$managers", 1, [], []));
},
 get$nextIsolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "get$nextIsolateId", 1, [], []));
},
 get$$$dom_childNodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_childNodes", "get$$$dom_childNodes", 1, [], []));
},
 get$_liblib4$_receivePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "get$_liblib4$_receivePort", 1, [], []));
},
 get$isEmpty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
},
 get$currentContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext", "get$currentContext", 1, [], []));
},
 get$parentNode: function() {
  return this.noSuchMethod$1($.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
},
 get$_port: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_port", "get$_port", 1, [], []));
},
 get$needSerialization: function() {
  return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "get$needSerialization", 1, [], []));
},
 get$isComplete: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isComplete", "get$isComplete", 1, [], []));
},
 get$$$dom_lastElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_lastElementChild", "get$$$dom_lastElementChild", 1, [], []));
},
 get$_liblib4$_callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "get$_liblib4$_callback", 1, [], []));
},
 get$$$dom_firstElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_firstElementChild", "get$$$dom_firstElementChild", 1, [], []));
},
 get$$$dom_body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_body", "get$$$dom_body", 1, [], []));
},
 get$ports: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ports", "get$ports", 1, [], []));
},
 get$_tag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_tag", "get$_tag", 1, [], []));
},
 get$nodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nodes", "get$nodes", 1, [], []));
},
 get$_liblib4$_isolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "get$_liblib4$_isolateId", 1, [], []));
},
 get$window: function() {
  return this.noSuchMethod$1($.createInvocationMirror("window", "get$window", 1, [], []));
},
 get$stackTrace: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
},
 get$navigator: function() {
  return this.noSuchMethod$1($.createInvocationMirror("navigator", "get$navigator", 1, [], []));
},
 get$_workerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_workerId", "get$_workerId", 1, [], []));
},
 get$_serialized: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_serialized", "get$_serialized", 1, [], []));
},
 set$currentContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "set$currentContext", 2, [$0], []));
},
 set$_previous: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_previous=", "set$_previous", 2, [$0], []));
},
 set$init: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("init=", "set$init", 2, [$0], []));
},
 set$auth: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("auth=", "set$auth", 2, [$0], []));
},
 set$onAuthResponse: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onAuthResponse=", "set$onAuthResponse", 2, [$0], []));
},
 set$display: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("display=", "set$display", 2, [$0], []));
},
 set$text: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("text=", "set$text", 2, [$0], []));
},
 set$RequestCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("RequestCallback=", "set$RequestCallback", 2, [$0], []));
},
 set$innerHtml: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
},
 set$href: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("href=", "set$href", 2, [$0], []));
},
 set$innerHTML: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHTML=", "set$innerHTML", 2, [$0], []));
},
 set$rootContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "set$rootContext", 2, [$0], []));
},
 set$src: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("src=", "set$src", 2, [$0], []));
},
 set$value: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("value=", "set$value", 2, [$0], []));
},
 set$_next: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_next=", "set$_next", 2, [$0], []));
},
 set$MakeRequest: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("MakeRequest=", "set$MakeRequest", 2, [$0], []));
},
 set$length: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("length=", "set$length", 2, [$0], []));
},
 set$type: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("type=", "set$type", 2, [$0], []));
},
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "set$nextIsolateId", 2, [$0], []));
}
};

$$.DoubleLinkedQueueEntry = {"":"Object;_previous>,_next>,_liblib0$_element>",
 set$_previous: function(v) { this._previous = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry');},
 set$_next: function(v) { this._next = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry');},
 _link$2: function(p, n) {
  $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this)[0])._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._liblib0$_element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return $.propertyTypeCheck(this._previous._asNonSentinelEntry$0(), 'is$DoubleLinkedQueueEntry');
},
 get$element: function() {
  return this._liblib0$_element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._liblib0$_element = e;
},
 is$DoubleLinkedQueueEntry: true
};

$$._DoubleLinkedQueueEntrySentinel = {"":"DoubleLinkedQueueEntry;_previous,_next,_liblib0$_element",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
},
 is$_DoubleLinkedQueueEntrySentinel: true
};

$$.DoubleLinkedQueue = {"":"Object;_sentinel",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 get$last: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return $.propertyTypeCheck(this._sentinel.previousEntry$0(), 'is$DoubleLinkedQueueEntry');
},
 get$length: function() {
  var t1 = {};
  t1.counter_0 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return $.intTypeCheck(t1.counter_0);
},
 get$isEmpty: function() {
  var t1, t2;
  t1 = this._sentinel;
  t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1 = this._sentinel;
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var entry, t1, nextEntry;
  $.functionTypeCheck(f);
  entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    f.call$1(entry.get$_liblib0$_element());
  }
},
 map$1: function(f) {
  var other, entry, t1, nextEntry;
  $.functionTypeCheck(f);
  other = $.propertyTypeCheck($.Queue_Queue(), 'is$Queue');
  entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    other.addLast$1(f.call$1(entry.get$_liblib0$_element()));
  }
  return other;
},
 filter$1: function(f) {
  var other, entry, t1, nextEntry;
  $.functionTypeCheck(f);
  other = $.propertyTypeCheck($.Queue_Queue($.getRuntimeTypeInfo(this)[0]), 'is$Queue');
  entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    if ($.boolConversionCheck(f.call$1(entry.get$_liblib0$_element())))
      other.addLast$1(entry.get$_liblib0$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this)[0]);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this)[0]);
},
 is$DoubleLinkedQueue: true,
 is$Queue: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":"Object;_sentinel,_currentEntry",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  var t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout2(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 next$0$bailout2: function(state0, t1) {
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  this._currentEntry = this._sentinel;
},
 is$Iterator: true
};

$$._HashSetImpl = {"":"Object;_backingMap>",
 clear$0: function() {
  var t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 add$1: function(value) {
  $.indexSet(this._backingMap, value, value);
},
 contains$1: function(value) {
  return $.boolTypeCheck(this._backingMap.containsKey$1(value));
},
 remove$1: function(value) {
  if (!$.boolConversionCheck(this._backingMap.containsKey$1(value)))
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_forEach_anon(f));
},
 map$1: function(f) {
  var result, t1;
  $.functionTypeCheck(f);
  result = $.propertyTypeCheck($.Set_Set(), 'is$Set');
  t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_map_anon(f, result));
  return result;
},
 filter$1: function(f) {
  var result, t1;
  $.functionTypeCheck(f);
  result = $.propertyTypeCheck($.Set_Set($.getRuntimeTypeInfo(this)[0]), 'is$Set');
  t1 = this._backingMap;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.boolTypeCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1));
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 iterator$0: function() {
  return $._HashSetIterator$(this, $.getRuntimeTypeInfo(this)[0]);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$($.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[0]);
},
 is$_HashSetImpl: true,
 is$Set: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._HashSetIterator = {"":"Object;_entries,_nextValidIndex",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = $.getInterceptor$JSStringJSArray(t2);
  if ($.boolConversionCheck($.ge(t1, t3.get$length(t2))))
    return false;
  if (t3.operator$index$1(t2, this._nextValidIndex) === $.CONSTANT3)
    this._advance$0();
  return $.boolTypeCheck($.lt(this._nextValidIndex, t3.get$length(t2)));
},
 next$0: function() {
  var t1, res;
  t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout4(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  res = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 next$0$bailout4: function(state0, t1) {
  var res;
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  res = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, t2, length$, t3, entry;
  t1 = this._entries;
  t2 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t2.get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this._advance$0$bailout(1, t1, t2, length$);
  do {
    t3 = $.add(this._nextValidIndex, 1);
    this._nextValidIndex = $.intTypeCheck(t3);
    if ($.boolConversionCheck($.ge(t3, length$)))
      break;
    entry = t2.operator$index$1(t1, this._nextValidIndex);
  } while (entry == null || entry === $.CONSTANT3);
},
 _advance$0$bailout: function(state0, t1, t2, length$) {
  var t3, entry;
  do {
    t3 = $.add(this._nextValidIndex, 1);
    this._nextValidIndex = $.intTypeCheck(t3);
    if ($.boolConversionCheck($.ge(t3, length$)))
      break;
    entry = t2.operator$index$1(t1, this._nextValidIndex);
  } while (entry == null || entry === $.CONSTANT3);
},
 _HashSetIterator$1: function(set_) {
  $.propertyTypeCheck(set_, 'is$_HashSetImpl');
  this._advance$0();
},
 is$Iterator: true
};

$$._StringBufferImpl = {"":"Object;_buffer,_length",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str, t1;
  str = $.getInterceptor(obj).toString$0(obj);
  $.stringTypeCheck(str);
  if (!(typeof str === 'string'))
    throw $.$$throw($.ArgumentError$("toString() did not return a string"));
  if ($.boolConversionCheck($.CONSTANT1.get$isEmpty(str)))
    return;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  t1 = this._length;
  if (t1 !== (t1 | 0))
    return this.add$1$bailout(1, t1, str);
  this._length = t1 + str.length;
},
 add$1$bailout: function(state0, t1, str) {
  this._length = $.intTypeCheck($.add(t1, str.length));
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(objects).iterator$0(objects); $.boolConversionCheck(t1.get$hasNext());)
    this.add$1(t1.next$0());
},
 clear$0: function() {
  var t1 = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(t1, [$.String]);
  this._buffer = t1;
  this._length = 0;
},
 toString$0: function() {
  var t1, result, t2;
  t1 = this._buffer;
  if ($.boolConversionCheck($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)))
    return "";
  t1 = this._buffer;
  if ($.boolConversionCheck($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))) {
    t1 = this._buffer;
    return $.stringTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0));
  }
  t1 = this._buffer;
  $.listTypeCheck(t1);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(t1), "");
  t2 = this._buffer;
  $.getInterceptor$JSArray(t2).clear$0(t2);
  t2 = this._buffer;
  $.getInterceptor$JSArray(t2).add$1(t2, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
},
 is$StringBuffer: true
};

$$.ObjectInterceptor = {"":"Object;",
 get$length: function(receiver) {
  return receiver.get$length();
},
 add$1: function(receiver, a0) {
  return receiver.add$1(a0);
},
 substring$2: function(receiver, a0, a1) {
  return receiver.substring$2(a0, a1);
},
 toString$0: function(receiver) {
  return receiver.toString$0();
},
 charCodeAt$1: function(receiver, a0) {
  return receiver.charCodeAt$1(a0);
},
 contains$2: function(receiver, a0, a1) {
  return receiver.contains$2(a0, a1);
},
 iterator$0: function(receiver) {
  return receiver.iterator$0();
},
 substring$1: function(receiver, a0) {
  return receiver.substring$1(a0);
},
 indexOf$2: function(receiver, a0, a1) {
  return receiver.indexOf$2(a0, a1);
},
 startsWith$1: function(receiver, a0) {
  return receiver.startsWith$1(a0);
},
 clear$0: function(receiver) {
  return receiver.clear$0();
},
 operator$index$1: function(receiver, a0) {
  return receiver.operator$index$1(a0);
},
 getRange$2: function(receiver, a0, a1) {
  return receiver.getRange$2(a0, a1);
},
 floor$0: function(receiver) {
  return receiver.floor$0();
},
 get$hashCode: function(receiver) {
  return receiver.get$hashCode();
},
 forEach$1: function(receiver, a0) {
  return receiver.forEach$1(a0);
},
 replaceAll$2: function(receiver, a0, a1) {
  return receiver.replaceAll$2(a0, a1);
},
 get$isEmpty: function(receiver) {
  return receiver.get$isEmpty();
},
 set$length: function(receiver, value) {
  return receiver.set$length(value);
},
 removeRange$2: function(receiver, a0, a1) {
  return receiver.removeRange$2(a0, a1);
},
 toUpperCase$0: function(receiver) {
  return receiver.toUpperCase$0();
},
 concat$1: function(receiver, a0) {
  return receiver.concat$1(a0);
},
 get$isNaN: function(receiver) {
  return receiver.get$isNaN();
},
 removeLast$0: function(receiver) {
  return receiver.removeLast$0();
},
 filter$1: function(receiver, a0) {
  return receiver.filter$1(a0);
},
 truncate$0: function(receiver) {
  return receiver.truncate$0();
},
 endsWith$1: function(receiver, a0) {
  return receiver.endsWith$1(a0);
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase$0();
},
 contains$1: function(receiver, a0) {
  return receiver.contains$1(a0);
},
 addAll$1: function(receiver, a0) {
  return receiver.addAll$1(a0);
},
 get$last: function(receiver) {
  return receiver.get$last();
},
 addLast$1: function(receiver, a0) {
  return receiver.addLast$1(a0);
},
 ceil$0: function(receiver) {
  return receiver.ceil$0();
},
 allMatches$1: function(receiver, a0) {
  return receiver.allMatches$1(a0);
},
 map$1: function(receiver, a0) {
  return receiver.map$1(a0);
},
 indexOf$1: function(receiver, a0) {
  return receiver.indexOf$1(a0);
}
};

$$.JSFunction = {"":"Object;",
 toString$0: function(receiver) {
  return "Closure";
},
 is$Function: true
};

$$.JSBool = {"":"Object;",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {"":"Object;",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {"":"Object;",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); $.boolConversionCheck(t1.get$hasNext());)
    $.CONSTANT.add$1(receiver, t1.next$0());
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, $.functionTypeCheck(f));
},
 map$1: function(receiver, f) {
  $.functionTypeCheck(f);
  return $.Collections_map(receiver, [], f);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 get$last: function(receiver) {
  var t1, t2;
  t1 = receiver.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  return receiver[t2];
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.intTypeCheck(start);
  $.intTypeCheck(length$);
  $.checkGrowable(receiver, "removeRange");
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.CONSTANT.set$length(receiver, t2);
},
 indexOf$2: function(receiver, element, start) {
  $.intTypeCheck(start);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($receiver, element) {
  return this.indexOf$2($receiver, element, 0);
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; $.boolConversionCheck(i < receiver.length); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= receiver.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(other, receiver[i])))
      return true;
  }
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  $.intTypeCheck(newLength);
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 operator$index$1: function(receiver, index) {
  $.intTypeCheck(index);
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index >= receiver.length || index < 0)
    throw $.$$throw($.RangeError$value(index));
  return receiver[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.JSNumber = {"":"Object;",
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 truncate$0: function(receiver) {
  return $.numTypeCheck(receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver));
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {"":"JSNumber;"
};

$$.JSDouble = {"":"JSNumber;"
};

$$.JSString = {"":"Object;",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.stringTypeCheck(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 concat$1: function(receiver, other) {
  return receiver + other;
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringTypeCheck($.stringReplaceAllUnchecked(receiver, from, to));
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = other.length;
  if (otherLength > receiver.length)
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.intTypeCheck(startIndex);
  $.intTypeCheck(endIndex);
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.boolConversionCheck($.lt(startIndex, 0)))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.boolConversionCheck($.gt(startIndex, endIndex)))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.boolConversionCheck($.gt(endIndex, receiver.length)))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver, startIndex) {
  return this.substring$2($receiver, startIndex, null);
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase();
},
 toUpperCase$0: function(receiver) {
  return receiver.toUpperCase();
},
 indexOf$2: function(receiver, other, start) {
  $.stringTypeCheck(other);
  $.intTypeCheck(start);
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($receiver, other) {
  return this.indexOf$2($receiver, other, 0);
},
 contains$2: function(receiver, other, startIndex) {
  $.stringTypeCheck(other);
  $.intTypeCheck(startIndex);
  $.checkNull(other);
  return $.boolTypeCheck($.stringContainsUnchecked(receiver, other, startIndex));
},
 contains$1: function($receiver, other) {
  return this.contains$2($receiver, other, 0);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var hash, i, hash0, hash1;
  for (hash = 0, i = 0; $.boolConversionCheck($.lt(i, receiver.length)); i = $.intTypeCheck($.add(i, 1)), hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 operator$index$1: function(receiver, index) {
  $.intTypeCheck(index);
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index >= receiver.length || index < 0)
    throw $.$$throw($.RangeError$value(index));
  return receiver[index];
},
 is$String: true,
 is$Pattern: true
};

$$._Manager = {"":"Object;nextIsolateId>,currentManagerId>,nextManagerId,currentContext>,rootContext>,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
 set$nextIsolateId: function(v) { this.nextIsolateId = $.intTypeCheck(v);},
 set$currentContext: function(v) { this.currentContext = $.propertyTypeCheck(v, 'is$_IsolateContext');},
 set$rootContext: function(v) { this.rootContext = $.propertyTypeCheck(v, 'is$_IsolateContext');},
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return $.boolTypeCheck(this.get$useWorkers());
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.boolConversionCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1)))
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.callTypeCheck($.Map_Map($.$int, $._IsolateContext), 'is$Map');
  this.managers = $.callTypeCheck($.Map_Map($.$int, $._ManagerStub), 'is$Map');
  if ($.boolConversionCheck(this.isWorker)) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
},
 is$_Manager: true
};

$$._IsolateContext = {"":"Object;id>,ports>,isolateStatics",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  $.functionTypeCheck(code);
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  var t1 = this.ports;
  return $.propertyTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId), 'is$ReceivePort');
},
 register$2: function(portId, port) {
  if ($.boolConversionCheck(this.ports.containsKey$1(portId)))
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.boolConversionCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1)))
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = $.intTypeCheck(t2);
  this.ports = $.callTypeCheck($.Map_Map($.$int, $.ReceivePort), 'is$Map');
  this.initGlobals$0();
},
 is$_IsolateContext: true
};

$$._EventLoop = {"":"Object;events",
 enqueue$3: function(isolate, fn, msg) {
  this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.boolConversionCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1)))
    return;
  return $.propertyTypeCheck(t1.removeFirst$0(), 'is$_IsolateEvent');
},
 runIteration$0: function() {
  var event$, t1;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($.boolConversionCheck($._globalState().get$isWorker()))
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null)) {
        if ($.boolConversionCheck($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()))) {
          if ($.boolConversionCheck($._globalState().get$fromCommandLine())) {
            t1 = $._globalState().get$rootContext().get$ports();
            t1 = $.boolConversionCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1));
          } else
            t1 = false;
          $.boolConversionCheck(t1);
        } else
          t1 = false;
        $.boolConversionCheck(t1);
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!(typeof window === "undefined"))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; $.boolConversionCheck(this.runIteration$0());)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if (!$.boolConversionCheck($._globalState().get$isWorker()))
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

},
 is$_EventLoop: true
};

$$._IsolateEvent = {"":"Object;isolate,fn,message",
 process$0: function() {
  this.isolate.eval$1(this.fn);
},
 is$_IsolateEvent: true
};

$$._MainManagerStub = {"":"Object;",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
},
 is$_ManagerStub: function() { return true; }
};

$$._BaseSendPort = {"":"Object;_liblib4$_isolateId>",
 _checkReplyTo$1: function(replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  if ($.boolConversionCheck(!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort)))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $.ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return $.propertyTypeCheck(completer.get$future(), 'is$Future');
},
 is$Function: true,
 is$SendPort: true
};

$$._NativeJsSendPort = {"":"_BaseSendPort;_liblib4$_receivePort>,_liblib4$_isolateId",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.boolConversionCheck($.eq(this._liblib4$_receivePort, other._liblib4$_receivePort));
},
 get$hashCode: function() {
  return $.intTypeCheck(this._liblib4$_receivePort.get$_liblib4$_id());
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":"_BaseSendPort;_workerId>,_receivePortId,_liblib4$_isolateId",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  var t1, t2;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort) {
    t1 = this._workerId;
    t2 = other._workerId;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this._liblib4$_isolateId;
      t2 = other._liblib4$_isolateId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._receivePortId;
        t2 = other._receivePortId;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
  } else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.intTypeCheck($.xor($.xor($.shl(this._workerId, 16), $.shl(this._liblib4$_isolateId, 8)), this._receivePortId));
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$.ReceivePortImpl = {"":"Object;_liblib4$_id>,_liblib4$_callback>",
 _liblib4$_callback$1: function(arg0) {
  return this._liblib4$_callback.call$1(arg0);
},
 _liblib4$_callback$1: function(arg0) {
  return this._liblib4$_callback.call$1(arg0);
},
 _liblib4$_callback$2: function(arg0, arg1) {
  return this._liblib4$_callback.call$2(arg0, arg1);
},
 receive$1: function(onMessage) {
  this._liblib4$_callback = $.functionTypeCheck(onMessage);
},
 close$0: function() {
  this._liblib4$_callback = null;
  $._globalState().get$currentContext().unregister$1(this._liblib4$_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._liblib4$_id, this);
},
 is$ReceivePortImpl: true,
 is$ReceivePort: true
};

$$._PendingSendPortFinder = {"":"_MessageTraverser;ports>,_liblib4$_visited",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  var t1 = this._liblib4$_visited;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
    return;
  $.indexSet(this._liblib4$_visited, list, true);
  $.getInterceptor$JSArray(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1 = this._liblib4$_visited;
  if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
    return;
  $.indexSet(this._liblib4$_visited, map, true);
  t1 = map.get$values();
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._liblib4$_port == null)
    $.CONSTANT.add$1(this.ports, port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsSerializer0 = {"":"_Serializer;_liblib4$_nextFreeRefId,_liblib4$_visited",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._liblib4$_isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._liblib4$_isolateId, port._liblib4$_receivePort.get$_liblib4$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib4$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"":"_Copier;_liblib4$_visited",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._liblib4$_receivePort, port._liblib4$_isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._liblib4$_isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib4$_port;
  if (!(t1 == null))
    return $.propertyTypeCheck(this.visitSendPort$1(t1), 'is$SendPort');
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer0 = {"":"_Deserializer;_liblib4$_deserialized",
 deserializeSendPort$1: function(x) {
  var t1, managerId, isolateId, receivePortId, isolate;
  $.listTypeCheck(x);
  t1 = $.getInterceptor$JSStringJSArray(x);
  managerId = $.intTypeCheck(t1.operator$index$1(x, 1));
  isolateId = $.intTypeCheck(t1.operator$index$1(x, 2));
  receivePortId = $.intTypeCheck(t1.operator$index$1(x, 3));
  t1 = $._globalState().get$currentManagerId();
  if (managerId == null ? t1 == null : managerId === t1) {
    t1 = $._globalState().get$isolates();
    isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":"Object;tagged",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor$JSArray(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  $.assertHelper(this.tagged == null);
  var t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  this.tagged = t1;
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = this.tagged;
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
  }
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i, t1;
  i = 0;
  for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = this.tagged;
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
  }
  this.tagged = null;
},
 is$_MessageTraverserVisitedMap0: true
};

$$._MessageTraverserVisitedMap0 = {"":"Object;",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
},
 is$_MessageTraverserVisitedMap0: true
};

$$._MessageTraverser = {"":"Object;",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._liblib4$_visited.reset$0();
  result = null;
  try {
    result = this._liblib4$_dispatch$1(x);
  } finally {
    this._liblib4$_visited.cleanup$0();
  }
  return result;
},
 _liblib4$_dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {"":"_MessageTraverser;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1, copy, len, i, t2;
  t1 = this._liblib4$_visited;
  copy = $.listTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list));
  if (!(copy == null))
    return copy;
  t1 = $.getInterceptor$JSStringJSArray(list);
  len = t1.get$length(list);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this.visitList$1$bailout(1, list, t1, len);
  copy = $.List_List(len);
  $.setRuntimeTypeInfo(copy, []);
  $.indexSet(this._liblib4$_visited, list, copy);
  for (i = 0; i < len; ++i) {
    t2 = this._liblib4$_dispatch$1(t1.operator$index$1(list, i));
    if (i >= len)
      throw $.ioore(i);
    copy[i] = t2;
  }
  return copy;
},
 visitList$1$bailout: function(state0, list, t1, len) {
  var copy, i, t2;
  copy = $.List_List(len);
  $.setRuntimeTypeInfo(copy, []);
  $.indexSet(this._liblib4$_visited, list, copy);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); ++i) {
    t2 = this._liblib4$_dispatch$1(t1.operator$index$1(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t2;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t2 = this._liblib4$_visited;
  t1.copy_0 = $.callTypeCheck($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map), 'is$Map');
  t2 = t1.copy_0;
  if (!(t2 == null))
    return $.callTypeCheck(t2, 'is$Map');
  t1.copy_0 = $.callTypeCheck($.Map_Map(), 'is$Map');
  $.indexSet(this._liblib4$_visited, map, t1.copy_0);
  map.forEach$1(new $._Copier_visitMap_anon(t1, this));
  return $.callTypeCheck(t1.copy_0, 'is$Map');
}
};

$$._Serializer = {"":"_MessageTraverser;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1, copyId, id;
  t1 = this._liblib4$_visited;
  copyId = $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list));
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib4$_nextFreeRefId;
  this._liblib4$_nextFreeRefId = $.intTypeCheck($.add(id, 1));
  $.indexSet(this._liblib4$_visited, list, id);
  return ["list", id, this._liblib4$_serializeList$1(list)];
},
 visitMap$1: function(map) {
  var t1, copyId, id;
  t1 = this._liblib4$_visited;
  copyId = $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map));
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib4$_nextFreeRefId;
  this._liblib4$_nextFreeRefId = $.intTypeCheck($.add(id, 1));
  $.indexSet(this._liblib4$_visited, map, id);
  return ["map", id, this._liblib4$_serializeList$1(map.get$keys()), this._liblib4$_serializeList$1(map.get$values())];
},
 _liblib4$_serializeList$1: function(list) {
  var t1, len, result, i, t2;
  $.listTypeCheck(list);
  t1 = $.getInterceptor$JSStringJSArray(list);
  len = t1.get$length(list);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._liblib4$_serializeList$1$bailout(1, list, t1, len);
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; i < len; ++i) {
    t2 = this._liblib4$_dispatch$1(t1.operator$index$1(list, i));
    if (i >= len)
      throw $.ioore(i);
    result[i] = t2;
  }
  return result;
},
 _liblib4$_serializeList$1$bailout: function(state0, list, t1, len) {
  var result, i, t2;
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); ++i) {
    t2 = this._liblib4$_dispatch$1(t1.operator$index$1(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t2;
  }
  return result;
}
};

$$._Deserializer = {"":"Object;",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._liblib4$_deserialized = $.callTypeCheck($.HashMap_HashMap(), 'is$Map');
  return this._liblib4$_deserializeHelper$1(x);
},
 _liblib4$_deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  $.assertHelper(typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()));
  switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
    case "ref":
      return this._liblib4$_deserializeRef$1(x);
    case "list":
      return this._liblib4$_deserializeList$1(x);
    case "map":
      return this._liblib4$_deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _liblib4$_deserializeRef$1: function(x) {
  var id, result;
  $.listTypeCheck(x);
  id = $.intTypeCheck($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1));
  result = this._liblib4$_deserialized.operator$index$1(id);
  $.assertHelper(!(result == null));
  return result;
},
 _liblib4$_deserializeList$1: function(x) {
  var t1, id, dartList, len, i;
  $.listTypeCheck(x);
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = $.intTypeCheck(t1.operator$index$1(x, 1));
  dartList = t1.operator$index$1(x, 2);
  $.listTypeCheck(dartList);
  this._liblib4$_deserialized.operator$indexSet$2(id, dartList);
  t1 = $.getInterceptor$JSStringJSArray(dartList);
  len = t1.get$length(dartList);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._liblib4$_deserializeList$1$bailout(1, len, dartList, t1);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._liblib4$_deserializeHelper$1(t1.operator$index$1(dartList, i)));
  return dartList;
},
 _liblib4$_deserializeList$1$bailout: function(state0, len, dartList, t1) {
  var i;
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._liblib4$_deserializeHelper$1(t1.operator$index$1(dartList, i)));
  return dartList;
},
 _liblib4$_deserializeMap$1: function(x) {
  var result, t1, id, keys, values, len, t3, i;
  $.listTypeCheck(x);
  result = $.Map_Map();
  $.callTypeCheck(result, 'is$Map');
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = $.intTypeCheck(t1.operator$index$1(x, 1));
  this._liblib4$_deserialized.operator$indexSet$2(id, result);
  keys = t1.operator$index$1(x, 2);
  $.listTypeCheck(keys);
  values = t1.operator$index$1(x, 3);
  $.listTypeCheck(values);
  t1 = $.getInterceptor$JSStringJSArray(keys);
  len = t1.get$length(keys);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._liblib4$_deserializeMap$1$bailout(1, keys, values, result, t1, len);
  t3 = $.getInterceptor$JSStringJSArray(values);
  $.assertHelper(len === t3.get$length(values));
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._liblib4$_deserializeHelper$1(t1.operator$index$1(keys, i)), this._liblib4$_deserializeHelper$1(t3.operator$index$1(values, i)));
  return result;
},
 _liblib4$_deserializeMap$1$bailout: function(state0, keys, values, result, t1, len) {
  var t3, t4, i;
  t3 = $.getInterceptor$JSStringJSArray(values);
  t4 = t3.get$length(values);
  $.assertHelper(len == null ? t4 == null : len === t4);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._liblib4$_deserializeHelper$1(t1.operator$index$1(keys, i)), this._liblib4$_deserializeHelper$1(t3.operator$index$1(values, i)));
  return result;
},
 deserializeObject$1: function(x) {
  $.listTypeCheck(x);
  throw $.$$throw("Unexpected serialized object");
}
};

$$.AbstractWorkerEvents = {"":"Events;_ptr"
};

$$.ApplicationCacheEvents = {"":"Events;_ptr"
};

$$.BatteryManagerEvents = {"":"Events;_ptr"
};

$$.BodyElementEvents = {"":"ElementEvents;_ptr",
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
}
};

$$.DedicatedWorkerContextEvents = {"":"WorkerContextEvents;_ptr"
};

$$.DocumentEvents = {"":"ElementEvents;_ptr"
};

$$._ChildrenElementList = {"":"Object;_element>,_childElements",
 _toList$0: function() {
  var t1, t2, output, len, i;
  t1 = this._childElements;
  t2 = $.getInterceptor$JSStringJSArray(t1);
  output = $.List_List(t2.get$length(t1));
  $.setRuntimeTypeInfo(output, []);
  len = t2.get$length(t1);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._toList$0$bailout(1, output, t1, len);
  i = 0;
  for (; i < len; ++i) {
    t2 = t1.operator$index$1(i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, output, t1, len) {
  var i, t2;
  i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); ++i) {
    t2 = t1.operator$index$1(i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 contains$1: function(element) {
  $.callTypeCheck(element, 'is$Element');
  return $.boolTypeCheck(this._childElements.contains$1(element));
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  for (t1 = this._childElements.iterator$0(); $.boolConversionCheck(t1.get$hasNext());)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  $.functionTypeCheck(f);
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(f, output);
  $.functionTypeCheck(t1);
  for (t2 = this._childElements.iterator$0(); $.boolConversionCheck(t2.get$hasNext());)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out, t1;
  $.functionTypeCheck(f);
  out = [];
  for (t1 = this.iterator$0(); $.boolConversionCheck(t1.get$hasNext());)
    $.CONSTANT.add$1(out, f.call$1(t1.next$0()));
  return out;
},
 get$isEmpty: function() {
  return this._element.firstElementChild == null;
},
 get$length: function() {
  var t1 = this._childElements;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return $.callTypeCheck(this._childElements.operator$index$1(index), 'is$Element');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Element');
  this._element.$$dom_replaceChild$2(value, this._childElements.operator$index$1(index));
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength);
  throw $.$$throw($.UnsupportedError$(""));
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  this._element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  this._element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  var t1 = this._toList$0();
  return $.propertyTypeCheck($.getInterceptor$JSArray(t1).iterator$0(t1), 'is$Iterator');
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._element; $.boolConversionCheck(t1.get$hasNext());)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Element'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 clear$0: function() {
  this._element.textContent = "";
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    this._element.$$dom_removeChild$1(result);
  return $.callTypeCheck(result, 'is$Element');
},
 get$last: function() {
  return $.callTypeCheck(this._element.lastElementChild, 'is$Element');
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementList = {"":"Object;_nodeList",
 contains$1: function(element) {
  var t1;
  $.callTypeCheck(element, 'is$Element');
  for (t1 = this.iterator$0(); $.boolConversionCheck(t1.get$hasNext());)
    if ($.boolConversionCheck($.eq(t1.next$0(), element)))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  for (t1 = this.iterator$0(); $.boolConversionCheck(t1.get$hasNext());)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out, t1;
  $.functionTypeCheck(f);
  out = [];
  for (t1 = this.iterator$0(); $.boolConversionCheck(t1.get$hasNext());)
    $.CONSTANT.add$1(out, f.call$1(t1.next$0()));
  return out;
},
 filter$1: function(f) {
  var out, t1, t2;
  $.functionTypeCheck(f);
  out = [];
  for (t1 = this.iterator$0(); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2)))
      $.CONSTANT.add$1(out, t2);
  }
  return out;
},
 get$isEmpty: function() {
  var t1 = this._nodeList;
  return $.boolTypeCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1));
},
 get$length: function() {
  var t1 = this._nodeList;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 operator$index$1: function(index) {
  var t1;
  $.intTypeCheck(index);
  t1 = this._nodeList;
  return $.callTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index), 'is$Element');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.UnsupportedError$(""));
},
 set$length: function(newLength) {
  var t1;
  $.intTypeCheck(newLength);
  t1 = this._nodeList;
  $.getInterceptor$JSArray(t1).set$length(t1, newLength);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.UnsupportedError$(""));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.UnsupportedError$(""));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$(""));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1;
  $.callTypeCheck(element, 'is$Element');
  $.intTypeCheck(start);
  t1 = this._nodeList;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 get$last: function() {
  var t1 = this._nodeList;
  return $.callTypeCheck($.getInterceptor$JSArray(t1).get$last(t1), 'is$Element');
},
 is$_FrozenElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementListIterator = {"":"Object;_list,_index",
 next$0: function() {
  var t1, t2;
  t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout1(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._list;
  t2 = this._index;
  if (t2 !== (t2 | 0))
    return this.next$0$bailout1(2, t2, t1);
  this._index = t2 + 1;
  return $.callTypeCheck(t1.operator$index$1(t2), 'is$Element');
},
 next$0$bailout1: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.get$hasNext();
      $.boolConversionCheck(t1);
    case 1:
      state0 = 0;
      if (!t1)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._list;
      t2 = this._index;
    case 2:
      var t1, t2;
      state0 = 0;
      this._index = $.intTypeCheck($.add(t2, 1));
      return $.callTypeCheck(t1.operator$index$1(t2), 'is$Element');
  }
},
 get$hasNext: function() {
  var t1, t2;
  t1 = this._index;
  t2 = this._list;
  return $.boolTypeCheck($.lt(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2)));
},
 is$Iterator: true
};

$$.ElementEvents = {"":"Events;_ptr",
 get$click: function() {
  return $.propertyTypeCheck(this.operator$index$1("click"), 'is$EventListenerList');
},
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
},
 get$reset: function() {
  return $.propertyTypeCheck(this.operator$index$1("reset"), 'is$EventListenerList');
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.EventSourceEvents = {"":"Events;_ptr"
};

$$.Events = {"":"Object;_ptr",
 operator$index$1: function(type) {
  $.stringTypeCheck(type);
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"":"Object;_ptr,_type",
 add$2: function(listener, useCapture) {
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener, false);
},
 remove$2: function(listener, useCapture) {
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener, false);
},
 is$EventListenerList: true
};

$$.FileReaderEvents = {"":"Events;_ptr",
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
}
};

$$.FileWriterEvents = {"":"Events;_ptr"
};

$$.FrameSetElementEvents = {"":"ElementEvents;_ptr",
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
}
};

$$.HttpRequestEvents = {"":"Events;_ptr",
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
}
};

$$.HttpRequestUploadEvents = {"":"Events;_ptr",
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
}
};

$$.InputElementEvents = {"":"ElementEvents;_ptr"
};

$$.MediaElementEvents = {"":"ElementEvents;_ptr"
};

$$.MediaStreamEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackListEvents = {"":"Events;_ptr"
};

$$.MessagePortEvents = {"":"Events;_ptr"
};

$$._ChildNodeListLazy = {"":"Object;_this",
 get$last: function() {
  return $.callTypeCheck(this._this.lastChild, 'is$Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._this; $.boolConversionCheck(t1.get$hasNext());)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return $.callTypeCheck(result, 'is$Node');
},
 clear$0: function() {
  this._this.textContent = "";
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Node');
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  var t1 = this._this.childNodes;
  return $.propertyTypeCheck($.getInterceptor$JSArray(t1).iterator$0(t1), 'is$Iterator');
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Node'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 get$length: function() {
  var t1 = this._this.childNodes;
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
},
 operator$index$1: function(index) {
  var t1;
  $.intTypeCheck(index);
  t1 = this._this.childNodes;
  return $.callTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index), 'is$Node');
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.NotificationEvents = {"":"Events;_ptr",
 get$click: function() {
  return $.propertyTypeCheck(this.operator$index$1("click"), 'is$EventListenerList');
},
 get$close: function() {
  return $.propertyTypeCheck(this.operator$index$1("close"), 'is$EventListenerList');
},
 close$0: function() {
  return this.get$close().call$0();
}
};

$$.RtcDataChannelEvents = {"":"Events;_ptr",
 get$close: function() {
  return $.propertyTypeCheck(this.operator$index$1("close"), 'is$EventListenerList');
},
 close$0: function() {
  return this.get$close().call$0();
}
};

$$.RtcPeerConnectionEvents = {"":"Events;_ptr"
};

$$.SharedWorkerContextEvents = {"":"WorkerContextEvents;_ptr"
};

$$.SpeechRecognitionEvents = {"":"Events;_ptr"
};

$$.TextTrackEvents = {"":"Events;_ptr"
};

$$.TextTrackCueEvents = {"":"Events;_ptr"
};

$$.TextTrackListEvents = {"":"Events;_ptr"
};

$$.WebSocketEvents = {"":"Events;_ptr",
 get$close: function() {
  return $.propertyTypeCheck(this.operator$index$1("close"), 'is$EventListenerList');
},
 close$0: function() {
  return this.get$close().call$0();
}
};

$$.WindowEvents = {"":"Events;_ptr",
 get$click: function() {
  return $.propertyTypeCheck(this.operator$index$1("click"), 'is$EventListenerList');
},
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
},
 get$reset: function() {
  return $.propertyTypeCheck(this.operator$index$1("reset"), 'is$EventListenerList');
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.WorkerEvents = {"":"AbstractWorkerEvents;_ptr"
};

$$.WorkerContextEvents = {"":"Events;_ptr"
};

$$._AttributeMap = {"":"Object;_element>",
 clear$0: function() {
  for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); $.boolConversionCheck(t1.get$hasNext());)
    this.remove$1(t1.next$0());
},
 forEach$1: function(f) {
  var t1, t2;
  $.functionTypeCheck(f);
  for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    f.call$2(t2, this.operator$index$1(t2));
  }
},
 get$keys: function() {
  var attributes, keys, t1, len, i;
  attributes = this._element.attributes;
  keys = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(keys, [$.String]);
  t1 = $.getInterceptor$JSStringJSArray(attributes);
  len = t1.get$length(attributes);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this.get$keys$bailout(1, keys, attributes, t1, len);
  i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    if ($.boolConversionCheck(this._matches$1(t1.operator$index$1(attributes, i))))
      $.CONSTANT.add$1(keys, t1.operator$index$1(attributes, i).get$$$dom_localName());
  return keys;
},
 get$keys$bailout: function(state0, keys, attributes, t1, len) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    if ($.boolConversionCheck(this._matches$1(t1.operator$index$1(attributes, i))))
      $.CONSTANT.add$1(keys, t1.operator$index$1(attributes, i).get$$$dom_localName());
  return keys;
},
 get$values: function() {
  var attributes, values, t1, len, i;
  attributes = this._element.attributes;
  values = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(values, [$.String]);
  t1 = $.getInterceptor$JSStringJSArray(attributes);
  len = t1.get$length(attributes);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this.get$values$bailout(1, values, attributes, t1, len);
  i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    if ($.boolConversionCheck(this._matches$1(t1.operator$index$1(attributes, i))))
      $.CONSTANT.add$1(values, t1.operator$index$1(attributes, i).get$value());
  return values;
},
 get$values$bailout: function(state0, values, attributes, t1, len) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    if ($.boolConversionCheck(this._matches$1(t1.operator$index$1(attributes, i))))
      $.CONSTANT.add$1(values, t1.operator$index$1(attributes, i).get$value());
  return values;
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq(this.get$length(), 0));
},
 is$Map: function() { return true; }
};

$$._ElementAttributeMap = {"":"_AttributeMap;_element",
 containsKey$1: function(key) {
  $.stringTypeCheck(key);
  return $.boolTypeCheck(this._element.$$dom_hasAttribute$1(key));
},
 operator$index$1: function(key) {
  $.stringTypeCheck(key);
  return $.stringTypeCheck(this._element.$$dom_getAttribute$1(key));
},
 operator$indexSet$2: function(key, value) {
  $.stringTypeCheck(key);
  this._element.$$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1, value;
  $.stringTypeCheck(key);
  t1 = this._element;
  value = $.stringTypeCheck(t1.$$dom_getAttribute$1(key));
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 get$length: function() {
  var t1 = this.get$keys();
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 _matches$1: function(node) {
  return $.callTypeCheck(node, 'is$Node').get$$$dom_namespaceUri() == null;
}
};

$$._JsSerializer = {"":"_Serializer0;_nextFreeRefId,_visited",
 visitSendPortSync$1: function(x) {
  if (!!x.is$_JsSendPortSync)
    return ["sendport", "nativejs", x._id];
  if (!!x.is$_LocalSendPortSync)
    return this.visitLocalSendPortSync$1(x);
  if (!!x.is$_RemoteSendPortSync)
    return ["sendport", "dart", x._isolateId, x._portId];
  throw $.$$throw("Unknown port type " + $.S(x));
},
 visitLocalSendPortSync$1: function(x) {
  return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
},
 visitSendPort$1: function(x) {
  throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
}
};

$$._JsDeserializer = {"":"_Deserializer0;_deserialized",
 deserializeSendPort$1: function(x) {
  var t1, tag;
  $.listTypeCheck(x);
  t1 = $.getInterceptor$JSStringJSArray(x);
  tag = $.stringTypeCheck(t1.operator$index$1(x, 1));
  switch (tag) {
    case "nativejs":
      return $._JsSendPortSync$($.numTypeCheck(t1.operator$index$1(x, 2)));
    case "dart":
      return $.ReceivePortSync__lookup($.numTypeCheck(t1.operator$index$1(x, 2)), $.numTypeCheck(t1.operator$index$1(x, 3)));
    default:
      throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
  }
}
};

$$._JsSendPortSync = {"":"Object;_id>",
 callSync$1: function(message) {
  var serialized, t1, result;
  serialized = $._JsSerializer$().traverse$1(message);
  t1 = this._id;
  $.intTypeCheck(t1);
  result = ReceivePortSync.dispatchCall(t1, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_JsSendPortSync: true,
 is$SendPortSync: true
};

$$._RemoteSendPortSync = {"":"Object;_isolateId>,_portId>",
 callSync$1: function(message) {
  var serialized, result;
  serialized = $._JsSerializer$().traverse$1(message);
  result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_RemoteSendPortSync: true,
 is$SendPortSync: true
};

$$._LocalSendPortSync = {"":"Object;_receivePort>",
 callSync$1: function(message) {
  var t1, copy, result;
  t1 = $._JsSerializer$().traverse$1(message);
  copy = $._JsDeserializer$().deserialize$1(t1);
  result = this._receivePort._callback$1(copy);
  t1 = $._JsSerializer$().traverse$1(result);
  return $._JsDeserializer$().deserialize$1(t1);
},
 is$_LocalSendPortSync: true,
 is$SendPortSync: true
};

$$.ReceivePortSync = {"":"Object;_portId>,_callback>,_listener",
 _callback$1: function(arg0) {
  return this._callback.call$1(arg0);
},
 _callback$1: function(arg0) {
  return this._callback.call$1(arg0);
},
 _callback$2: function(arg0, arg1) {
  return this._callback.call$2(arg0, arg1);
},
 get$_listenerName: function() {
  return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
},
 receive$1: function(callback) {
  var t1;
  this._callback = $.functionTypeCheck(callback);
  if (this._listener == null) {
    this._listener = $.propertyTypeCheck(new $.ReceivePortSync_receive_anon(this), 'is$EventListener');
    t1 = $.window().get$on();
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this.get$_listenerName());
    $.getInterceptor$JSArray(t1).add$1(t1, this._listener);
  }
},
 close$0: function() {
  $.ReceivePortSync__portMap.remove$1(this._portId);
  if (!(this._listener == null)) {
    var t1 = $.window().get$on();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, this.get$_listenerName()).remove$1(this._listener);
  }
},
 toSendPort$0: function() {
  return $._LocalSendPortSync$_internal(this);
},
 ReceivePortSync$0: function() {
  if ($.ReceivePortSync__portIdCount == null) {
    $.ReceivePortSync__portIdCount = 0;
    $.ReceivePortSync__portMap = $.callTypeCheck($.Map_Map($.$int, $.ReceivePortSync), 'is$Map');
  }
  var t1 = $.ReceivePortSync__portIdCount;
  $.ReceivePortSync__portIdCount = $.intTypeCheck($.add(t1, 1));
  this._portId = $.numTypeCheck(t1);
  $.indexSet($.ReceivePortSync__portMap, this._portId, this);
},
 is$ReceivePortSync: true
};

$$._MessageTraverserVisitedMap = {"":"Object;",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
},
 is$_MessageTraverserVisitedMap: true
};

$$._MessageTraverser0 = {"":"Object;",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Serializer0 = {"":"_MessageTraverser0;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.intTypeCheck(this._visited.operator$index$1(list));
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1));
  this._visited.operator$indexSet$2(list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.intTypeCheck(this._visited.operator$index$1(map));
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1));
  this._visited.operator$indexSet$2(map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var t1, len, result, i, t2;
  $.listTypeCheck(list);
  t1 = $.getInterceptor$JSStringJSArray(list);
  len = t1.get$length(list);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._serializeList$1$bailout(1, list, t1, len);
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; i < len; ++i) {
    t2 = this._dispatch$1(t1.operator$index$1(list, i));
    if (i >= len)
      throw $.ioore(i);
    result[i] = t2;
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list, t1, len) {
  var result, i, t2;
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); ++i) {
    t2 = this._dispatch$1(t1.operator$index$1(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t2;
  }
  return result;
}
};

$$._Deserializer0 = {"":"Object;",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.callTypeCheck($.HashMap_HashMap(), 'is$Map');
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  $.assertHelper(typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()));
  switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id, result;
  $.listTypeCheck(x);
  id = $.intTypeCheck($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1));
  result = this._deserialized.operator$index$1(id);
  $.assertHelper(!(result == null));
  return result;
},
 _deserializeList$1: function(x) {
  var t1, id, dartList, len, i;
  $.listTypeCheck(x);
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = $.intTypeCheck(t1.operator$index$1(x, 1));
  dartList = t1.operator$index$1(x, 2);
  $.listTypeCheck(dartList);
  this._deserialized.operator$indexSet$2(id, dartList);
  t1 = $.getInterceptor$JSStringJSArray(dartList);
  len = t1.get$length(dartList);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._deserializeList$1$bailout(1, len, dartList, t1);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._deserializeHelper$1(t1.operator$index$1(dartList, i)));
  return dartList;
},
 _deserializeList$1$bailout: function(state0, len, dartList, t1) {
  var i;
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._deserializeHelper$1(t1.operator$index$1(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, t1, id, keys, values, len, t3, i;
  $.listTypeCheck(x);
  result = $.Map_Map();
  $.callTypeCheck(result, 'is$Map');
  t1 = $.getInterceptor$JSStringJSArray(x);
  id = $.intTypeCheck(t1.operator$index$1(x, 1));
  this._deserialized.operator$indexSet$2(id, result);
  keys = t1.operator$index$1(x, 2);
  $.listTypeCheck(keys);
  values = t1.operator$index$1(x, 3);
  $.listTypeCheck(values);
  t1 = $.getInterceptor$JSStringJSArray(keys);
  len = t1.get$length(keys);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._deserializeMap$1$bailout(1, keys, values, result, t1, len);
  t3 = $.getInterceptor$JSStringJSArray(values);
  $.assertHelper(len === t3.get$length(values));
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._deserializeHelper$1(t1.operator$index$1(keys, i)), this._deserializeHelper$1(t3.operator$index$1(values, i)));
  return result;
},
 _deserializeMap$1$bailout: function(state0, keys, values, result, t1, len) {
  var t3, t4, i;
  t3 = $.getInterceptor$JSStringJSArray(values);
  t4 = t3.get$length(values);
  $.assertHelper(len == null ? t4 == null : len === t4);
  for (i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._deserializeHelper$1(t1.operator$index$1(keys, i)), this._deserializeHelper$1(t3.operator$index$1(values, i)));
  return result;
},
 deserializeObject$1: function(x) {
  $.listTypeCheck(x);
  throw $.$$throw("Unexpected serialized object");
}
};

$$._DOMWindowCrossFrame = {"":"Object;_window",
 get$parent: function() {
  return $.callTypeCheck($._DOMWindowCrossFrame__createSafe(this._window.parent), 'is$WindowBase');
},
 close$0: function() {
  return $.voidTypeCheck(this._window.close());
},
 is$WindowBase: function() { return true; }
};

$$.FixedSizeListIterator = {"":"_VariableSizeListIterator;_liblib$_length,_array,_pos",
 get$hasNext: function() {
  return $.boolTypeCheck($.gt(this._liblib$_length, this._pos));
}
};

$$._VariableSizeListIterator = {"":"Object;",
 get$hasNext: function() {
  var t1 = this._array;
  return $.boolTypeCheck($.gt($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._pos));
},
 next$0: function() {
  var t1, t2, t3;
  t1 = this.get$hasNext();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  t2 = $.getInterceptor$JSStringJSArray(t1);
  t3 = this._pos;
  if (t3 !== (t3 | 0))
    return this.next$0$bailout(2, t3, t2, t1);
  this._pos = t3 + 1;
  return t2.operator$index$1(t1, t3);
},
 next$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env2;
      t2 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.get$hasNext();
      $.boolConversionCheck(t1);
    case 1:
      state0 = 0;
      if (!t1)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._array;
      t2 = $.getInterceptor$JSStringJSArray(t1);
      t3 = this._pos;
    case 2:
      var t1, t2, t3;
      state0 = 0;
      this._pos = $.intTypeCheck($.add(t3, 1));
      return t2.operator$index$1(t1, t3);
  }
},
 is$Iterator: true
};

$$.FilteredElementList = {"":"Object;_node,_childNodes",
 get$_filtered: function() {
  var t1, t2;
  t1 = this._childNodes;
  t2 = $.List_List$from($.getInterceptor$JSArray(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
  $.setRuntimeTypeInfo(t2, []);
  return t2;
},
 forEach$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this.get$_filtered();
  $.getInterceptor$JSArray(t1).forEach$1(t1, f);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Element');
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len;
  $.intTypeCheck(newLength);
  len = $.getInterceptor$JSStringJSArray(this).get$length(this);
  if ($.boolConversionCheck($.ge(newLength, len)))
    return;
  else if ($.boolConversionCheck($.lt(newLength, 0)))
    throw $.$$throw($.ArgumentError$("Invalid list length"));
  this.removeRange$2(newLength, $.sub(len, newLength));
},
 add$1: function(value) {
  var t1;
  $.callTypeCheck(value, 'is$Element');
  t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 get$add: function() {
  return new $.BoundClosure2(this, 'add$1');
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1;
  $.callTypeCheck(value, 'is$Element');
  t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 contains$1: function(element) {
  var t1;
  $.callTypeCheck(element, 'is$Element');
  if (typeof element === 'object' && element !== null && element.is$Element()) {
    t1 = this._childNodes;
    t1 = $.boolConversionCheck($.getInterceptor$JSStringJSArray(t1).contains$1(t1, element));
  } else
    t1 = false;
  return t1;
},
 removeRange$2: function(start, rangeLength) {
  var t1;
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  t1 = this.get$_filtered();
  t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    result.remove$0();
  return $.callTypeCheck(result, 'is$Element');
},
 map$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this.get$_filtered();
  return $.listSuperNativeTypeCheck($.getInterceptor$JSArray(t1).map$1(t1, f), 'is$Collection');
},
 filter$1: function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = this.get$_filtered();
  return $.listSuperNativeTypeCheck($.getInterceptor$JSArray(t1).filter$1(t1, f), 'is$Collection');
},
 get$isEmpty: function() {
  var t1 = this.get$_filtered();
  return $.boolTypeCheck($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1));
},
 get$length: function() {
  var t1 = this.get$_filtered();
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).get$length(t1));
},
 operator$index$1: function(index) {
  var t1;
  $.intTypeCheck(index);
  t1 = this.get$_filtered();
  return $.callTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index), 'is$Element');
},
 iterator$0: function() {
  var t1 = this.get$_filtered();
  return $.propertyTypeCheck($.getInterceptor$JSArray(t1).iterator$0(t1), 'is$Iterator');
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.listTypeCheck($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1;
  $.callTypeCheck(element, 'is$Element');
  $.intTypeCheck(start);
  t1 = this.get$_filtered();
  return $.intTypeCheck($.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  var t1 = this.get$_filtered();
  return $.callTypeCheck($.getInterceptor$JSArray(t1).get$last(t1), 'is$Element');
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.DatabaseEvents = {"":"Events;_ptr"
};

$$.OpenDBRequestEvents = {"":"RequestEvents;_ptr"
};

$$.RequestEvents = {"":"Events;_ptr"
};

$$.TransactionEvents = {"":"Events;_ptr",
 get$complete: function() {
  return $.propertyTypeCheck(this.operator$index$1("complete"), 'is$EventListenerList');
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.VersionChangeRequestEvents = {"":"RequestEvents;_ptr"
};

$$.JsonUnsupportedObjectError = {"":"Object;unsupportedObject,cause",
 toString$0: function() {
  if (!(this.cause == null))
    return "Calling toJson method on object failed.";
  else
    return "Object toJson method returns non-serializable value.";
}
};

$$._JsonParser = {"":"Object;json,length>,position",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1("Junk at the end of JSON input");
  return result;
},
 parseValue$0: function() {
  var token = $.intTypeCheck(this.token$0());
  if (token == null)
    this.error$1("Nothing to parse");
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2("null", null);
    case 102:
      return this.expectKeyword$2("false", false);
    case 116:
      return this.expectKeyword$2("true", true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1("Unexpected token");
  }
},
 expectKeyword$2: function(word, value) {
  var i;
  for (i = 0; $.boolConversionCheck($.lt(i, word.length)); i = $.intTypeCheck($.add(i, 1))) {
    if (!$.eqB(this.char$0(), $.CONSTANT1.charCodeAt$1(word, i)))
      this.error$1("Expected keyword '" + word + "'");
    this.position = $.intTypeCheck($.add(this.position, 1));
  }
  return value;
},
 parseObject$0: function() {
  var object, key;
  object = $.makeLiteralMap([]);
  this.position = $.intTypeCheck($.add(this.position, 1));
  if (!$.boolTypeCheck($.eq(this.token$0(), 125))) {
    for (; true;) {
      key = $.stringTypeCheck(this.parseString$0());
      if (!$.boolTypeCheck($.eq(this.token$0(), 58)))
        this.error$1("Expected ':' when parsing object");
      this.position = $.intTypeCheck($.add(this.position, 1));
      $.indexSet(object, key, this.parseValue$0());
      if (!$.boolTypeCheck($.eq(this.token$0(), 44)))
        break;
      this.position = $.intTypeCheck($.add(this.position, 1));
    }
    if (!$.boolTypeCheck($.eq(this.token$0(), 125)))
      this.error$1("Expected '}' at end of object");
  }
  this.position = $.intTypeCheck($.add(this.position, 1));
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.intTypeCheck($.add(this.position, 1));
  if (!$.boolTypeCheck($.eq(this.token$0(), 93))) {
    for (; true;) {
      $.CONSTANT.add$1(list, this.parseValue$0());
      if (!$.boolTypeCheck($.eq(this.token$0(), 44)))
        break;
      this.position = $.intTypeCheck($.add(this.position, 1));
    }
    if (!$.boolTypeCheck($.eq(this.token$0(), 93)))
      this.error$1("Expected ']' at end of list");
  }
  this.position = $.intTypeCheck($.add(this.position, 1));
  return list;
},
 parseString$0: function(exception) {
  var charCodes, t1, t2, t3, c, t4, codeString;
  if (!$.boolTypeCheck($.eq(this.token$0(), 34)))
    this.error$1("Expected string literal");
  this.position = $.intTypeCheck($.add(this.position, 1));
  charCodes = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (t1 = this.length, t2 = this.json, t3 = $.getInterceptor$JSString(t2); true;) {
    c = $.intTypeCheck(this.char$0());
    if ($.boolConversionCheck($.eq(c, 34))) {
      this.position = $.intTypeCheck($.add(this.position, 1));
      break;
    }
    if ($.boolConversionCheck($.eq(c, 92))) {
      this.position = $.intTypeCheck($.add(this.position, 1));
      t4 = this.position;
      if (t4 == null ? t1 == null : t4 === t1)
        this.error$1("\\ at the end of input");
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.boolConversionCheck($.gt($.add(this.position, 5), t1)))
            this.error$1("Invalid unicode esacape sequence");
          codeString = t3.substring$2(t2, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse("0x" + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1("Invalid unicode esacape sequence");
          }

          this.position = $.intTypeCheck($.add(this.position, 4));
          break;
        default:
          this.error$1("Invalid esacape sequence in string literal");
      }
    }
    $.CONSTANT.add$1(charCodes, c);
    this.position = $.intTypeCheck($.add(this.position, 1));
  }
  return $.stringTypeCheck($.String_String$fromCharCodes(charCodes));
},
 parseNumber$0: function() {
  var startPos, char$, isInt, t1, number;
  if (!$.boolTypeCheck($.eq(this.token$0(), 45)))
    this.error$1("Expected number literal");
  startPos = this.position;
  char$ = $.intTypeCheck(this.char$0());
  if (char$ === 45)
    char$ = $.intTypeCheck(this.nextChar$0());
  if (char$ === 48)
    char$ = $.intTypeCheck(this.nextChar$0());
  else if ($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))) {
    char$ = $.intTypeCheck(this.nextChar$0());
    while (true) {
      if (!($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))))
        break;
      char$ = $.intTypeCheck(this.nextChar$0());
    }
  } else
    this.error$1("Expected digit when parsing number");
  if (char$ === 46) {
    char$ = $.intTypeCheck(this.nextChar$0());
    if ($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))) {
      char$ = $.intTypeCheck(this.nextChar$0());
      while (true) {
        if (!($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))))
          break;
        char$ = $.intTypeCheck(this.nextChar$0());
      }
      isInt = false;
    } else {
      this.error$1("Expected digit following comma");
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = $.intTypeCheck(this.nextChar$0());
    if (char$ === 45 || char$ === 43)
      char$ = $.intTypeCheck(this.nextChar$0());
    if ($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))) {
      char$ = $.intTypeCheck(this.nextChar$0());
      while (true) {
        if (!($.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57))))
          break;
        char$ = $.intTypeCheck(this.nextChar$0());
      }
      isInt = false;
    } else
      this.error$1("Expected digit following 'e' or 'E'");
  }
  t1 = this.json;
  number = $.stringTypeCheck($.getInterceptor$JSString(t1).substring$2(t1, startPos, this.position));
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 char$0: function() {
  if ($.boolConversionCheck($.ge(this.position, this.length)))
    this.error$1("Unexpected end of JSON stream");
  var t1 = this.json;
  return $.intTypeCheck($.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position));
},
 nextChar$0: function() {
  var t1 = this.position;
  if (t1 !== (t1 | 0))
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  if ($.boolConversionCheck($.ge(this.position, this.length)))
    return 0;
  t1 = this.json;
  return $.intTypeCheck($.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position));
},
 nextChar$0$bailout: function(state0, t1) {
  this.position = $.intTypeCheck($.add(t1, 1));
  if ($.boolConversionCheck($.ge(this.position, this.length)))
    return 0;
  t1 = this.json;
  return $.intTypeCheck($.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position));
},
 token$0: function() {
  var t1, t2, t3, char$, t4, token;
  for (t1 = this.json, t2 = $.getInterceptor$JSString(t1), t3 = this.length; true;) {
    if ($.boolConversionCheck($.ge(this.position, t3)))
      return;
    char$ = $.intTypeCheck(t2.charCodeAt$1(t1, this.position));
    t4 = $._JsonParser_tokens;
    token = $.intTypeCheck($.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, char$));
    if (token === 32) {
      t4 = this.position;
      if (t4 !== (t4 | 0))
        return this.token$0$bailout(1, t2, t3, t1, t4);
      this.position = t4 + 1;
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 token$0$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t4 = env3;
      t1 = env2;
      t3 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.json;
      t2 = $.getInterceptor$JSString(t1);
      t3 = this.length;
    case 1:
      var t1, t2, t3, char$, t4, token;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
            case 1:
              c$0: {
                switch (state0) {
                  case 0:
                    if ($.boolConversionCheck($.ge(this.position, t3)))
                      return;
                    char$ = $.intTypeCheck(t2.charCodeAt$1(t1, this.position));
                    t4 = $._JsonParser_tokens;
                    token = $.intTypeCheck($.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, char$));
                  case 1:
                    if (state0 === 1 || state0 === 0 && token === 32)
                      switch (state0) {
                        case 0:
                          t4 = this.position;
                        case 1:
                          state0 = 0;
                          this.position = $.intTypeCheck($.add(t4, 1));
                          break c$0;
                      }
                    if (token == null)
                      return 0;
                    return token;
                }
              }
          }
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  var t1;
  $.stringTypeCheck(json);
  if (!($._JsonParser_tokens == null))
    return;
  t1 = $.List_List(126, $.$int);
  $.setRuntimeTypeInfo(t1, [$.$int]);
  $._JsonParser_tokens = t1;
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$._JsonStringifier = {"":"Object;sb>,seen",
 checkCycle$1: function(object) {
  var t1, i, t2;
  for (t1 = this.seen, i = 0; $.boolConversionCheck(i < t1.length); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t2 = t1[i];
    if (t2 == null ? object == null : t2 === object)
      throw $.$$throw("Cyclic structure");
  }
  $.CONSTANT.add$1(t1, object);
},
 stringifyValue$1: function(object, exception) {
  var customJson, t1, e;
  if (!$.boolConversionCheck(this.stringifyJsonValue$1(object))) {
    this.checkCycle$1(object);
    try {
      customJson = object.toJson$0();
      if (!$.boolConversionCheck(this.stringifyJsonValue$1(customJson)))
        throw $.$$throw($.JsonUnsupportedObjectError$(object));
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
    }

  }
},
 stringifyJsonValue$1: function(object) {
  var t1, t2, i;
  t1 = {};
  if (typeof object === 'number') {
    this.sb.add$1($.stringTypeCheck($.CONSTANT4.toString$0(object)));
    return true;
  } else if (object === true) {
    this.sb.add$1("true");
    return true;
  } else if (object === false) {
    this.sb.add$1("false");
    return true;
  } else if (object == null) {
    this.sb.add$1("null");
    return true;
  } else if (typeof object === 'string') {
    t1 = this.sb;
    t1.add$1("\"");
    $._JsonStringifier_escape(t1, object);
    t1.add$1("\"");
    return true;
  } else if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.stringifyJsonValue$1$bailout(1, object);
    this.checkCycle$1(object);
    t2 = this.sb;
    t2.add$1("[");
    if (object.length > 0) {
      this.stringifyValue$1(object[0]);
      for (i = 1; $.boolConversionCheck($.lt(i, object.length)); ++i) {
        t2.add$1(",");
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= object.length)
          throw $.ioore(i);
        this.stringifyValue$1(object[i]);
      }
    }
    t2.add$1("]");
    t1 = this.seen;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
    return true;
  } else if (typeof object === 'object' && object !== null && object.is$Map()) {
    this.checkCycle$1(object);
    t2 = this.sb;
    t2.add$1("{");
    t1.first_0 = true;
    object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
    t2.add$1("}");
    t2 = this.seen;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
    return true;
  } else
    return false;
},
 stringifyJsonValue$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      object = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
    case 1:
      var t1, object, t2, i;
      if (state0 === 0 && typeof object === 'number') {
        this.sb.add$1($.stringTypeCheck($.CONSTANT4.toString$0(object)));
        return true;
      } else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 0 && object === true) {
              this.sb.add$1("true");
              return true;
            } else
              switch (state0) {
                case 0:
                case 1:
                  if (state0 === 0 && object === false) {
                    this.sb.add$1("false");
                    return true;
                  } else
                    switch (state0) {
                      case 0:
                      case 1:
                        if (state0 === 0 && object == null) {
                          this.sb.add$1("null");
                          return true;
                        } else
                          switch (state0) {
                            case 0:
                            case 1:
                              if (state0 === 0 && typeof object === 'string') {
                                t1 = this.sb;
                                t1.add$1("\"");
                                $._JsonStringifier_escape(t1, object);
                                t1.add$1("\"");
                                return true;
                              } else
                                switch (state0) {
                                  case 0:
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
                                      switch (state0) {
                                        case 0:
                                        case 1:
                                          state0 = 0;
                                          this.checkCycle$1(object);
                                          t2 = this.sb;
                                          t2.add$1("[");
                                          t1 = $.getInterceptor$JSStringJSArray(object);
                                          if ($.boolConversionCheck($.gt(t1.get$length(object), 0))) {
                                            this.stringifyValue$1(t1.operator$index$1(object, 0));
                                            for (i = 1; $.boolConversionCheck($.lt(i, t1.get$length(object))); i = $.intTypeCheck($.add(i, 1))) {
                                              t2.add$1(",");
                                              this.stringifyValue$1(t1.operator$index$1(object, i));
                                            }
                                          }
                                          t2.add$1("]");
                                          t1 = this.seen;
                                          if (0 >= t1.length)
                                            throw $.ioore(0);
                                          t1.pop();
                                          return true;
                                      }
                                    else if (typeof object === 'object' && object !== null && object.is$Map()) {
                                      this.checkCycle$1(object);
                                      t2 = this.sb;
                                      t2.add$1("{");
                                      t1.first_0 = true;
                                      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                      t2.add$1("}");
                                      t2 = this.seen;
                                      if (0 >= t2.length)
                                        throw $.ioore(0);
                                      t2.pop();
                                      return true;
                                    } else
                                      return false;
                                }
                          }
                    }
              }
        }
  }
}
};

$$.ElementInstanceEvents = {"":"Events;_ptr",
 get$click: function() {
  return $.propertyTypeCheck(this.operator$index$1("click"), 'is$EventListenerList');
},
 get$load: function() {
  return $.propertyTypeCheck(this.operator$index$1("load"), 'is$EventListenerList');
},
 load$3: function(arg0, arg1, arg2) {
  return this.get$load().call$3(arg0, arg1, arg2);
},
 get$reset: function() {
  return $.propertyTypeCheck(this.operator$index$1("reset"), 'is$EventListenerList');
},
 reset$0: function() {
  return this.get$reset().call$0();
}
};

$$.AudioContextEvents = {"":"Events;_ptr",
 get$complete: function() {
  return $.propertyTypeCheck(this.operator$index$1("complete"), 'is$EventListenerList');
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.WatchEvent = {"":"Object;oldValue,newValue>"
};

$$._Watcher = {"":"Object;debugName,_getter>,_liblib3$_callback>,_lastValue",
 _getter$0: function() {
  return this._getter.call$0();
},
 _liblib3$_callback$1: function(arg0) {
  return this._liblib3$_callback.call$1(arg0);
},
 _liblib3$_callback$1: function(arg0) {
  return this._liblib3$_callback.call$1(arg0);
},
 _liblib3$_callback$2: function(arg0, arg1) {
  return this._liblib3$_callback.call$2(arg0, arg1);
},
 toString$0: function() {
  var t1 = this.debugName;
  return t1 == null ? "<unnamed>" : t1;
},
 compareAndNotify$0: function() {
  var currentValue, oldValue;
  currentValue = this._safeRead$0();
  if ($.boolConversionCheck(this._compare$1(currentValue))) {
    oldValue = this._lastValue;
    this._update$1(currentValue);
    this._liblib3$_callback$1($.WatchEvent$(oldValue, currentValue));
    return true;
  }
  return false;
},
 _compare$1: function(currentValue) {
  return !$.eqB(this._lastValue, currentValue);
},
 _update$1: function(currentValue) {
  this._lastValue = currentValue;
},
 _safeRead$0: function(exception) {
  var t1, e, trace;
  try {
    t1 = this._getter$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    $.print("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
  }

  return this._lastValue;
},
 _Watcher$3: function(_getter, _callback, debugName) {
  this._lastValue = this._getter$0();
},
 is$_Watcher: true
};

$$._ListWatcher = {"":"_Watcher;debugName,_getter,_liblib3$_callback,_lastValue",
 _compare$1: function(currentValue) {
  var t1, t2, i;
  $.listTypeCheck(currentValue);
  t1 = this._lastValue;
  t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  t2 = $.getInterceptor$JSStringJSArray(currentValue);
  if (!$.eqB(t1, t2.get$length(currentValue)))
    return true;
  for (i = 0; t1 = this._lastValue, $.boolConversionCheck($.lt(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1))); i = $.intTypeCheck($.add(i, 1))) {
    t1 = this._lastValue;
    if (!$.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i), t2.operator$index$1(currentValue, i)))
      return true;
  }
  return false;
},
 _update$1: function(currentValue) {
  var t1 = $.List_List$from(currentValue, $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
  this._lastValue = t1;
},
 _ListWatcher$3: function(getter, callback, debugName) {
  $.propertyTypeCheck(callback, 'is$ValueWatcher');
  $.stringTypeCheck(debugName);
  this._update$1(this._safeRead$0());
}
};

$$.SafeHtml = {"":"Object;_html",
 toString$0: function() {
  return this._html;
},
 is$SafeHtml: true
};

$$.Uri = {"":"Object;scheme,userInfo,domain,port,path,query,fragment",
 query$1: function(arg0) {
  return this.query.call$1(arg0);
},
 toString$0: function() {
  var sb, t1, t2;
  sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
  t1 = this.scheme;
  $.Uri__addIfNonEmpty(sb, t1, t1, ":");
  t2 = this.userInfo;
  if (!(t2 === "") || !(this.domain === "") || !(this.port === 0) || t1 === "file") {
    sb.add$1("//");
    $.Uri__addIfNonEmpty(sb, t2, t2, "@");
    t1 = this.domain;
    sb.add$1(t1 == null ? "null" : t1);
    t1 = this.port;
    if (!(t1 === 0)) {
      sb.add$1(":");
      sb.add$1($.getInterceptor(t1).toString$0(t1));
    }
  }
  t1 = this.path;
  sb.add$1(t1 == null ? "null" : t1);
  t1 = this.query;
  $.Uri__addIfNonEmpty(sb, t1, "?", t1);
  t1 = this.fragment;
  $.Uri__addIfNonEmpty(sb, t1, "#", t1);
  return $.stringTypeCheck(sb.toString$0());
}
};

$$.Callback = {"":"Object;_manualDispose,_liblib2$_id>,_liblib2$_callback>",
 _liblib2$_callback$1: function(arg0) {
  return this._liblib2$_callback.call$1(arg0);
},
 _liblib2$_callback$1: function(arg0) {
  return this._liblib2$_callback.call$1(arg0);
},
 _liblib2$_callback$2: function(arg0, arg1) {
  return this._liblib2$_callback.call$2(arg0, arg1);
},
 get$_serialized: function() {
  return ["funcref", this._liblib2$_id, $.get$_proxiedObjectTable().get$sendPort()];
},
 _initialize$1: function(manualDispose) {
  var t1;
  this._manualDispose = manualDispose;
  t1 = $.get$_proxiedObjectTable();
  this._liblib2$_id = $.getInterceptor$JSArray(t1).add$1(t1, this._liblib2$_callback);
  $.get$_proxiedObjectTable().globalize$1(this._liblib2$_id);
},
 Callback$many$1: function(f) {
  this._liblib2$_callback = $.functionTypeCheck(f);
  this._initialize$1(true);
},
 Callback$once$1: function(f) {
  this._liblib2$_callback = new $.anon1(this, $.functionTypeCheck(f));
  this._initialize$1(false);
},
 is$Callback: true
};

$$.Proxy = {"":"Object;_port>,_liblib2$_id>",
 operator$index$1: function(arg) {
  return $.Proxy__forward(this, "[]", "method", [arg]);
},
 operator$indexSet$2: function(key, value) {
  return $.Proxy__forward(this, "[]=", "method", [key, value]);
},
 operator$eq$1: function(other) {
  var t1;
  $.propertyTypeCheck(other, 'is$Proxy');
  if (this === other)
    t1 = true;
  else
    t1 = typeof other === 'object' && other !== null && !!other.is$Proxy && $.boolConversionCheck($._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]));
  return t1;
},
 noSuchMethod$1: function(invocation) {
  var member, args, t1, kind;
  $.propertyTypeCheck(invocation, 'is$InvocationMirror');
  member = $.stringTypeCheck(invocation.get$memberName());
  args = $.listTypeCheck(invocation.get$positionalArguments());
  if (args == null)
    args = [];
  if ($.boolConversionCheck(invocation.get$isGetter())) {
    t1 = $.getInterceptor$JSString(member);
    if ($.boolConversionCheck(t1.startsWith$1(member, "get:")))
      member = $.stringTypeCheck(t1.substring$1(member, 4));
    kind = "get";
  } else if ($.boolConversionCheck(invocation.get$isSetter())) {
    t1 = $.getInterceptor$JSString(member);
    if ($.boolConversionCheck(t1.endsWith$1(member, "=")))
      member = $.stringTypeCheck(t1.substring$2(member, 0, $.sub(t1.get$length(member), 1)));
    t1 = $.getInterceptor$JSString(member);
    if ($.boolConversionCheck(t1.startsWith$1(member, "set:")))
      member = $.stringTypeCheck(t1.substring$1(member, 4));
    kind = "set";
  } else {
    t1 = $.getInterceptor$JSString(member);
    if ($.boolConversionCheck(t1.startsWith$1(member, "get:"))) {
      member = $.stringTypeCheck(t1.substring$1(member, 4));
      kind = "get";
    } else if ($.boolConversionCheck(t1.startsWith$1(member, "set:"))) {
      member = $.stringTypeCheck(t1.substring$1(member, 4));
      kind = "set";
    } else
      kind = "method";
  }
  return $.Proxy__forward(this, member, kind, args);
},
 is$Proxy: true
};

$$._FunctionProxy = {"":"Proxy;_call,_port,_liblib2$_id",
 _FunctionProxy$_internal$2: function(port, id) {
  this._call = $.functionTypeCheck(new $.anon0(port, id));
  $.indexSet($.get$_FunctionProxy__map(), this._call, this);
}
};

$$._ProxiedObjectTable = {"":"Object;_name,_nextId,_deletedCount,_registry>,_port>,_globalIds,_handleStack,_scopeIndices>",
 enterScope$0: function() {
  $.CONSTANT.addLast$1(this._scopeIndices, this._handleStack.length);
},
 exitScope$0: function() {
  var t1, start, t2, t3, i, t4, t5;
  t1 = this._scopeIndices;
  if (0 >= t1.length)
    throw $.ioore(0);
  start = $.intTypeCheck(t1.pop());
  for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; t4 = $.boolConversionCheck($.lt(i, t2.length)), t5 = t2.length, t4; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t5)
      throw $.ioore(i);
    if (!$.boolConversionCheck(t3.contains$1($.stringTypeCheck(t2[i])))) {
      if (i >= t2.length)
        throw $.ioore(i);
      t1.remove$1(t2[i]);
      this._deletedCount = $.intTypeCheck($.add(this._deletedCount, 1));
    }
  }
  if (typeof start !== 'number')
    throw $.iae(start);
  $.CONSTANT.removeRange$2(t2, start, t5 - start);
},
 globalize$1: function(id) {
  return this._globalIds.add$1(id);
},
 invalidate$1: function(id) {
  var t1, old;
  t1 = this._registry;
  old = t1.operator$index$1(id);
  this._globalIds.remove$1(id);
  t1.remove$1(id);
  this._deletedCount = $.intTypeCheck($.add(this._deletedCount, 1));
  return old;
},
 add$1: function(x) {
  var t1, t2, id;
  if (this._scopeIndices.length === 0)
    throw $.$$throw("Must be inside scope to allocate.");
  t1 = this._name + "-";
  t2 = this._nextId;
  this._nextId = $.intTypeCheck($.add(t2, 1));
  id = t1 + $.S(t2);
  this._registry.operator$indexSet$2(id, x);
  $.CONSTANT.addLast$1(this._handleStack, id);
  return id;
},
 get$1: function(id) {
  $.stringTypeCheck(id);
  return this._registry.operator$index$1(id);
},
 get$sendPort: function() {
  return this._port.toSendPort$0();
},
 _ProxiedObjectTable$0: function() {
  this._port.receive$1(new $.anon(this));
}
};

$$.init_autogenerated_anon = {"":"Closure;",
 call$0: function() {
  return $.S($.displayName);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated_anon0 = {"":"Closure;box_1",
 call$1: function(__e) {
  var t1, t2;
  t1 = $.displayName;
  t2 = this.box_1;
  t2.__binding0_4 = $.updateBinding(t1, t2.__binding0_4, __e.get$newValue());
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated_anon1 = {"":"Closure;",
 call$0: function() {
  return !($.tagline == null);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated_anon2 = {"":"Closure;box_1",
 call$1: function(__e) {
  var showNow, t1, t2, t3, t4, t5, _endPosition__e5;
  showNow = $.boolTypeCheck(__e.get$newValue());
  t1 = this.box_1;
  t2 = $.boolConversionCheck(t1._isVisible__e5_7);
  if (t2 && !showNow) {
    t1._isVisible__e5_7 = false;
    t1.__e4_8 = null;
    t1.__e3_9 = null;
    t2 = t1.__stoppers2_1_11;
    t3 = $.getInterceptor$JSArray(t2);
    t3.forEach$1(t2, new $.init_autogenerated__anon8());
    t3.clear$0(t2);
    t1.__binding2_10 = null;
    t1._endPosition__e5_6 = $.removeNodes(t1.__e5_5, t1._endPosition__e5_6);
  } else if ($.boolConversionCheck(!$.boolConversionCheck(t2) && showNow)) {
    t1._isVisible__e5_7 = true;
    t1.__e4_8 = $.callTypeCheck($.Element_Element$html("<p><em id=\"__e-3\"></em></p>"), 'is$ParagraphElement');
    t1.__e3_9 = $.callTypeCheck(t1.__e4_8.query$1("#__e-3"), 'is$Element');
    t1.__binding2_10 = $.Text_Text("");
    t1.__stoppers2_1_11 = [];
    t2 = t1.__e3_9.get$nodes();
    $.getInterceptor$JSArray(t2).add$1(t2, t1.__binding2_10);
    t2 = t1.__e5_5;
    t3 = t2.get$parentNode();
    t2 = t2.get$nextNode();
    t4 = $.Text_Text("\n      ");
    t5 = t1.__e4_8;
    _endPosition__e5 = $.callTypeCheck($.Text_Text("\n    "), 'is$Node');
    t1._endPosition__e5_6 = _endPosition__e5;
    $.insertAllBefore(t3, t2, [t4, t5, _endPosition__e5]);
    t2 = t1.__stoppers2_1_11;
    $.getInterceptor$JSArray(t2).add$1(t2, $.watchAndInvoke(new $.init_autogenerated__anon9(), new $.init_autogenerated__anon10(t1), null));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon8 = {"":"Closure;",
 call$1: function(s) {
  return s.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon9 = {"":"Closure;",
 call$0: function() {
  return $.S($.tagline);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated__anon10 = {"":"Closure;box_1",
 call$1: function(__e) {
  var t1, t2;
  t1 = $.tagline;
  t2 = this.box_1;
  t2.__binding2_10 = $.updateBinding(t1, t2.__binding2_10, __e.get$newValue());
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated_anon3 = {"":"Closure;",
 call$0: function() {
  return !($.pic == null);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated_anon4 = {"":"Closure;box_1",
 call$1: function(__e) {
  var showNow, t1, t2, t3, t4, t5, _endPosition__e6;
  showNow = $.boolTypeCheck(__e.get$newValue());
  t1 = this.box_1;
  t2 = $.boolConversionCheck(t1._isVisible__e6_14);
  if (t2 && !showNow) {
    t1._isVisible__e6_14 = false;
    t2 = t1.__stoppers3_1_16;
    t3 = $.getInterceptor$JSArray(t2);
    t3.forEach$1(t2, new $.init_autogenerated__anon5());
    t3.clear$0(t2);
    t1.__pic_15 = null;
    t1._endPosition__e6_13 = $.removeNodes(t1.__e6_12, t1._endPosition__e6_13);
  } else if ($.boolConversionCheck(!$.boolConversionCheck(t2) && showNow)) {
    t1._isVisible__e6_14 = true;
    t1.__pic_15 = $.callTypeCheck($.Element_Element$html("<img id=\"pic\">"), 'is$ImageElement');
    t1.__stoppers3_1_16 = [];
    t2 = t1.__e6_12;
    t3 = t2.get$parentNode();
    t2 = t2.get$nextNode();
    t4 = $.Text_Text("\n        ");
    t5 = t1.__pic_15;
    _endPosition__e6 = $.callTypeCheck($.Text_Text("\n      "), 'is$Node');
    t1._endPosition__e6_13 = _endPosition__e6;
    $.insertAllBefore(t3, t2, [t4, t5, _endPosition__e6]);
    t2 = t1.__stoppers3_1_16;
    $.getInterceptor$JSArray(t2).add$1(t2, $.watchAndInvoke(new $.init_autogenerated__anon6(), new $.init_autogenerated__anon7(t1), null));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon5 = {"":"Closure;",
 call$1: function(s) {
  return s.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon6 = {"":"Closure;",
 call$0: function() {
  return $.pic;
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated__anon7 = {"":"Closure;box_1",
 call$1: function(__e) {
  var t1 = $.sanitizeUri(__e.get$newValue());
  this.box_1.__pic_15.set$src(t1);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated_anon5 = {"":"Closure;",
 call$0: function() {
  return !($.aboutMe == null);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated_anon6 = {"":"Closure;box_1",
 call$1: function(__e) {
  var showNow, t1, t2, t3, t4, t5, _endPosition__e8;
  showNow = $.boolTypeCheck(__e.get$newValue());
  t1 = this.box_1;
  t2 = $.boolConversionCheck(t1._isVisible__e8_19);
  if (t2 && !showNow) {
    t1._isVisible__e8_19 = false;
    t1.__about_20 = null;
    t2 = t1.__stoppers4_1_22;
    t3 = $.getInterceptor$JSArray(t2);
    t3.forEach$1(t2, new $.init_autogenerated__anon2());
    t3.clear$0(t2);
    t1.__binding7_21 = null;
    t1._endPosition__e8_18 = $.removeNodes(t1.__e8_17, t1._endPosition__e8_18);
  } else if ($.boolConversionCheck(!$.boolConversionCheck(t2) && showNow)) {
    t1._isVisible__e8_19 = true;
    t1.__about_20 = $.callTypeCheck($.Element_Element$html("<div id=\"about\"></div>"), 'is$DivElement');
    t1.__binding7_21 = $.Text_Text("");
    t1.__stoppers4_1_22 = [];
    t2 = t1.__about_20.get$nodes();
    $.getInterceptor$JSArray(t2).add$1(t2, t1.__binding7_21);
    t2 = t1.__e8_17;
    t3 = t2.get$parentNode();
    t2 = t2.get$nextNode();
    t4 = $.Text_Text("\n        ");
    t5 = t1.__about_20;
    _endPosition__e8 = $.callTypeCheck($.Text_Text("\n      "), 'is$Node');
    t1._endPosition__e8_18 = _endPosition__e8;
    $.insertAllBefore(t3, t2, [t4, t5, _endPosition__e8]);
    t2 = t1.__stoppers4_1_22;
    $.getInterceptor$JSArray(t2).add$1(t2, $.watchAndInvoke(new $.init_autogenerated__anon3(), new $.init_autogenerated__anon4(t1), null));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon2 = {"":"Closure;",
 call$1: function(s) {
  return s.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon3 = {"":"Closure;",
 call$0: function() {
  return $.S($.aboutMe);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated__anon4 = {"":"Closure;box_1",
 call$1: function(__e) {
  var t1, t2;
  t1 = $.aboutMe;
  t2 = this.box_1;
  t2.__binding7_21 = $.updateBinding(t1, t2.__binding7_21, __e.get$newValue());
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated_anon7 = {"":"Closure;",
 call$0: function() {
  var t1 = $.get$urls();
  return !$.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated_anon8 = {"":"Closure;box_1,_removeChild__e12_2",
 call$1: function(__e) {
  var showNow, t1, t2, t3, t4, t5, _endPosition__e14;
  showNow = $.boolTypeCheck(__e.get$newValue());
  t1 = this.box_1;
  t2 = $.boolConversionCheck(t1._isVisible__e14_25);
  if (t2 && !showNow) {
    t1._isVisible__e14_25 = false;
    t1.__e13_26 = null;
    t2 = t1.__stoppers5_1_28;
    t3 = $.getInterceptor$JSArray(t2);
    t3.forEach$1(t2, new $.init_autogenerated__anon());
    t3.clear$0(t2);
    t1._endPosition__e12_29 = $.removeNodes(t1.__e12_27, t1._endPosition__e12_29);
    for (t2 = this._removeChild__e12_2, t3 = $.getInterceptor$JSArray(t2), t4 = t3.iterator$0(t2); $.boolConversionCheck(t4.get$hasNext());)
      t4.next$0().call$0();
    t3.clear$0(t2);
    t1.__e12_27 = null;
    t1._endPosition__e14_24 = $.removeNodes(t1.__e14_23, t1._endPosition__e14_24);
  } else if ($.boolConversionCheck(!$.boolConversionCheck(t2) && showNow)) {
    t1._isVisible__e14_25 = true;
    t1.__e13_26 = $.callTypeCheck($.Element_Element$html("<ul>\n        <template id=\"__e-12\" style=\"display:none\"></template>\n      </ul>"), 'is$UListElement');
    t1.__e12_27 = $.callTypeCheck(t1.__e13_26.query$1("#__e-12"), 'is$Element');
    t1.__stoppers5_1_28 = [];
    t2 = t1.__e14_23;
    t3 = t2.get$parentNode();
    t2 = t2.get$nextNode();
    t4 = $.Text_Text("\n      ");
    t5 = t1.__e13_26;
    _endPosition__e14 = $.callTypeCheck($.Text_Text("\n    "), 'is$Node');
    t1._endPosition__e14_24 = _endPosition__e14;
    $.insertAllBefore(t3, t2, [t4, t5, _endPosition__e14]);
    t1._endPosition__e12_29 = $.callTypeCheck(t1.__e12_27, 'is$Node');
    t2 = t1.__stoppers5_1_28;
    $.getInterceptor$JSArray(t2).add$1(t2, $.watchAndInvoke(new $.init_autogenerated__anon0(), new $.init_autogenerated__anon1(t1, this._removeChild__e12_2), null));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon = {"":"Closure;",
 call$1: function(s) {
  return s.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated__anon0 = {"":"Closure;",
 call$0: function() {
  return $.get$urls();
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated__anon1 = {"":"Closure;box_1,_removeChild__e12_3",
 call$1: function(_) {
  var t1, t2, t3, __insert___e12, t4, t5, t6, t7, t8, t9, _endPosition__e12;
  for (t1 = this._removeChild__e12_3, t2 = $.getInterceptor$JSArray(t1), t3 = t2.iterator$0(t1); $.boolConversionCheck(t3.get$hasNext());)
    t3.next$0().call$0();
  t2.clear$0(t1);
  t3 = this.box_1;
  t3._endPosition__e12_29 = $.removeNodes(t3.__e12_27, t3._endPosition__e12_29);
  __insert___e12 = t3.__e12_27.get$nextNode();
  for (t4 = $.get$urls(), t4 = $.getInterceptor$JSArray(t4).iterator$0(t4); $.boolConversionCheck(t4.get$hasNext());) {
    t5 = {};
    t6 = t4.next$0();
    t5.__e11_0 = null;
    t5.__e10_1 = null;
    t5.__stoppers6_2_1_2 = null;
    t5.__binding9_3 = null;
    t5.__e11_0 = $.callTypeCheck($.Element_Element$html("<li><a id=\"__e-10\"></a></li>"), 'is$LIElement');
    t5.__e10_1 = $.callTypeCheck(t5.__e11_0.query$1("#__e-10"), 'is$AnchorElement');
    t5.__binding9_3 = $.Text_Text("");
    t7 = t5.__e10_1.get$nodes();
    $.getInterceptor$JSArray(t7).add$1(t7, t5.__binding9_3);
    t5.__stoppers6_2_1_2 = [];
    t7 = t3.__e12_27.get$parentNode();
    t8 = $.Text_Text("\n          ");
    t9 = t5.__e11_0;
    _endPosition__e12 = $.callTypeCheck($.Text_Text("\n        "), 'is$Node');
    t3._endPosition__e12_29 = _endPosition__e12;
    $.insertAllBefore(t7, __insert___e12, [t8, t9, _endPosition__e12]);
    t7 = t5.__stoppers6_2_1_2;
    $.getInterceptor$JSArray(t7).add$1(t7, $.watchAndInvoke(new $.init_autogenerated___anon(t6), new $.init_autogenerated___anon0(t5), null));
    t7 = t5.__stoppers6_2_1_2;
    $.getInterceptor$JSArray(t7).add$1(t7, $.watchAndInvoke(new $.init_autogenerated___anon1(t6), new $.init_autogenerated___anon2(t5, t6), null));
    t2.add$1(t1, new $.init_autogenerated___anon3(t5));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated___anon = {"":"Closure;url_4",
 call$0: function() {
  return this.url_4;
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated___anon0 = {"":"Closure;box_0",
 call$1: function(__e) {
  var t1 = $.sanitizeUri(__e.get$newValue());
  this.box_0.__e10_1.set$href(t1);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated___anon1 = {"":"Closure;url_5",
 call$0: function() {
  return $.S(this.url_5);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated___anon2 = {"":"Closure;box_0,url_6",
 call$1: function(__e) {
  var t1, t2;
  t1 = this.url_6;
  t2 = this.box_0;
  t2.__binding9_3 = $.updateBinding(t1, t2.__binding9_3, __e.get$newValue());
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.init_autogenerated___anon3 = {"":"Closure;box_0",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.box_0;
  t1.__e11_0 = null;
  t2 = t1.__stoppers6_2_1_2;
  t3 = $.getInterceptor$JSArray(t2);
  t3.forEach$1(t2, new $.init_autogenerated____anon());
  t3.clear$0(t2);
  t1.__e10_1 = null;
  t1.__binding9_3 = null;
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.init_autogenerated____anon = {"":"Closure;",
 call$1: function(s) {
  return s.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.main_anon = {"":"Closure;",
 call$0: function() {
  var t1 = $.Callback$once(new $.main__anon0());
  $.context().set$init(t1);
  t1 = $.Callback$many(new $.main__anon1());
  $.context().set$auth(t1);
  t1 = $.Callback$many(new $.main__anon2());
  $.context().set$onAuthResponse(t1);
  t1 = $.Callback$once(new $.main__anon3());
  $.context().set$MakeRequest(t1);
  t1 = $.Callback$once(new $.main__anon4());
  $.context().set$RequestCallback(t1);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main__anon0 = {"":"Closure;",
 call$0: function() {
  $.context().get$window().setTimeout$2($.context().get$auth(), 1);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main__anon1 = {"":"Closure;",
 call$0: function() {
  $.context().get$gapi().get$client().setApiKey$1("AIzaSyDOtMNdtbw17o9bs-kW7G6O3S05p0H8wYM");
  $.context().get$window().setTimeout$2($.context().get$gapi().get$auth().authorize$2($.map($.makeLiteralMap(["client_id", "688110452481.apps.googleusercontent.com", "scope", "https://www.googleapis.com/auth/plus.me", "immediate", $.immediate])), $.context().get$onAuthResponse()), 1);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main__anon2 = {"":"Closure;",
 call$1: function(token) {
  if (!($.propertyTypeCheck(token, 'is$Proxy') == null)) {
    $.get$authBtn().get$style().set$display("none");
    $.context().MakeRequest$0();
    $.immediate = true;
  } else {
    $.get$authBtn().get$style().set$display("block");
    $.immediate = false;
  }
},
 is$Function: true
};

$$.main__anon3 = {"":"Closure;",
 call$0: function() {
  $.scoped(new $.main___anon());
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main___anon = {"":"Closure;",
 call$0: function() {
  $.context().get$gapi().get$client().load$3("plus", "v1", $.Callback$once(new $.main____anon()));
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main____anon = {"":"Closure;",
 call$0: function() {
  $.context().get$gapi().get$client().get$plus().get$people().get$1($.map($.makeLiteralMap(["userId", "me", "fields", "aboutMe,circledByCount,displayName,image,tagline,urls/value"]))).execute$1($.context().get$RequestCallback());
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.main__anon4 = {"":"Closure;",
 call$2: function(jsonResp, rawResp) {
  var data, t1, t2, t3, t4;
  $.propertyTypeCheck(jsonResp, 'is$Proxy');
  data = $.JSON_parse(rawResp);
  for (t1 = $.getInterceptor$JSStringJSArray(data), t2 = t1.operator$index$1(data, 0), t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "result"), t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "urls"), t2 = $.getInterceptor$JSArray(t2).iterator$0(t2); $.boolConversionCheck(t2.get$hasNext());) {
    t3 = t2.next$0();
    t4 = $.get$urls();
    $.getInterceptor$JSArray(t4).add$1(t4, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, "value"));
  }
  t2 = t1.operator$index$1(data, 0);
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "result");
  $.displayName = $.stringTypeCheck($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "displayName"));
  t2 = t1.operator$index$1(data, 0);
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "result");
  $.tagline = $.stringTypeCheck($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "tagline"));
  t2 = t1.operator$index$1(data, 0);
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "result");
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "image");
  $.pic = $.stringTypeCheck($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "url"));
  t1 = t1.operator$index$1(data, 0);
  t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "result");
  $.aboutMe = $.SafeHtml$unsafe("<div>" + $.S($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "aboutMe")) + "</div>");
  $.dispatch();
},
 is$Function: true
};

$$.main_anon0 = {"":"Closure;",
 call$1: function(e) {
  $.callTypeCheck(e, 'is$Event');
  $.scoped(new $.main__anon());
},
 is$Function: true,
 is$EventListener: true
};

$$.main__anon = {"":"Closure;",
 call$0: function() {
  $.context().auth$0();
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.Maps__emitMap_anon = {"":"Closure;box_0,result_1,visiting_2",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (!$.boolConversionCheck(t1.first_0)) {
    t2 = this.result_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_0 = false;
  t1 = this.result_1;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
},
 is$Function: true
};

$$.FilteredElementList__filtered_anon = {"":"Closure;",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._ChildrenElementList_filter_anon = {"":"Closure;f_0,output_1",
 call$1: function(element) {
  var t1;
  $.callTypeCheck(element, 'is$Element');
  if ($.boolConversionCheck(this.f_0.call$1(element))) {
    t1 = this.output_1;
    $.getInterceptor$JSArray(t1).add$1(t1, element);
  }
},
 is$Function: true
};

$$.FilteredElementList_removeRange_anon = {"":"Closure;",
 call$1: function(el) {
  return el.remove$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._LinkedHashMapImpl_forEach_anon = {"":"Closure;f_0",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$_KeyValuePair');
  this.f_0.call$2(entry.get$key(), entry.get$value());
},
 is$Function: true
};

$$.DoubleLinkedQueue_length_anon = {"":"Closure;box_0",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_0 = $.intTypeCheck($.add(t1.counter_0, 1));
},
 is$Function: true
};

$$.NoSuchMethodError_toString_anon = {"":"Closure;box_0",
 call$2: function(key, value) {
  var t1, t2;
  $.stringTypeCheck(key);
  t1 = this.box_0;
  if ($.boolConversionCheck($.gt(t1.i_1, 0))) {
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_1 = $.intTypeCheck($.add(t1.i_1, 1));
},
 is$Function: true
};

$$.invokeClosure_anon = {"":"Closure;closure_0",
 call$0: function() {
  return this.closure_0.call$0();
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.invokeClosure_anon0 = {"":"Closure;closure_1,arg1_2",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.invokeClosure_anon1 = {"":"Closure;closure_3,arg1_4,arg2_5",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_4, this.arg2_5);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.anon = {"":"Closure;this_0",
 call$1: function(msg, exception) {
  var t1, t2, t3, receiver, t4, method, t5, args, result, e;
  try {
    t1 = this.this_0.get$_registry();
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = msg;
    receiver = t2.operator$index$1(t1, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 0));
    t4 = msg;
    method = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 1);
    t5 = msg;
    t5 = $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 2);
    args = $.getInterceptor$JSArray(t5).map$1(t5, $._deserialize);
    if ($.boolConversionCheck($.eq(method, "#call"))) {
      result = null;
      t1 = args;
      switch ($.getInterceptor$JSStringJSArray(t1).get$length(t1)) {
        case 0:
          result = $._serialize(receiver.call$0());
          break;
        case 1:
          t1 = receiver;
          t2 = args;
          result = $._serialize(t1.call$1($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0)));
          break;
        case 2:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          result = $._serialize(t1.call$2(t2, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1)));
          break;
        case 3:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
          t4 = args;
          result = $._serialize(t1.call$3(t2, t3, $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2)));
          break;
        case 4:
          t1 = receiver;
          t2 = args;
          t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
          t3 = args;
          t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
          t4 = args;
          t4 = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2);
          t5 = args;
          result = $._serialize(t1.call$4(t2, t3, t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 3)));
          break;
        default:
          throw $.$$throw("Unsupported number of arguments.");
      }
      t1 = ["return", result];
      return t1;
    } else
      throw $.$$throw("Invocation unsupported on non-function Dart proxies");
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    return ["throws", $.S(e)];
  }

},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._HashSetImpl_filter_anon = {"":"Closure;f_0,result_1",
 call$2: function(key, value) {
  var t1;
  if ($.boolConversionCheck(this.f_0.call$1(key))) {
    t1 = this.result_1;
    $.getInterceptor$JSArray(t1).add$1(t1, key);
  }
},
 is$Function: true
};

$$._HashSetImpl_forEach_anon = {"":"Closure;f_0",
 call$2: function(key, value) {
  this.f_0.call$1(key);
},
 is$Function: true
};

$$.ReceivePortSync_receive_anon = {"":"Closure;this_0",
 call$1: function(e) {
  var data, t1, replyTo, message, result;
  $.callTypeCheck(e, 'is$Event');
  $.callTypeCheck(e, 'is$CustomEvent');
  data = $.JSON_parse($.stringTypeCheck(e.get$detail()));
  t1 = $.getInterceptor$JSStringJSArray(data);
  replyTo = t1.operator$index$1(data, 0);
  t1 = t1.operator$index$1(data, 1);
  message = $._JsDeserializer$().deserialize$1(t1);
  result = this.this_0._callback$1(message);
  $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
},
 is$Function: true,
 is$EventListener: true
};

$$.Storage_values_anon = {"":"Closure;values_0",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, v);
},
 is$Function: true
};

$$._LinkedHashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  $.propertyTypeCheck(entry, 'is$_KeyValuePair');
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, entry.get$value());
},
 is$Function: true
};

$$._HashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, value);
},
 is$Function: true
};

$$.Storage_keys_anon = {"":"Closure;keys_0",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, k);
},
 is$Function: true
};

$$._LinkedHashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  $.propertyTypeCheck(entry, 'is$_KeyValuePair');
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, entry.get$key());
},
 is$Function: true
};

$$._HashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, key);
},
 is$Function: true
};

$$._RemoteSendPortSync__call_anon = {"":"Closure;box_0",
 call$1: function(e) {
  var result;
  $.callTypeCheck(e, 'is$Event');
  $.callTypeCheck(e, 'is$CustomEvent');
  result = $.JSON_parse($.stringTypeCheck(e.get$detail()));
  this.box_0.result_0 = result;
},
 is$Function: true,
 is$EventListener: true
};

$$._JsonStringifier_stringifyJsonValue_anon = {"":"Closure;box_0,this_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  $.stringTypeCheck(key);
  t1 = this.box_0;
  t2 = !$.boolConversionCheck(t1.first_0);
  t3 = this.this_1;
  if (t2) {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, ",\"");
  } else {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, "\"");
  }
  t2 = this.this_1;
  $._JsonStringifier_escape(t2.get$sb(), key);
  t3 = t2.get$sb();
  $.getInterceptor$JSArray(t3).add$1(t3, "\":");
  t2.stringifyValue$1(value);
  t1.first_0 = false;
},
 is$Function: true
};

$$._deserialize_deserializeFunction = {"":"Closure;",
 call$1: function(message) {
  var t1, id, port;
  t1 = $.getInterceptor$JSStringJSArray(message);
  id = t1.operator$index$1(message, 1);
  port = t1.operator$index$1(message, 2);
  if ($.boolConversionCheck($.eq(port, $.get$_proxiedObjectTable().get$sendPort())))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $._FunctionProxy$_internal(port, id)._call;
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._deserialize_deserializeObject = {"":"Closure;",
 call$1: function(message) {
  var t1, id, port;
  t1 = $.getInterceptor$JSStringJSArray(message);
  id = t1.operator$index$1(message, 1);
  port = t1.operator$index$1(message, 2);
  if ($.boolConversionCheck($.eq(port, $.get$_proxiedObjectTable().get$sendPort())))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $.Proxy$_internal(port, id);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.anon0 = {"":"Closure;port_0,id_1",
 call$4: function(arg0, arg1, arg2, arg3) {
  var t1, t2, t3, t4, args, message, result;
  t1 = $ === arg0;
  if (t1)
    arg0 = null;
  t1 = !t1;
  t2 = $ === arg1;
  if (t2)
    arg1 = null;
  t2 = !t2;
  t3 = $ === arg2;
  if (t3)
    arg2 = null;
  t3 = !t3;
  t4 = $ === arg3;
  if (t4)
    arg3 = null;
  if (!t4)
    args = [arg0, arg1, arg2, arg3];
  else if (t3)
    args = [arg0, arg1, arg2];
  else if (t2)
    args = [arg0, arg1];
  else
    args = t1 ? [arg0] : [];
  message = [this.id_1, "", "apply", $.CONSTANT.map$1(args, $._serialize)];
  result = this.port_0.callSync$1(message);
  t1 = $.getInterceptor$JSStringJSArray(result);
  if ($.boolConversionCheck($.eq(t1.operator$index$1(result, 0), "throws")))
    throw $.$$throw(t1.operator$index$1(result, 1));
  return $._deserialize(t1.operator$index$1(result, 1));
},
 call$0: function() {
  return this.call$4($, $, $, $);
},
 call$1: function(arg0) {
  return this.call$4(arg0, $, $, $);
},
 call$2: function(arg0, arg1) {
  return this.call$4(arg0, arg1, $, $);
},
 call$3: function(arg0, arg1, arg2) {
  return this.call$4(arg0, arg1, arg2, $);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.ConstantMap_values_anon = {"":"Closure;this_0,result_1",
 call$1: function(key) {
  var t1, t2, t3;
  $.stringTypeCheck(key);
  t1 = this.result_1;
  t2 = $.getInterceptor$JSArray(t1);
  t3 = this.this_0;
  return t2.add$1(t1, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, key));
},
 is$Function: true
};

$$.ConstantMap_forEach_anon = {"":"Closure;this_0,f_1",
 call$1: function(key) {
  var t1, t2;
  $.stringTypeCheck(key);
  t1 = this.f_1;
  t2 = this.this_0;
  return t1.call$2(key, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, key));
},
 is$Function: true
};

$$._HashSetImpl_map_anon = {"":"Closure;f_0,result_1",
 call$2: function(key, value) {
  var t1 = this.result_1;
  $.getInterceptor$JSArray(t1).add$1(t1, this.f_0.call$1(key));
},
 is$Function: true
};

$$._initialize_anon = {"":"Closure;",
 call$1: function(_) {
  return $._enterScope();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._initialize_anon0 = {"":"Closure;",
 call$1: function(args) {
  return $._exitScope($.getInterceptor$JSStringJSArray(args).operator$index$1(args, 0));
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._HashSetImpl_addAll_anon = {"":"Closure;this_0",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
},
 is$Function: true
};

$$.anon1 = {"":"Closure;this_0,f_1",
 call$4: function(arg1, arg2, arg3, arg4) {
  var t1, arg1_check, t2, arg2_check, arg3_check, arg4_check;
  t1 = $ === arg1;
  if (t1)
    arg1 = null;
  arg1_check = !t1;
  t2 = $ === arg2;
  if (t2)
    arg2 = null;
  arg2_check = !t2;
  t1 = $ === arg3;
  if (t1)
    arg3 = null;
  arg3_check = !t1;
  t2 = $ === arg4;
  if (t2)
    arg4 = null;
  arg4_check = !t2;
  try {
    if (!$.boolConversionCheck(arg1_check)) {
      t1 = this.f_1.call$0();
      return t1;
    } else if (!$.boolConversionCheck(arg2_check)) {
      t1 = this.f_1.call$1(arg1);
      return t1;
    } else if (!$.boolConversionCheck(arg3_check)) {
      t1 = this.f_1.call$2(arg1, arg2);
      return t1;
    } else {
      t1 = !$.boolConversionCheck(arg4_check);
      t2 = this.f_1;
      if (t1) {
        t1 = t2.call$3(arg1, arg2, arg3);
        return t1;
      } else {
        t1 = t2.call$4(arg1, arg2, arg3, arg4);
        return t1;
      }
    }
  } finally {
    $.get$_proxiedObjectTable().invalidate$1(this.this_0.get$_liblib2$_id());
  }
},
 call$0: function() {
  return this.call$4($, $, $, $);
},
 call$1: function(arg1) {
  return this.call$4(arg1, $, $, $);
},
 call$2: function(arg1, arg2) {
  return this.call$4(arg1, arg2, $, $);
},
 call$3: function(arg1, arg2, arg3) {
  return this.call$4(arg1, arg2, arg3, $);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.Proxy__serializeDataTree_anon = {"":"Closure;",
 call$1: function(e) {
  return $.Proxy__serializeDataTree(e);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.insertAllBefore_anon = {"":"Closure;parent_0,reference_1",
 call$1: function(n) {
  return this.parent_0.insertBefore$2(n, this.reference_1);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.watch_anon = {"":"Closure;",
 call$0: function() {
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.watch_anon0 = {"":"Closure;target_0",
 call$0: function() {
  return this.target_0;
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$.watch_anon1 = {"":"Closure;watcher_1",
 call$0: function() {
  return $._unregister(this.watcher_1);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":"Closure;values_1,copies_2",
 call$1: function(value) {
  var t1, t2, length$, i, t3;
  t1 = this.values_1;
  t2 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t2.get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.call$1$bailout0(1, value, t1, t2, length$);
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t3 = t2.operator$index$1(t1, i);
    if (t3 == null ? value == null : t3 === value)
      return i;
  }
  t2.add$1(t1, value);
  t1 = this.copies_2;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, value, t1, t2, length$) {
  var i, t3;
  for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    t3 = t2.operator$index$1(t1, i);
    if (t3 == null ? value == null : t3 === value)
      return i;
  }
  $.getInterceptor$JSArray(t1).add$1(t1, value);
  t1 = this.copies_2;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":"Closure;copies_3",
 call$1: function(i) {
  var t1;
  $.intTypeCheck(i);
  t1 = this.copies_3;
  return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":"Closure;copies_4",
 call$2: function(i, x) {
  $.intTypeCheck(i);
  $.indexSet(this.copies_4, i, x);
},
 is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":"Closure;",
 call$0: function() {
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":"Closure;findSlot_5,readSlot_6,writeSlot_7",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_5.call$1(e);
    t1.copy_0 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = {};
    this.writeSlot_7.call$2(slot, t1.copy_0);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_0;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_5.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; $.boolConversionCheck($.lt(i, length$)); ++i) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, copy0, $.CONSTANT, length$, i, slot, t2, copy);
          for (j = 0; t1 = $.boolConversionCheck($.lt(j, i)), t2 = copy0.length, t1; ++j) {
            if (j !== (j | 0))
              throw $.iae(j);
            if (j < 0 || j >= e.length)
              throw $.ioore(j);
            t1 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t1;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (i !== (i | 0))
      return this.call$1$bailout(5, e, copy, $.CONSTANT, length$, i);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, copy, $.CONSTANT, length$, i);
    for (; $.boolConversionCheck($.lt(i, length$)); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env2;
      t2 = env1;
      e = env0;
      break;
    case 3:
      copy = env9;
      t4 = env8;
      slot = env7;
      i = env6;
      length$ = env5;
      t2 = env4;
      copy0 = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 5:
      i = env4;
      length$ = env3;
      t2 = env2;
      copy = env1;
      e = env0;
      break;
    case 4:
      i = env4;
      length$ = env3;
      t2 = env2;
      copy = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_5.call$1(e);
        t1.copy_0 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_0;
        if (!(t2 == null))
          return t2;
        t1.copy_0 = {};
        this.writeSlot_7.call$2(slot, t1.copy_0);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_0;
      }
    default:
      var t1, slot, t2, e, length$, t4, copy, t3, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 5 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            t2 = $.getInterceptor$JSStringJSArray(e);
            length$ = t2.get$length(e);
            $.intTypeCheck(length$);
          case 2:
            state0 = 0;
            slot = this.findSlot_5.call$1(e);
            t4 = this.readSlot_6;
            copy = t4.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_7;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.boolConversionCheck($.lt(i, length$)))
                            break L0;
                          element = t2.operator$index$1(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t4.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t3.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; $.boolConversionCheck($.lt(j, i)); j = $.intTypeCheck($.add(j, 1)))
                                  $.indexSet(copy0, j, t2.operator$index$1(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                i = $.intTypeCheck($.add(i, 1));
                                copy = copy0;
                                break L0;
                            }
                          i = $.intTypeCheck($.add(i, 1));
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 5:
            state0 = 0;
          case 4:
            state0 = 0;
            for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
              $.indexSet(copy, i, this.call$1(t2.operator$index$1(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":"Closure;box_0,walk_8",
 call$2: function(key, value) {
  this.box_0.copy_0[key] = this.walk_8.call$1(value);
},
 is$Function: true
};

$$._BaseSendPort_call_anon = {"":"Closure;completer_0,port_1",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_1.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
},
 is$Function: true
};

$$._WorkerSendPort_send_anon = {"":"Closure;this_0,message_1,replyTo_2",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_0;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
  t2 = $.boolConversionCheck($._globalState().get$isWorker());
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else {
    t2 = t3().get$managers();
    $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1.get$_workerId()).postMessage$1(workerMessage);
  }
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$._waitForPendingPorts_anon = {"":"Closure;callback_0",
 call$1: function(_) {
  return this.callback_0.call$0();
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.Futures_wait_anon = {"":"Closure;box_0,completer_1,result_2,values_3,pos_4",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_3;
  $.indexSet(t1, this.pos_4, value);
  t2 = this.box_0;
  remaining = $.intTypeCheck($.sub(t2.remaining_0, 1));
  t2.remaining_0 = remaining;
  if (remaining === 0 && !$.boolConversionCheck(this.result_2.get$isComplete()))
    this.completer_1.complete$1(t1);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$.Futures_wait_anon0 = {"":"Closure;completer_5,result_6,future_7",
 call$1: function(exception) {
  if (!$.boolConversionCheck(this.result_6.get$isComplete()))
    this.completer_5.completeException$2(exception, this.future_7.get$stackTrace());
  return true;
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._PendingSendPortFinder_visitMap_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._liblib4$_dispatch$1(e);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._PendingSendPortFinder_visitList_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._liblib4$_dispatch$1(e);
},
 is$Function: true,
 is$EventListener: true,
 is$ValueWatcher: true,
 is$ErrorCallback: true
};

$$._NativeJsSendPort_send_anon = {"":"Closure;this_1,message_2,replyTo_3",
 call$0: function() {
  var t1, t2, t3, t4, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_1;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  t4 = $._globalState().get$isolates();
  isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t2.get$_liblib4$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_liblib4$_receivePort().get$_liblib4$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_liblib4$_isolateId());
  msg = this.message_2;
  t1.msg_0 = msg;
  t1.reply_1 = t3;
  if (shouldSerialize) {
    t1.msg_0 = $._serializeMessage(t1.msg_0);
    t1.reply_1 = $._serializeMessage(t1.reply_1);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$._NativeJsSendPort_send__anon = {"":"Closure;box_0,this_4,shouldSerialize_5",
 call$0: function() {
  var t1, t2;
  t1 = this.this_4;
  if (!(t1.get$_liblib4$_receivePort().get$_liblib4$_callback() == null)) {
    if ($.boolConversionCheck(this.shouldSerialize_5)) {
      t2 = this.box_0;
      t2.msg_0 = $._deserializeMessage(t2.msg_0);
      t2.reply_1 = $._deserializeMessage(t2.reply_1);
    }
    t1 = t1.get$_liblib4$_receivePort();
    t2 = this.box_0;
    t1._liblib4$_callback$2(t2.msg_0, t2.reply_1);
  }
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true,
 is$Getter: true
};

$$._Copier_visitMap_anon = {"":"Closure;box_0,this_1",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_0;
  t2 = this.this_1;
  $.indexSet(t1, t2._liblib4$_dispatch$1(key), t2._liblib4$_dispatch$1(val));
},
 is$Function: true
};

$$._EventLoop__runHelper_next = {"":"Closure;this_0",
 call$0: function() {
  if (!$.boolConversionCheck(this.this_0.runIteration$0()))
    return;
  window.setTimeout($.convertDartClosureToJS(this, 0), 0);
},
 is$Function: true,
 is$TimeoutHandler: true,
 is$WatcherDisposer: true,
 is$VoidCallback: true
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.BoundClosure = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
},
 is$TimeoutHandler : true,
 is$WatcherDisposer : true,
 is$VoidCallback : true
};
$$.BoundClosure0 = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
},
 is$TimeoutHandler : true,
 is$WatcherDisposer : true,
 is$VoidCallback : true
};
$$.BoundClosure1 = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
}
};
$$.BoundClosure2 = {"":"Closure;self,target", call$1: function(p0) {
  return this.self[this.target](p0);
}
};
$$.BoundClosure3 = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
},
 is$TimeoutHandler : true,
 is$WatcherDisposer : true,
 is$VoidCallback : true
};
$.main = function() {
  var t1, script;
  $.scoped(new $.main_anon());
  t1 = $.get$authBtn().get$on().get$click();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.main_anon0());
  script = $.callTypeCheck($.ScriptElement_ScriptElement(), 'is$ScriptElement');
  script.set$src("http://apis.google.com/js/client.js?onload=init");
  script.set$type("text/javascript");
  t1 = $.document().get$body().get$children();
  $.getInterceptor$JSArray(t1).add$1(t1, script);
};

$.init_autogenerated = function() {
  var t1, _root, _removeChild__e12, __e1, __stoppers1, t2;
  t1 = {};
  _root = $.document().get$body();
  t1.__binding0_4 = null;
  t1.__e5_5 = null;
  t1._endPosition__e5_6 = null;
  t1._isVisible__e5_7 = false;
  t1.__e4_8 = null;
  t1.__e3_9 = null;
  t1.__binding2_10 = null;
  t1.__stoppers2_1_11 = null;
  t1.__e6_12 = null;
  t1._endPosition__e6_13 = null;
  t1._isVisible__e6_14 = false;
  t1.__pic_15 = null;
  t1.__stoppers3_1_16 = null;
  t1.__e8_17 = null;
  t1._endPosition__e8_18 = null;
  t1._isVisible__e8_19 = false;
  t1.__about_20 = null;
  t1.__binding7_21 = null;
  t1.__stoppers4_1_22 = null;
  t1.__e14_23 = null;
  t1._endPosition__e14_24 = null;
  t1._isVisible__e14_25 = false;
  t1.__e13_26 = null;
  t1.__e12_27 = null;
  t1.__stoppers5_1_28 = null;
  _removeChild__e12 = [];
  t1._endPosition__e12_29 = null;
  __e1 = $.callTypeCheck(_root.query$1("#__e-1"), 'is$Element');
  t1.__binding0_4 = $.Text_Text("");
  __stoppers1 = [];
  t2 = __e1.get$nodes();
  $.getInterceptor$JSArray(t2).add$1(t2, t1.__binding0_4);
  t2 = __e1.get$nodes();
  $.getInterceptor$JSArray(t2).add$1(t2, $.Text_Text(" on Google+"));
  t1.__e5_5 = $.callTypeCheck(_root.query$1("#__e-5"), 'is$Element');
  $.callTypeCheck(_root.query$1("#authorize"), 'is$ButtonElement');
  t1.__e6_12 = $.callTypeCheck(_root.query$1("#__e-6"), 'is$Element');
  t1.__e8_17 = $.callTypeCheck(_root.query$1("#__e-8"), 'is$Element');
  t1.__e14_23 = $.callTypeCheck(_root.query$1("#__e-14"), 'is$Element');
  $.CONSTANT.add$1(__stoppers1, $.watchAndInvoke(new $.init_autogenerated_anon(), new $.init_autogenerated_anon0(t1), null));
  t1._endPosition__e5_6 = $.callTypeCheck(t1.__e5_5, 'is$Node');
  $.CONSTANT.add$1(__stoppers1, $.watchAndInvoke(new $.init_autogenerated_anon1(), new $.init_autogenerated_anon2(t1), null));
  t1._endPosition__e6_13 = $.callTypeCheck(t1.__e6_12, 'is$Node');
  $.CONSTANT.add$1(__stoppers1, $.watchAndInvoke(new $.init_autogenerated_anon3(), new $.init_autogenerated_anon4(t1), null));
  t1._endPosition__e8_18 = $.callTypeCheck(t1.__e8_17, 'is$Node');
  $.CONSTANT.add$1(__stoppers1, $.watchAndInvoke(new $.init_autogenerated_anon5(), new $.init_autogenerated_anon6(t1), null));
  t1._endPosition__e14_24 = $.callTypeCheck(t1.__e14_23, 'is$Node');
  $.CONSTANT.add$1(__stoppers1, $.watchAndInvoke(new $.init_autogenerated_anon7(), new $.init_autogenerated_anon8(t1, _removeChild__e12), null));
};

$.main0 = function() {
  $.main();
  $.init_autogenerated();
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  $.listTypeCheck(strings);
  if (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; $.boolConversionCheck($.lt(i, length$)); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$)); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= length$)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env2;
      t2 = env1;
      strings = env0;
      break;
    case 3:
      length$ = env3;
      t2 = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
      $.listTypeCheck(strings);
    case 1:
      state0 = 0;
      $.checkNull(strings);
      t2 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t2.get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, t2, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
          string = t2.operator$index$1(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
              string = t2.operator$index$1(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return $.listTypeCheck(array);
  }
};

$._callInIsolate = function(isolate, function$) {
  $.propertyTypeCheck(isolate, 'is$_IsolateContext').eval$1($.functionTypeCheck(function$));
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $.propertyTypeCheck($._globalState().get$currentContext(), 'is$_IsolateContext');
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($._globalState().get$isWorker()))
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $.propertyTypeCheck($globalState, 'is$_Manager');
};

$._globalState0 = function(val) {
  $globalState = $.propertyTypeCheck(val, 'is$_Manager');
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.Queue_Queue($._IsolateEvent), 'is$Queue'));
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, 'is$_IsolateContext'), $.functionTypeCheck(fn), message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId);
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, 'is$ReceivePortImpl'), isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  $.intTypeCheck(isolateId);
  return new $._WorkerSendPort($.intTypeCheck(_workerId), $.intTypeCheck(_receivePortId), isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1, t2;
  t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.intTypeCheck($.add(t1, 1));
  t2 = new $.ReceivePortImpl($.intTypeCheck(t1), null);
  t2.ReceivePortImpl$0();
  return t2;
};

$._waitForPendingPorts = function(message, callback) {
  var finder;
  $.functionTypeCheck(callback);
  finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$0();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CONSTANT4.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.ge(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, list);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror($.stringTypeCheck(memberName), $.stringTypeCheck(_internalName), $.intTypeCheck(_kind), $.listTypeCheck(_arguments), $.listTypeCheck(_namedArgumentNames), null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = $.intTypeCheck(object.$identityHash);
  if (hash == null) {
    hash = $.intTypeCheck($.add($.Primitives_hashCodeSeed, 1));
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.boolConversionCheck($.CONSTANT4.get$isNaN(result)))
    throw $.$$throw($.FormatException$(string));
  return $.intTypeCheck(result);
};

$.Primitives_parseDouble = function(string) {
  var result;
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  result = parseFloat(string);
  if ($.boolConversionCheck($.CONSTANT4.get$isNaN(result)) && !(string === "NaN"))
    throw $.$$throw($.FormatException$(string));
  return $.doubleTypeCheck(result);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if (name$ === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? $.stringTypeCheck(t1.substring$1(name$, 1)) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, i, result, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, i = 0, result = ""; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT.iterator$0(codePoints); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      $.CONSTANT.add$1(a, t2);
    else if (t2 <= 1114111) {
      $.CONSTANT.add$1(a, 55296 + ($.shr(t2 - 65536, 10) & 1023));
      $.CONSTANT.add$1(a, 56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT.iterator$0(charCodes); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CONSTANT0;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, t1, ieErrorCode, ieFacilityNumber;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    $.stringTypeCheck(message);
    if (message.indexOf("JSNull") === -1) {
      if (!$.boolConversionCheck($.eq(type, "property_not_function"))) {
        if (!$.boolConversionCheck($.eq(type, "called_non_callable")))
          t1 = $.boolConversionCheck($.boolConversionCheck($.eq(type, "non_object_property_call")) || $.boolConversionCheck($.eq(type, "non_object_property_load")));
        else
          t1 = true;
        $.boolConversionCheck(t1);
      } else
        t1 = true;
      $.boolConversionCheck(t1);
    } else
      t1 = true;
    if ($.boolConversionCheck(t1))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.boolConversionCheck($.eq(type, "undefined_method")))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string') {
      if (!$.boolConversionCheck($.CONSTANT1.endsWith$1(message, "is null"))) {
        if (!$.boolConversionCheck($.CONSTANT1.endsWith$1(message, "is undefined")))
          t1 = $.boolConversionCheck($.boolConversionCheck($.CONSTANT1.endsWith$1(message, "is null or undefined")) || $.boolConversionCheck($.CONSTANT1.endsWith$1(message, "of null")));
        else
          t1 = true;
        $.boolConversionCheck(t1);
      } else
        t1 = true;
      if ($.boolConversionCheck(t1))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if ($.boolConversionCheck(t1))
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.propertyTypeCheck($.CONSTANT.iterator$0(keyValuePairs), 'is$Iterator');
  result = $.callTypeCheck($.LinkedHashMap_LinkedHashMap(), 'is$Map');
  for (; $.boolConversionCheck(iterator.get$hasNext());)
    result.operator$indexSet$2($.stringTypeCheck(iterator.next$0()), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure);
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  var t1 = typeInfo.constructor === Array;
  $.assertHelper(t1);
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assertHelper(!(value == null));
  return value;
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'string')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "String"));
};

$.doubleTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "double"));
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "num"));
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'boolean')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "bool"));
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'function' || typeof value === 'object' && value !== null && !!value.is$Function)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "Function"));
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number' && Math.floor(value) === value)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "int"));
};

$.propertyTypeError = function(value, property) {
  var t1 = $.getInterceptor$JSString(property);
  throw $.$$throw($.TypeErrorImplementation$(value, $.stringTypeCheck(t1.substring$2(property, 3, t1.get$length(property)))));
};

$.propertyTypeCastError = function(value, property) {
  var actualType, t1;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$JSString(property);
  throw $.$$throw($.CastErrorImplementation$(actualType, $.stringTypeCheck(t1.substring$2(property, 3, t1.get$length(property)))));
};

$.propertyTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.callTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "object" && value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.stringSuperTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'string')
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "List"));
};

$.listSuperNativeTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  if (value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.voidTypeCheck = function(value) {
  if (value == null)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "void"));
};

$.TypeErrorImplementation$ = function(value, type) {
  return new $.TypeErrorImplementation("type '" + $.S($.Primitives_objectTypeName(value)) + "' is not a subtype " + "of type '" + $.S(type) + "'");
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.assertHelper = function(condition) {
  if (typeof condition === 'function' || typeof condition === 'object' && condition !== null && !!condition.is$Function)
    condition = condition.call$0();
  if (!(typeof condition === 'boolean'))
    throw $.$$throw($.TypeErrorImplementation$(condition, "bool"));
  if (!condition)
    throw $.$$throw($.AssertionError$());
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S($.stringTypeCheck(staticName))));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return $.stringTypeCheck(name$);
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.functionTypeCheck($.typeNameInChrome);
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.functionTypeCheck($.typeNameInChrome);
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.functionTypeCheck($.typeNameInFirefox);
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.functionTypeCheck($.typeNameInIE);
  else if (userAgent.indexOf("Opera") !== -1)
    return $.functionTypeCheck($.typeNameInOpera);
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.functionTypeCheck($.typeNameInSafari);
  else
    return $.functionTypeCheck($.constructorNameFallback);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $.stringTypeCheck($._getTypeNameOf.call$1(obj));
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  $.stringTypeCheck(name$);
  $.listTypeCheck(arguments$);
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT8));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, t1, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; t1 = $._dynamicMetadata0(), $.listTypeCheck(t1), $.boolConversionCheck($.lt(i, t1.length)); i = $.intTypeCheck($.add(i, 1))) {
      t1 = $._dynamicMetadata0();
      $.listTypeCheck(t1);
      entry = $.propertyTypeCheck(t1[i], 'is$MetaInfo');
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  $.stringTypeCheck(className);
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  $.stringTypeCheck(name$);
  dartMethod = Object.getPrototypeOf($.CONSTANT8)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $.listTypeCheck($dynamicMetadata);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = $.listTypeCheck(table);
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, t1, tag, t2, tags, set, tagNames, j;
  result = [];
  for (i = 0; $.boolConversionCheck($.lt(i, inputTable.length)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = inputTable[i];
    $.listTypeCheck(t1);
    tag = t1[0];
    t2 = inputTable[i];
    $.listTypeCheck(t2);
    tags = t2[1];
    set = {};
    tagNames = $.listTypeCheck(tags.split("|"));
    for (j = 0; $.boolConversionCheck($.lt(j, tagNames.length)); j = $.intTypeCheck($.add(j, 1))) {
      t1 = tagNames[j];
      $.stringTypeCheck(t1);
      set[t1] = true;
    }
    $.CONSTANT.add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata($.listTypeCheck(inputTable));
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  $.propertyTypeCheck(regExp, 'is$JSSyntaxRegExp');
  $.boolTypeCheck(global);
  pattern = $.stringTypeCheck(regExp.get$pattern());
  multiLine = $.boolTypeCheck(regExp.get$multiLine());
  ignoreCase = $.boolTypeCheck(regExp.get$ignoreCase());
  $.checkString(pattern);
  sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
  if (multiLine) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  $.stringTypeCheck(pattern);
  $.boolTypeCheck(ignoreCase);
  return new $.JSSyntaxRegExp(pattern, $.boolTypeCheck(multiLine), ignoreCase);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation($.stringTypeCheck(pattern), str, start, $.intTypeCheck(end), _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  $.propertyTypeCheck(re, 'is$JSSyntaxRegExp');
  $.stringTypeCheck(_str);
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(null, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = $.intTypeCheck(t1.get$length(haystack));
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.intTypeCheck(t1.indexOf$2(haystack, needle, startIndex));
    if (position === -1)
      break;
    $.CONSTANT.add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.intTypeCheck($.add(position, patternLength));
    if (endIndex == null ? length$ == null : endIndex === length$)
      break;
    else
      startIndex = (position == null ? endIndex == null : position === endIndex) ? $.intTypeCheck($.add(startIndex, 1)) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.CONSTANT1.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT1.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
      length$ = receiver.length;
      result.add$1(to);
      for (i = 0; $.boolConversionCheck(i < length$); ++i) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; $.boolConversionCheck(i >= srcStart); --i, j = $.intTypeCheck($.sub(j, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (i = srcStart, j = dstStart; $.boolConversionCheck(i < srcStart + count); ++i, j = $.intTypeCheck($.add(j, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; $.boolConversionCheck(i < endIndex); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element)))
      return i;
  }
  return -1;
};

$.Collections_contains = function(iterable, element) {
  var t1;
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); $.boolConversionCheck(t1.get$hasNext());)
    if ($.boolConversionCheck($.eq(element, t1.next$0())))
      return true;
  return false;
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f);
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); $.boolConversionCheck(t1.get$hasNext());)
    f.call$1(t1.next$0());
};

$.Collections_map = function(source, destination, f) {
  var t1;
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f);
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); $.boolConversionCheck(t1.get$hasNext());)
    $.CONSTANT.add$1(destination, f.call$1(t1.next$0()));
  return destination;
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f);
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2)))
      $.CONSTANT.add$1(destination, t2);
  }
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.stringTypeCheck($.getInterceptor(result).toString$0(result));
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  $.propertyTypeCheck(result, 'is$StringBuffer');
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  result.add$1(isList ? "[" : "{");
  for (t2 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; $.boolConversionCheck(t2.get$hasNext()); first = false) {
    t3 = t2.next$0();
    if (!first)
      result.add$1(", ");
    $.Collections__emitObject(t3, result, visiting);
  }
  result.add$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting);
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      result.add$1(typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      result.add$1("{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    result.add$1(o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); $.boolConversionCheck(t1.get$hasNext());) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result, t1;
  $.callTypeCheck(m, 'is$Map');
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.stringTypeCheck($.getInterceptor(result).toString$0(result));
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  $.callTypeCheck(m, 'is$Map');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  result.add$1("{");
  t1.first_0 = true;
  m.forEach$1(new $.Maps__emitMap_anon(t1, result, visiting));
  result.add$1("}");
  t2.removeLast$0(visiting);
};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.Error_safeToString = function(object) {
  var t1;
  if ($.boolConversionCheck(typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object))
    return $.stringTypeCheck($.getInterceptor(object).toString$0(object));
  if (typeof object === 'string') {
    t1 = $.CONSTANT1.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.stringTypeCheck($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\""))) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S($.numTypeCheck(value)));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_memberName), $.listTypeCheck(_arguments), $.callTypeCheck(_namedArguments, 'is$Map'), $.listTypeCheck(existingArgumentNames));
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError($.stringTypeCheck(message));
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException($.stringTypeCheck(message));
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException($.stringTypeCheck(_pattern), _errmsg);
};

$.Future_Future$immediate = function(value, T) {
  return $._FutureImpl__FutureImpl$immediate(value, T);
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  $.listTypeCheck(futures);
  if (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior())
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.boolConversionCheck($.CONSTANT.get$isEmpty(futures)))
    return $.propertyTypeCheck($.Future_Future$immediate($.CONSTANT9, $.List), 'is$Future');
  completer = $.propertyTypeCheck($.Completer_Completer($.List), 'is$Completer');
  result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_0 = futures.length;
  values = $.List_List(futures.length);
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; $.boolConversionCheck($.lt(i, futures.length)); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= futures.length)
      throw $.ioore(i);
    future = $.propertyTypeCheck(futures[i], 'is$Future');
    future.then$1(new $.Futures_wait_anon(t1, completer, result, values, i));
    future.handleException$1(new $.Futures_wait_anon0(completer, result, future));
  }
  return result;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var t2, completer, result, values, i, future;
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if ($.boolConversionCheck(t2.get$isEmpty(futures)))
    return $.propertyTypeCheck($.Future_Future$immediate($.CONSTANT9, $.List), 'is$Future');
  completer = $.propertyTypeCheck($.Completer_Completer($.List), 'is$Completer');
  result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_0 = $.intTypeCheck(t2.get$length(futures));
  values = $.List_List(t2.get$length(futures));
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; $.boolConversionCheck($.lt(i, t2.get$length(futures))); i = $.intTypeCheck($.add(i, 1))) {
    future = $.propertyTypeCheck(t2.operator$index$1(futures, i), 'is$Future');
    future.then$1(new $.Futures_wait_anon(t1, completer, result, values, i));
    future.handleException$1(new $.Futures_wait_anon0(completer, result, future));
  }
  return result;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(false, null, null, null, false, false, [], [], []);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl__FutureImpl$immediate = function(value, T) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$());
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.List_List = function(length$) {
  return $.Primitives_newList($.intTypeCheck(length$));
};

$.List_List$from = function(other, E) {
  var list, t1;
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.getInterceptor$JSArray(other).iterator$0(other); $.boolConversionCheck(t1.get$hasNext());)
    $.CONSTANT.add$1(list, t1.next$0());
  return list;
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  $.intTypeCheck(length$);
  return $.intTypeCheck($.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1)));
};

$._KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $._KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  var t1;
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$($.stringTypeCheck(pattern), $.boolTypeCheck(ignoreCase), $.boolTypeCheck(multiLine));
};

$.Set_Set = function(E) {
  return $._HashSetImpl$(E);
};

$._HashSetImpl$ = function(E) {
  var t1 = new $._HashSetImpl(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._HashSetImpl$0();
  return t1;
};

$._HashSetIterator$ = function(set_, E) {
  var t1 = new $._HashSetIterator($.listTypeCheck(set_._backingMap.get$_keys()), -1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!$.isJsArray(charCodes)) {
    charCodes = $.List_List$from(charCodes);
    $.setRuntimeTypeInfo(charCodes, []);
  }
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.window = function() {
  return $.callTypeCheck(window, 'is$Window');
};

$.document = function() {
  return $.callTypeCheck(document, 'is$HtmlDocument');
};

$.query = function(selector) {
  return $.callTypeCheck($.document().query$1(selector), 'is$Element');
};

$.queryAll = function(selector) {
  return $.listTypeCheck($.document().queryAll$1(selector));
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($.boolConversionCheck($._Device_isFirefox()))
      $._cachedBrowserPrefix = "-moz-";
    else if ($.boolConversionCheck($._Device_isIE()))
      $._cachedBrowserPrefix = "-ms-";
    else if ($.boolConversionCheck($._Device_isOpera()))
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $.stringTypeCheck($._cachedBrowserPrefix);
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  return $._CustomEventFactoryProvider_createCustomEvent($.stringTypeCheck(type), $.boolTypeCheck(canBubble), $.boolTypeCheck(cancelable), detail);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.callTypeCheck(element.get$$$dom_children(), 'is$HtmlCollection'));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList($.listTypeCheck(_nodeList));
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, parentTag, temp, element, t2;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (!(match == null)) {
    t1 = match.group$1(1);
    tag = $.stringTypeCheck($.getInterceptor$JSString(t1).toLowerCase$0(t1));
    parentTag = $.boolConversionCheck($.CONSTANT6.containsKey$1(tag)) ? $.stringTypeCheck($.CONSTANT6.operator$index$1(tag)) : "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $.callTypeCheck($.Element_Element$tag(parentTag), 'is$Element');
  temp.set$innerHtml(html);
  t1 = temp.get$children();
  if ($.boolConversionCheck($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))) {
    t1 = temp.get$children();
    element = $.callTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0), 'is$Element');
  } else {
    if (parentTag === "html") {
      t1 = temp.get$children();
      t2 = $.boolConversionCheck($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 2));
      t1 = t2;
    } else
      t1 = false;
    if ($.boolConversionCheck(t1)) {
      t1 = temp.get$children();
      t2 = $.getInterceptor$JSStringJSArray(t1);
      element = $.callTypeCheck(t2.operator$index$1(t1, tag === "head" ? 0 : 1), 'is$Element');
    } else {
      t1 = temp.get$children();
      throw $.$$throw($.ArgumentError$("HTML had " + $.S($.getInterceptor$JSStringJSArray(t1).get$length(t1)) + " " + "top level elements but 1 expected"));
    }
  }
  element.remove$0();
  return element;
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents($.callTypeCheck(_ptr, 'is$EventTarget'));
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList($.callTypeCheck(_ptr, 'is$EventTarget'), _type);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$.ScriptElement_ScriptElement = function() {
  return $.document().$$dom_createElement$1("script");
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.Text_Text = function(data) {
  return $.callTypeCheck(document.createTextNode(data), 'is$Text');
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._Device_userAgent = function() {
  return $.stringTypeCheck($.window().get$navigator().get$userAgent());
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.boolTypeCheck($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0));
};

$._Device_isIE = function() {
  if (!$.boolConversionCheck($._Device_isOpera())) {
    var t1 = $._Device_userAgent();
    t1 = $.boolConversionCheck($.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0));
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.boolTypeCheck($.getInterceptor$JSString(t1).contains$2(t1, "Firefox", 0));
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, listener, t2;
  t1 = {};
  $.intTypeCheck(isolateId);
  $.intTypeCheck(portId);
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  listener = new $._RemoteSendPortSync__call_anon(t1);
  t2 = $.window().get$on();
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source);
  $.getInterceptor$JSArray(t2).add$1(t2, listener);
  $._dispatchEvent(target, [source, message]);
  t2 = $.window().get$on();
  $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source).remove$1(listener);
  return t1.result_0;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.intTypeCheck($.ReceivePortSync__cachedIsolateId);
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  var t1;
  $.intTypeCheck(isolateId);
  $.intTypeCheck(portId);
  t1 = $.ReceivePortSync__isolateId();
  if (isolateId == null ? t1 == null : isolateId === t1) {
    t1 = $.ReceivePortSync__portMap;
    return $.propertyTypeCheck($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId).toSendPort$0(), 'is$SendPortSync');
  } else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._dispatchEvent = function(receiver, message) {
  var event$ = $.CustomEvent_CustomEvent($.stringTypeCheck(receiver), false, false, $.JSON_stringify(message));
  $.window().$$dom_dispatchEvent$1(event$);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._CustomEventFactoryProvider_createCustomEvent = function(type, canBubble, cancelable, detail) {
  var e;
  $.stringTypeCheck(type);
  $.boolTypeCheck(canBubble);
  $.boolTypeCheck(cancelable);
  e = $.callTypeCheck($.document().$$dom_createEvent$1("CustomEvent"), 'is$CustomEvent');
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$._convertNativeToDart_Window = function(win) {
  return $.callTypeCheck($._DOMWindowCrossFrame__createSafe(win), 'is$WindowBase');
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return $.callTypeCheck(w, 'is$WindowBase');
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1;
  $.listTypeCheck(array);
  t1 = new $.FixedSizeListIterator($.intTypeCheck($.getInterceptor$JSStringJSArray(array).get$length(array)), array, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.FilteredElementList$ = function(node) {
  $.callTypeCheck(node, 'is$Node');
  return new $.FilteredElementList(node, $.listTypeCheck(node.get$nodes()));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Lists_indexOf$bailout(2, a, element, startIndex, endIndex);
  $.intTypeCheck(endIndex);
  if (endIndex !== (endIndex | 0))
    return $.Lists_indexOf$bailout(3, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; $.boolConversionCheck($.lt(i, endIndex)); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element)))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      endIndex = env3;
      startIndex = env2;
      element = env1;
      a = env0;
      break;
    case 2:
      endIndex = env3;
      startIndex = env2;
      element = env1;
      a = env0;
      break;
    case 3:
      endIndex = env3;
      startIndex = env2;
      element = env1;
      a = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.listTypeCheck(a);
    case 2:
      state0 = 0;
      $.intTypeCheck(endIndex);
    case 3:
      var endIndex, startIndex, element, a, t1, i;
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(a);
      if ($.boolConversionCheck($.ge(startIndex, t1.get$length(a))))
        return -1;
      if ($.boolConversionCheck($.lt(startIndex, 0)))
        startIndex = 0;
      for (i = startIndex; $.boolConversionCheck($.lt(i, endIndex)); i = $.intTypeCheck($.add(i, 1)))
        if ($.boolConversionCheck($.eq(t1.operator$index$1(a, i), element)))
          return i;
      return -1;
  }
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (start !== (start | 0))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Lists_getRange$bailout(2, a, start, length$, accumulator);
  if ($.boolConversionCheck($.lt(length$, 0)))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  $.intTypeCheck(end);
  if (end !== (end | 0))
    return $.Lists_getRange$bailout(3, a, start, accumulator, end);
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.boolConversionCheck($.lt(i, end)); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    $.CONSTANT.add$1(accumulator, a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      accumulator = env3;
      length$ = env2;
      start = env1;
      a = env0;
      break;
    case 2:
      accumulator = env3;
      length$ = env2;
      start = env1;
      a = env0;
      break;
    case 3:
      end = env3;
      accumulator = env2;
      start = env1;
      a = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.listTypeCheck(a);
    case 2:
      state0 = 0;
      if ($.boolConversionCheck($.lt(length$, 0)))
        throw $.$$throw($.ArgumentError$("length"));
      if ($.boolConversionCheck($.lt(start, 0)))
        throw $.$$throw($.RangeError$value(start));
      end = $.add(start, length$);
      $.intTypeCheck(end);
    case 3:
      var accumulator, length$, start, a, end, t1, i;
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(a);
      if ($.boolConversionCheck($.gt(end, t1.get$length(a))))
        throw $.$$throw($.RangeError$value(end));
      for (i = start; $.boolConversionCheck($.lt(i, end)); i = $.intTypeCheck($.add(i, 1)))
        $.CONSTANT.add$1(accumulator, t1.operator$index$1(a, i));
      return accumulator;
  }
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JSON_parse = function(json) {
  return $._JsonParser$($.stringTypeCheck(json)).parseToplevel$0();
};

$.JSON_stringify = function(object) {
  return $._JsonStringifier_stringify(object);
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.intTypeCheck($.getInterceptor$JSStringJSArray(json).get$length(json)), 0);
  t1._JsonParser$1(json);
  return t1;
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), 'is$StringBuffer');
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.stringTypeCheck($.getInterceptor(output).toString$0(output));
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, length$, charCodes, needsEscape, i, charCode, t2, t3;
  $.propertyTypeCheck(sb, 'is$StringBuffer');
  t1 = $.getInterceptor$JSStringJSArray(s);
  length$ = $.intTypeCheck(t1.get$length(s));
  charCodes = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (needsEscape = false, i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    charCode = $.intTypeCheck(t1.charCodeAt$1(s, i));
    if ($.boolConversionCheck($.lt(charCode, 32))) {
      $.CONSTANT.add$1(charCodes, 92);
      switch (charCode) {
        case 8:
          $.CONSTANT.add$1(charCodes, 98);
          break;
        case 9:
          $.CONSTANT.add$1(charCodes, 116);
          break;
        case 10:
          $.CONSTANT.add$1(charCodes, 110);
          break;
        case 12:
          $.CONSTANT.add$1(charCodes, 102);
          break;
        case 13:
          $.CONSTANT.add$1(charCodes, 114);
          break;
        default:
          $.CONSTANT.add$1(charCodes, 117);
          t2 = $.and($.shr(charCode, 12), 15);
          $.intTypeCheck(t2);
          if ($.boolConversionCheck($.lt(t2, 10))) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          $.CONSTANT.add$1(charCodes, $.intTypeCheck(t2));
          t3 = $.and($.shr(charCode, 8), 15);
          $.intTypeCheck(t3);
          if ($.boolConversionCheck($.lt(t3, 10))) {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 48 + t3;
          } else {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 87 + t3;
          }
          $.CONSTANT.add$1(charCodes, $.intTypeCheck(t2));
          t3 = $.and($.shr(charCode, 4), 15);
          $.intTypeCheck(t3);
          if ($.boolConversionCheck($.lt(t3, 10))) {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 48 + t3;
          } else {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 87 + t3;
          }
          $.CONSTANT.add$1(charCodes, $.intTypeCheck(t2));
          t3 = $.and(charCode, 15);
          $.intTypeCheck(t3);
          if ($.boolConversionCheck($.lt(t3, 10))) {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 48 + t3;
          } else {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            t2 = 87 + t3;
          }
          $.CONSTANT.add$1(charCodes, $.intTypeCheck(t2));
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      $.CONSTANT.add$1(charCodes, 92);
      $.CONSTANT.add$1(charCodes, charCode);
      needsEscape = true;
    } else
      $.CONSTANT.add$1(charCodes, charCode);
  }
  sb.add$1(needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.Uri$ = function(uri) {
  var t1, t2;
  t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  t2 = $.getInterceptor$JSStringJSArray(t1);
  return new $.Uri($.Uri__emptyIfNull(t2.operator$index$1(t1, 1)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 2)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 3)), $.Uri__parseIntOrZero(t2.operator$index$1(t1, 4)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 5)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 6)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  $.stringTypeCheck(val);
  return !(val == null) ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  $.stringTypeCheck(val);
  if (!(val == null) && !(val === ""))
    return $.int_parse(val);
  else
    return 0;
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  $.stringTypeCheck(test);
  $.stringTypeCheck(first);
  $.stringTypeCheck(second);
  if (!("" === test)) {
    sb.add$1(first == null ? "null" : first);
    sb.add$1(second == null ? "null" : second);
  }
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$._inject = function(code) {
  var script, t1;
  script = $.ScriptElement_ScriptElement();
  script.set$type("text/javascript");
  script.set$innerHTML(code);
  t1 = $.document().get$body().get$nodes();
  $.getInterceptor$JSArray(t1).add$1(t1, script);
};

$._initialize = function(exception) {
  var t1;
  if (!($._jsPortSync == null))
    return;
  try {
    $._jsPortSync = $.propertyTypeCheck($.window().lookupPort$1("dart-js-context"), 'is$SendPortSync');
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Instantiate a Date with arguments.\n  function instantiateDate(args) {\n    // 7 arguments because the longest constructor is : new Date(year, month,\n    // day, hour, minute, second, millisecond)\n    if (args.length === 0) {\n      return new Date();\n    } else if (args.length === 1) {\n      return new Date(args[0]);\n    } else if (args.length === 2) {\n      return new Date(args[0], args[1]);\n    } else if (args.length === 3) {\n      return new Date(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      return new Date(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      return new Date(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5]);\n    } else if (args.length === 7) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5],\n                     args[6]);\n    }\n    return null;\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    var ret = null;\n    // Date can only be instantiated with the new operator.\n    if (constructor === Date) {\n      ret = instantiateDate(args);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = $.propertyTypeCheck($.window().lookupPort$1("dart-js-context"), 'is$SendPortSync');
  }
  $._jsPortCreate = $.propertyTypeCheck($.window().lookupPort$1("dart-js-create"), 'is$SendPortSync');
  $._jsPortDebug = $.propertyTypeCheck($.window().lookupPort$1("dart-js-debug"), 'is$SendPortSync');
  $._jsPortEquals = $.propertyTypeCheck($.window().lookupPort$1("dart-js-equals"), 'is$SendPortSync');
  $._jsPortInstanceof = $.propertyTypeCheck($.window().lookupPort$1("dart-js-instanceof"), 'is$SendPortSync');
  $._jsPortConvert = $.propertyTypeCheck($.window().lookupPort$1("dart-js-convert"), 'is$SendPortSync');
  $._jsEnterJavaScriptScope = $.propertyTypeCheck($.window().lookupPort$1("dart-js-enter-scope"), 'is$SendPortSync');
  $._jsExitJavaScriptScope = $.propertyTypeCheck($.window().lookupPort$1("dart-js-exit-scope"), 'is$SendPortSync');
  $._jsGlobalize = $.propertyTypeCheck($.window().lookupPort$1("dart-js-globalize"), 'is$SendPortSync');
  $._jsInvalidate = $.propertyTypeCheck($.window().lookupPort$1("dart-js-invalidate"), 'is$SendPortSync');
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  $.window().registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  $.window().registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  if ($.boolConversionCheck($.eq($._depth(), 0)))
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $.propertyTypeCheck($._deserialize($._jsPortSync.callSync$1([])), 'is$Proxy');
};

$._depth = function() {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$._exitScope = function(depth) {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  $.assertHelper($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), depth));
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.map = function(data) {
  return $.propertyTypeCheck($.Proxy_Proxy$_json($.callTypeCheck(data, 'is$Map')), 'is$Proxy');
};

$.Callback$once = function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = new $.Callback(null, null, null);
  t1.Callback$once$1(f);
  return t1;
};

$.Callback$many = function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = new $.Callback(null, null, null);
  t1.Callback$many$1(f);
  return t1;
};

$.Proxy_Proxy$_json = function(data) {
  if ($.boolConversionCheck($.eq($._depth(), 0)))
    throw $.$$throw("Cannot create Proxy out of scope.");
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2;
  if (typeof data === 'object' && data !== null && data.is$Map()) {
    entries = $.List_List(null);
    $.setRuntimeTypeInfo(entries, []);
    for (t1 = data.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); $.boolConversionCheck(t1.get$hasNext());) {
      t2 = t1.next$0();
      $.CONSTANT.add$1(entries, [t2, $.Proxy__serializeDataTree(data.operator$index$1(t2))]);
    }
    return ["map", entries];
  } else if (typeof data === 'object' && data !== null && (data.constructor === Array || data.is$List()))
    return ["list", $.getInterceptor$JSArray(data).map$1(data, new $.Proxy__serializeDataTree_anon())];
  else
    return ["simple", $._serialize(data)];
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy($.propertyTypeCheck(_port, 'is$SendPortSync'), _id);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var result, t1;
  if ($.boolConversionCheck($.eq($._depth(), 0)))
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  result = receiver._port.callSync$1([receiver._liblib2$_id, member, kind, $.getInterceptor$JSArray(args).map$1(args, $._serialize)]);
  t1 = $.getInterceptor$JSStringJSArray(result);
  switch (t1.operator$index$1(result, 0)) {
    case "return":
      return $._deserialize(t1.operator$index$1(result, 1));
    case "throws":
      throw $.$$throw($._deserialize(t1.operator$index$1(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$._FunctionProxy$_internal = function(port, id) {
  var t1 = new $._FunctionProxy(null, $.propertyTypeCheck(port, 'is$SendPortSync'), id);
  t1._FunctionProxy$_internal$2(port, id);
  return t1;
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4, t5;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List(null, $.String);
  $.setRuntimeTypeInfo(t3, [$.String]);
  t4 = $.List_List(null, $.$int);
  $.setRuntimeTypeInfo(t4, [$.$int]);
  t5 = $.Set_Set($.String);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, $.callTypeCheck(t1, 'is$Map'), t2, $.propertyTypeCheck(t5, 'is$Set'), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$._serialize = function(message) {
  var t1, proxy;
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  else {
    if (typeof message === 'object' && message !== null && message.is$Element()) {
      t1 = message.ownerDocument;
      t1 = $.boolConversionCheck(t1 == null || $.boolConversionCheck($.eq(t1, $.document())));
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return ["domref", $._serializeElement(message)];
    else if (typeof message === 'object' && message !== null && !!message.is$Callback)
      return message.get$_serialized();
    else if (typeof message === 'function' || typeof message === 'object' && message !== null && !!message.is$Function)
      if ($.boolConversionCheck($.get$_FunctionProxy__map().containsKey$1(message))) {
        t1 = $.get$_FunctionProxy__map();
        proxy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, message);
        return ["funcref", proxy.get$_liblib2$_id(), proxy.get$_port()];
      } else
        throw $.$$throw("A function must be converted to a Callback before it can be serialized.");
    else if (typeof message === 'object' && message !== null && !!message.is$Proxy)
      return ["objref", message._liblib2$_id, message._port];
    else {
      t1 = $.get$_proxiedObjectTable();
      return ["objref", $.getInterceptor$JSArray(t1).add$1(t1, message), $.get$_proxiedObjectTable().get$sendPort()];
    }
  }
};

$._deserialize = function(message) {
  var t1, t2, t3;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  t3 = $.getInterceptor$JSStringJSArray(message);
  switch (t3.operator$index$1(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement(t3.operator$index$1(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$._serializeElement = function(e) {
  var t1, id, top$, oldValue, newValue, t2;
  $.callTypeCheck(e, 'is$Element');
  if ($.boolConversionCheck(e.get$attributes().containsKey$1("data-dart_id"))) {
    t1 = e.get$attributes();
    id = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_id");
  } else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.intTypeCheck($.add(t1, 1));
    id = "dart-" + $.S(t1);
    $.indexSet(e.get$attributes(), "data-dart_id", id);
  }
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if ($.boolConversionCheck(top$.get$attributes().containsKey$1("data-dart_temporary_attached"))) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).concat$1(oldValue, "a");
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        break;
      }
      if (top$.get$parent() == null) {
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", "a");
        t1 = $.document().get$documentElement().get$elements();
        $.getInterceptor$JSArray(t1).add$1(t1, top$);
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return id;
};

$._deserializeElement = function(id) {
  var list, t1, e, top$, oldValue, newValue, t2;
  list = $.queryAll("[data-dart_id=\"" + $.S(id) + "\"]");
  t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.boolConversionCheck($.gt(t1.get$length(list), 1)))
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.boolConversionCheck($.eq(t1.get$length(list), 0)))
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = t1.operator$index$1(list, 0);
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if ($.boolConversionCheck(top$.get$attributes().containsKey$1("data-dart_temporary_attached"))) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).substring$1(oldValue, 1);
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        t1 = top$.get$attributes();
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        if ($.boolConversionCheck($.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))) {
          top$.get$attributes().remove$1("data-dart_temporary_attached");
          top$.remove$0();
        }
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return $.callTypeCheck(e, 'is$Element');
};

$.SafeHtml$unsafe = function(_html) {
  return new $.SafeHtml(_html);
};

$.removeNodes = function(start, end) {
  var parent$, prev;
  $.callTypeCheck(start, 'is$Node');
  $.callTypeCheck(end, 'is$Node');
  parent$ = !(end == null) ? end.get$parentNode() : null;
  if (parent$ == null)
    return start;
  for (; !$.eqB(start, end); end = prev) {
    prev = end.get$previousNode();
    parent$.$$dom_removeChild$1(end);
    $.callTypeCheck(prev, 'is$Node');
  }
  return start;
};

$.updateBinding = function(value, node, stringValue) {
  var isSafeHtml, node0;
  $.callTypeCheck(node, 'is$Node');
  $.stringTypeCheck(stringValue);
  isSafeHtml = typeof value === 'object' && value !== null && !!value.is$SafeHtml;
  if (stringValue == null)
    stringValue = $.stringTypeCheck($.getInterceptor(value).toString$0(value));
  if (!isSafeHtml && typeof node === 'object' && node !== null && node.is$Text())
    node.set$text(stringValue);
  else {
    node0 = $.callTypeCheck(isSafeHtml ? $.Element_Element$html(stringValue) : $.Text_Text(stringValue), 'is$Node');
    node.replaceWith$1(node0);
    node = node0;
  }
  return node;
};

$.insertAllBefore = function(parent$, reference, nodes) {
  $.CONSTANT.forEach$1(nodes, new $.insertAllBefore_anon($.callTypeCheck(parent$, 'is$Node'), $.callTypeCheck(reference, 'is$Node')));
};

$.sanitizeUri = function(uri) {
  if (typeof uri === 'object' && uri !== null && !!uri.is$SafeUri)
    return $.stringTypeCheck(uri.toString$0());
  uri = $.getInterceptor(uri).toString$0(uri);
  return $.stringTypeCheck($._isSafeUri(uri) ? uri : "#");
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$($.stringTypeCheck(uri)).scheme;
  if (scheme === "")
    return true;
  t1 = $.getInterceptor$JSString(scheme);
  return $.boolConversionCheck($.CONSTANT.contains$1($.CONSTANT7, t1.toLowerCase$0(scheme))) || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.watch = function(target, callback, debugName, exception) {
  var isList, t1, exp, e, trace, watcher;
  $.propertyTypeCheck(callback, 'is$ValueWatcher');
  $.stringTypeCheck(debugName);
  if (callback == null)
    return $.propertyTypeCheck(new $.watch_anon(), 'is$WatcherDisposer');
  if ($._watchers == null)
    $._watchers = [];
  isList = false;
  t1 = target;
  if (typeof t1 === 'object' && t1 !== null && !!t1.is$Handle)
    exp = $.functionTypeCheck($.propertyTypeCast(target, 'is$Handle').get$_getter());
  else {
    t1 = target;
    if (typeof t1 === 'function' || typeof t1 === 'object' && t1 !== null && !!t1.is$Function) {
      exp = $.functionTypeCheck(target);
      try {
        t1 = target.call$0();
        isList = typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.print("error: evaluating " + $.S(!(debugName == null) ? debugName : "<unnamed>") + " " + "watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
      }

    } else {
      t1 = target;
      if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List())) {
        exp = $.functionTypeCheck(new $.watch_anon0(target));
        isList = true;
      } else
        exp = null;
    }
  }
  watcher = $.boolConversionCheck(isList) ? $._ListWatcher$(exp, callback, debugName) : $._Watcher$(exp, callback, debugName);
  t1 = $._watchers;
  $.getInterceptor$JSArray(t1).add$1(t1, watcher);
  return $.propertyTypeCheck(new $.watch_anon1(watcher), 'is$WatcherDisposer');
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res = $.watch(exp, callback, debugName);
  if (typeof exp === 'function' || typeof exp === 'object' && exp !== null && !!exp.is$Function)
    callback.call$1($.WatchEvent$(null, exp.call$0()));
  else
    callback.call$1($.WatchEvent$(null, exp));
  return res;
};

$.WatchEvent$ = function(oldValue, newValue) {
  return new $.WatchEvent(oldValue, newValue);
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher($.stringTypeCheck(debugName), $.propertyTypeCheck(_getter, 'is$Getter'), _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$._unregister = function(watcher) {
  var t1, index;
  $.propertyTypeCheck(watcher, 'is$_Watcher');
  t1 = $._watchers;
  index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, watcher);
  if (!$.eqB(index, -1)) {
    t1 = $._watchers;
    $.getInterceptor$JSArray(t1).removeRange$2(t1, index, 1);
  }
};

$.dispatch = function() {
  var total, t1, dirty, total0;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $._watchers, t1 = $.getInterceptor$JSArray(t1).iterator$0(t1), dirty = false; $.boolConversionCheck(t1.get$hasNext());)
      if ($.boolConversionCheck(t1.next$0().compareAndNotify$0()))
        dirty = true;
    if (dirty) {
      total0 = $.intTypeCheck($.add(total, 1));
      t1 = $.boolConversionCheck($.lt(total, 10));
      total = total0;
    } else
      t1 = false;
  } while ($.boolConversionCheck(t1));
  if (total === 10)
    $.print("Possible loop in watchers propagation, stopped dispatch.");
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1;
  $.stringTypeCheck(debugName);
  t1 = new $._ListWatcher(debugName, $.propertyTypeCheck(getter, 'is$Getter'), callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName);
  return t1;
};

$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.toStringWrapper.is$TimeoutHandler = true;
$.toStringWrapper.is$WatcherDisposer = true;
$.toStringWrapper.is$VoidCallback = true;
$.toStringWrapper.is$Getter = true;
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$._serialize.is$EventListener = true;
$._serialize.is$ValueWatcher = true;
$._serialize.is$ErrorCallback = true;
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$._deserialize.is$EventListener = true;
$._deserialize.is$ValueWatcher = true;
$._deserialize.is$ErrorCallback = true;
Isolate.$finishClasses($$);
$$ = {};
$.$int = {builtin$cls: '$int', is$$int: true, is$num: true};
$.ClientRect = {builtin$cls: 'ClientRect'};
$.List = {builtin$cls: 'List', is$List: true};
$._ManagerStub = {builtin$cls: '_ManagerStub', is$_ManagerStub: true};
$.Element = {builtin$cls: 'Element', is$Node: true, is$Element: true};
$.Entry = {builtin$cls: 'Entry', is$Entry: true};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.Map = {builtin$cls: 'Map'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.Node = {builtin$cls: 'Node', is$Node: true};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult', is$SpeechInputResult: true};
$.CssRule = {builtin$cls: 'CssRule', is$CssRule: true};
$.Match = {builtin$cls: 'Match', is$Match: true};
$.File = {builtin$cls: 'File', is$File: true};
$.Length = {builtin$cls: 'Length'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult', is$SpeechRecognitionResult: true};
$.Transform = {builtin$cls: 'Transform'};
$.CssValue = {builtin$cls: 'CssValue', is$CssValue: true};
$.ReceivePort = {builtin$cls: 'ReceivePort', is$ReceivePort: true};
$.SendPort = {builtin$cls: 'SendPort'};
$.num = {builtin$cls: 'num', is$num: true};
$.String = {builtin$cls: 'String', is$String: true};
$.Number = {builtin$cls: 'Number'};
$.StyleSheet = {builtin$cls: 'StyleSheet', is$StyleSheet: true};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.ElementInstance = {builtin$cls: 'ElementInstance', is$ElementInstance: true};
$.Gamepad = {builtin$cls: 'Gamepad'};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.Function = {builtin$cls: 'Function', is$Function: true};
$.MediaStream = {builtin$cls: 'MediaStream', is$MediaStream: true};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.Touch = {builtin$cls: 'Touch'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$.Future = {builtin$cls: 'Future'};
$._IsolateContext.is$_IsolateContext = true;
$._IsolateEvent.is$_IsolateEvent = true;
$._KeyValuePair.is$_KeyValuePair = true;
$.ReceivePortSync.is$ReceivePortSync = true;
$.DoubleLinkedQueueEntry.is$DoubleLinkedQueueEntry = true;
$.CONSTANT2 = new Isolate.$isolateProperties.JSInt();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT9 = Isolate.makeConstantList([]);
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT0 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT5 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT9);
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT10 = Isolate.makeConstantList(["body", "head", "caption", "td", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CONSTANT6 = new Isolate.$isolateProperties.ConstantMap(11, {body: "html", head: "html", caption: "table", td: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, Isolate.$isolateProperties.CONSTANT10);
$.CONSTANT8 = new Isolate.$isolateProperties.Object();
$.CONSTANT7 = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.CONSTANT = new Isolate.$isolateProperties.JSArray();
$.CONSTANT4 = new Isolate.$isolateProperties.JSNumber();
$.immediate = true;
$.displayName = "Me";
$.tagline = null;
$.Primitives_hashCodeSeed = 0;
$._jsPortSync = null;
$._jsPortCreate = null;
$.pic = null;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$.aboutMe = null;
$._jsExitJavaScriptScope = null;
$.Primitives_mirrorsEnabled = false;
$._jsGlobalize = null;
$.Uri__COMPONENT_SCHEME = 1;
$._jsInvalidate = null;
$._jsPortDebug = null;
$._dartEnterDartScope = null;
$.Uri__COMPONENT_USER_INFO = 2;
$._dartExitDartScope = null;
$.Uri__COMPONENT_DOMAIN = 3;
$.Uri__COMPONENT_PATH = 5;
$.Uri__COMPONENT_PORT = 4;
$.Uri__COMPONENT_FRAGMENT = 7;
$.Uri__COMPONENT_QUERY_DATA = 6;
$._localNextElementId = 0;
$._DART_ID = "data-dart_id";
$._DART_TEMPORARY_ATTACHED = "data-dart_temporary_attached";
$._cachedBrowserPrefix = null;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$._JsonParser_BACKSPACE = 8;
$._JsonParser_TAB = 9;
$._JsonParser_NEW_LINE = 10;
$._JsonParser_FORM_FEED = 12;
$._JsonParser_SPACE = 32;
$._JsonParser_CARRIAGE_RETURN = 13;
$._JsonParser_QUOTE = 34;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT3;
$._JsonParser_PLUS = 43;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._JsonParser_COMMA = 44;
$._JsonParser_MINUS = 45;
$._JsonParser_DOT = 46;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_0 = 48;
$._JsonParser_CHAR_1 = 49;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_CHAR_3 = 51;
$._JsonParser_CHAR_4 = 52;
$._JsonParser_CHAR_5 = 53;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_CHAR_9 = 57;
$._JsonParser_COLON = 58;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_LBRACKET = 91;
$._JsonParser_RBRACKET = 93;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CHAR_F = 102;
$._JsonParser_CHAR_E = 101;
$._JsonParser_CHAR_N = 110;
$._JsonParser_CHAR_R = 114;
$._JsonParser_CHAR_T = 116;
$._JsonParser_CHAR_U = 117;
$._JsonParser_LBRACE = 123;
$._JsonParser_RBRACE = 125;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_NUMBER_LITERAL = 45;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_WHITESPACE = 32;
$._JsonParser_TRUE_LITERAL = 116;
$._JsonParser_LAST_ASCII = 125;
$._JsonParser_NULL_STRING = "null";
$._JsonParser_TRUE_STRING = "true";
$._JsonParser_FALSE_STRING = "false";
$._JsonParser_tokens = null;
$._watchers = null;
$._SAFE_SCHEMES = Isolate.$isolateProperties.CONSTANT7;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.JSInvocationMirror_SETTER = 2;
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string')
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string')
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'number') {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == 'string')
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == 'function')
    return $.JSFunction.prototype;
  if (typeof receiver == 'boolean')
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'authBtn', 'authBtn', 'get$authBtn', function() {
  return $.callTypeCheck($.query("#authorize"), 'is$ButtonElement');
});
Isolate.$lazy($, '_START_TAG_REGEXP', '_START_TAG_REGEXP', 'get$_START_TAG_REGEXP', function() {
  return $.RegExp_RegExp("<(\\w+)", false, false);
});
Isolate.$lazy($, '_proxiedObjectTable', '_proxiedObjectTable', 'get$_proxiedObjectTable', function() {
  return $._ProxiedObjectTable$();
});
Isolate.$lazy($, '_splitRe', 'Uri__splitRe', 'get$Uri__splitRe', function() {
  return $.propertyTypeCheck($.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, false), 'is$RegExp');
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
Isolate.$lazy($, 'urls', 'urls', 'get$urls', function() {
  return [];
});
Isolate.$lazy($, '_map', '_FunctionProxy__map', 'get$_FunctionProxy__map', function() {
  return $.Map_Map($.Function, $._FunctionProxy);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$LengthList: function() { return false; },
 is$NotificationCenter: function() { return false; },
 is$RtcIceCandidate: function() { return false; },
 is$SpeechRecognitionResult: function() { return false; },
 is$Touch: function() { return false; },
 is$AudioDestinationNode: function() { return false; },
 is$RtcSessionDescription: function() { return false; },
 is$ButtonElement: function() { return false; },
 is$Coordinates: function() { return false; },
 is$SourceBuffer: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$TableSectionElement: function() { return false; },
 is$Text: function() { return false; },
 is$BatteryManager: function() { return false; },
 is$PreserveAspectRatio: function() { return false; },
 is$HeadElement: function() { return false; },
 is$Screen: function() { return false; },
 is$ParagraphElement: function() { return false; },
 is$SpeechGrammar: function() { return false; },
 is$Request: function() { return false; },
 is$DomError: function() { return false; },
 is$AnimatedString: function() { return false; },
 is$RtcDataChannel: function() { return false; },
 is$Gamepad: function() { return false; },
 is$EventTarget: function() { return false; },
 is$FileSystemSync: function() { return false; },
 is$MediaKeyError: function() { return false; },
 is$File: function() { return false; },
 is$PerformanceNavigation: function() { return false; },
 is$RgbColor: function() { return false; },
 is$Performance: function() { return false; },
 is$Map: function() { return false; },
 is$Point: function() { return false; },
 is$DomMimeType: function() { return false; },
 is$AnimatedTransformList: function() { return false; },
 is$SvgElement: function() { return false; },
 is$PathSegList: function() { return false; },
 is$StyleSheet: function() { return false; },
 is$AnchorElement: function() { return false; },
 is$ClientRect: function() { return false; },
 is$Entry: function() { return false; },
 is$WorkerContext: function() { return false; },
 is$MediaStreamTrackList: function() { return false; },
 is$PathSeg: function() { return false; },
 is$StorageInfo: function() { return false; },
 is$ObjectStore: function() { return false; },
 is$AnimatedLength: function() { return false; },
 is$HtmlCollection: function() { return false; },
 is$FileError: function() { return false; },
 is$ElementInstance: function() { return false; },
 is$MediaStreamTrack: function() { return false; },
 is$WindowBase: function() { return false; },
 is$MediaError: function() { return false; },
 is$ImageData: function() { return false; },
 is$TableCaptionElement: function() { return false; },
 is$SqlResultSetRowList: function() { return false; },
 is$FileList: function() { return false; },
 is$DomPlugin: function() { return false; },
 is$History: function() { return false; },
 is$AudioParam: function() { return false; },
 is$TextTrackCue: function() { return false; },
 is$NumberList: function() { return false; },
 is$CanvasElement: function() { return false; },
 is$RtcStatsElement: function() { return false; },
 is$DomImplementation: function() { return false; },
 is$AudioContext: function() { return false; },
 is$CssRule: function() { return false; },
 is$NodeFilter: function() { return false; },
 is$AnimatedEnumeration: function() { return false; },
 is$AudioGain: function() { return false; },
 is$Collection: function() { return false; },
 is$ScriptElement: function() { return false; },
 is$DataTransferItemList: function() { return false; },
 is$SvgSvgElement: function() { return false; },
 is$HttpRequestUpload: function() { return false; },
 is$MediaController: function() { return false; },
 is$ViewSpec: function() { return false; },
 is$WorkerLocation: function() { return false; },
 is$Database: function() { return false; },
 is$PagePopupController: function() { return false; },
 is$Crypto: function() { return false; },
 is$CssPrimitiveValue: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$DomMimeTypeArray: function() { return false; },
 is$HtmlDocument: function() { return false; },
 is$TransformList: function() { return false; },
 is$Angle: function() { return false; },
 is$List: function() { return false; },
 is$BarInfo: function() { return false; },
 is$Event: function() { return false; },
 is$DomPluginArray: function() { return false; },
 is$AnimatedRect: function() { return false; },
 is$DirectoryEntry: function() { return false; },
 is$Uint8Array: function() { return false; },
 is$PointList: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$TextTrack: function() { return false; },
 is$AudioBuffer: function() { return false; },
 is$MessagePort: function() { return false; },
 is$_ManagerStub: function() { return false; },
 is$Element: function() { return false; },
 is$AnimatedAngle: function() { return false; },
 is$TimeRanges: function() { return false; },
 is$ImageElement: function() { return false; },
 is$Transaction: function() { return false; },
 is$MediaList: function() { return false; },
 is$NamedNodeMap: function() { return false; },
 is$PerformanceTiming: function() { return false; },
 is$SpeechGrammarList: function() { return false; },
 is$ApplicationCache: function() { return false; },
 is$StringList: function() { return false; },
 is$WorkerNavigator: function() { return false; },
 is$ScriptProfileNode: function() { return false; },
 is$CssStyleSheet: function() { return false; },
 is$AnimatedBoolean: function() { return false; },
 is$MediaStream: function() { return false; },
 is$DirectoryEntrySync: function() { return false; },
 is$AnimatedPreserveAspectRatio: function() { return false; },
 is$UListElement: function() { return false; },
 is$EntrySync: function() { return false; },
 is$AnimatedInteger: function() { return false; },
 is$Rect: function() { return false; },
 is$TextTrackCueList: function() { return false; },
 is$Node: function() { return false; },
 is$AudioListener: function() { return false; },
 is$BodyElement: function() { return false; },
 is$Window: function() { return false; },
 is$Float32Array: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Document: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$ShadowRoot: function() { return false; },
 is$DomSettableTokenList: function() { return false; },
 is$Clipboard: function() { return false; },
 is$ValidityState: function() { return false; },
 is$AnimatedLengthList: function() { return false; },
 is$Uint8ClampedArray: function() { return false; },
 is$UseElement: function() { return false; },
 is$SpeechInputResult: function() { return false; },
 is$CssStyleDeclaration: function() { return false; },
 is$MemoryInfo: function() { return false; },
 is$FileSystem: function() { return false; },
 is$FormElement: function() { return false; },
 is$TouchList: function() { return false; },
 is$Number: function() { return false; },
 is$Transform: function() { return false; },
 is$MediaElement: function() { return false; },
 is$JavaScriptCallFrame: function() { return false; },
 is$AnimatedNumberList: function() { return false; },
 is$Navigator: function() { return false; },
 is$Storage: function() { return false; },
 is$Iterable: function() { return false; },
 is$Blob: function() { return false; },
 is$CssValue: function() { return false; },
 is$DivElement: function() { return false; },
 is$AnimatedNumber: function() { return false; },
 is$TextTrackList: function() { return false; },
 is$KeyRange: function() { return false; },
 is$CustomEvent: function() { return false; },
 is$StyleMedia: function() { return false; },
 is$Matrix: function() { return false; },
 is$Geolocation: function() { return false; },
 is$LIElement: function() { return false; },
 is$SourceBufferList: function() { return false; },
 is$Length: function() { return false; }
});

$.$defineNativeClass('Worker', {
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return $.voidTypeCheck(this.postMessage(msg));
},
 is$_ManagerStub: function() { return true; }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.AbstractWorkerEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {
 set$href: function(v) { this.href = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 toString$0: function() {
  return this.toString();
},
 is$AnchorElement: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.ApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$ApplicationCache: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {
 set$href: function(v) { this.href = $.stringTypeCheck(v);}
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('BarInfo', {
 is$BarInfo: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', {
 set$href: function(v) { this.href = $.stringTypeCheck(v);}
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$BatteryManager: function() { return true; }
});

$.$defineNativeClass('Blob', {
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$BodyElement: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"":"value>",
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 set$value: function(v) { this.value = $.stringTypeCheck(v);},
 is$ButtonElement: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', {
 is$CanvasElement: function() { return true; }
});

$.$defineNativeClass('CharacterData', {"":"length>",
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {
 is$ClientRect: function() { return true; }
});

$.$defineNativeClass('Clipboard', {
 is$Clipboard: function() { return true; }
});

$.$defineNativeClass('Coordinates', {
 is$Coordinates: function() { return true; }
});

$.$defineNativeClass('Crypto', {
 is$Crypto: function() { return true; }
});

$.$defineNativeClass('CSSFontFaceRule', {"":"style>"
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"":"style>"
});

$.$defineNativeClass('WebKitCSSMatrix', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSPageRule', {"":"style>"
});

$.$defineNativeClass('CSSPrimitiveValue', {
 is$CssPrimitiveValue: function() { return true; }
});

$.$defineNativeClass('CSSRule', {
 is$CssRule: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', {"":"length>",
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return $.stringTypeCheck(!(propValue == null) ? propValue : "");
},
 setProperty$3: function(propertyName, value, priority) {
  $.stringTypeCheck(propertyName);
  $.stringTypeCheck(value);
  this.setProperty(propertyName, value, $.stringTypeCheck(priority));
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return $.stringTypeCheck(this.getPropertyValue$1("clear"));
},
 clear$0: function() {
  return this.get$clear().call$0();
},
 set$display: function(value) {
  this.setProperty$3("display", $.stringTypeCheck(value), "");
},
 get$filter: function() {
  return $.stringTypeCheck(this.getPropertyValue$1($.S($._browserPrefix()) + "filter"));
},
 filter$1: function(arg0) {
  return this.get$filter().call$1(arg0);
},
 set$src: function(value) {
  this.setProperty$3("src", $.stringTypeCheck(value), "");
},
 is$CssStyleDeclaration: function() { return true; }
});

$.$defineNativeClass('CSSStyleRule', {"":"style>"
});

$.$defineNativeClass('CSSStyleSheet', {
 is$CssStyleSheet: function() { return true; }
});

$.$defineNativeClass('CSSValue', {
 is$CssValue: function() { return true; }
});

$.$defineNativeClass('CustomEvent', {"":"detail>",
 $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
  return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
},
 is$CustomEvent: function() { return true; }
});

$.$defineNativeClass('DataTransferItemList', {"":"length>",
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,$.stringTypeCheck(type));
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
},
 is$DataTransferItemList: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  t1 = !t1;
  $.listTypeCheck(messagePorts);
  if (t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DirectoryEntry', {
 is$DirectoryEntry: function() { return true; }
});

$.$defineNativeClass('DirectoryEntrySync', {
 is$DirectoryEntrySync: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', {
 is$DivElement: function() { return true; }
});

$.$defineNativeClass('Document', {"":"$$dom_body:body~,documentElement>",
 get$on: function() {
  return $.DocumentEvents$(this);
},
 get$window: function() {
  return $._convertNativeToDart_Window(this.defaultView);
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_createEvent$1: function(eventType) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_createEvent$1')) {
    return this.createEvent(eventType);
  } else {
    return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  }
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById($.stringTypeCheck(elementId));
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName($.stringTypeCheck(elementName));
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.boolConversionCheck($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors)))
    return $.callTypeCheck(this.$$dom_getElementById$1($.CONSTANT1.substring$1(selectors, 1)), 'is$Element');
  return $.callTypeCheck(this.$$dom_querySelector$1(selectors), 'is$Element');
},
 queryAll$1: function(selectors) {
  var mutableMatches, t1, len, copyOfMatches, i, t2;
  if ($.boolConversionCheck($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors))) {
    mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
    t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
    len = t1.get$length(mutableMatches);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this.queryAll$1$bailout(1, mutableMatches, t1, len);
    copyOfMatches = $.List_List(len, $.Element);
    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
    for (i = 0; i < len; ++i) {
      t2 = t1.operator$index$1(mutableMatches, i);
      if (i >= copyOfMatches.length)
        throw $.ioore(i);
      copyOfMatches[i] = t2;
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.boolConversionCheck($.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors))) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
    len = t1.get$length(mutableMatches);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this.queryAll$1$bailout(2, mutableMatches, t1, len);
    copyOfMatches = $.List_List(len, $.Element);
    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
    for (i = 0; i < len; ++i) {
      t2 = t1.operator$index$1(mutableMatches, i);
      if (i >= copyOfMatches.length)
        throw $.ioore(i);
      copyOfMatches[i] = t2;
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      len = env2;
      t1 = env1;
      mutableMatches = env0;
      break;
    case 2:
      len = env2;
      t1 = env1;
      mutableMatches = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, t1, len, copyOfMatches, i, t2;
      if (state0 === 1 || state0 === 0 && $.boolConversionCheck($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors)))
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
            t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
            len = t1.get$length(mutableMatches);
            $.intTypeCheck(len);
          case 1:
            state0 = 0;
            copyOfMatches = $.List_List(len, $.Element);
            $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
            for (i = 0; $.boolConversionCheck($.lt(i, len)); ++i) {
              t2 = t1.operator$index$1(mutableMatches, i);
              if (i !== (i | 0))
                throw $.iae(i);
              if (i < 0 || i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t2;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          case 2:
            if (state0 === 2 || state0 === 0 && $.boolConversionCheck($.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors)))
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                  t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
                  len = t1.get$length(mutableMatches);
                  $.intTypeCheck(len);
                case 2:
                  state0 = 0;
                  copyOfMatches = $.List_List(len, $.Element);
                  $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                  for (i = 0; $.boolConversionCheck($.lt(i, len)); ++i) {
                    t1 = t1.operator$index$1(mutableMatches, i);
                    if (i !== (i | 0))
                      throw $.iae(i);
                    if (i < 0 || i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
},
 is$Document: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', {
 get$elements: function() {
  return $.listTypeCheck(this.get$children());
},
 get$children: function() {
  if (this._children == null)
    this._children = $.FilteredElementList$(this);
  return $.listTypeCheck(this._children);
},
 query$1: function(selectors) {
  return $.callTypeCheck(this.$$dom_querySelector$1(selectors), 'is$Element');
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHtml: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHtml')) {
    var t1, e, nodes;
    $.stringTypeCheck(value);
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    e = $.Element_Element$tag("div");
    e.set$innerHtml(value);
    nodes = $.List_List$from(e.get$nodes());
    $.setRuntimeTypeInfo(nodes, []);
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
  } else {
    return Object.prototype.set$innerHtml.call(this, value);
  }
},
 get$id: function() {
  return "";
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CONSTANT5;
},
 get$style: function() {
  return $.callTypeCheck($.Element_Element$tag("div").get$style(), 'is$CssStyleDeclaration');
},
 click$0: function() {
},
 get$click: function() {
  return new $.BoundClosure(this, 'click$0');
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DOMError', {
 is$DomError: function() { return true; }
});

$.$defineNativeClass('DOMException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMImplementation', {
 is$DomImplementation: function() { return true; }
});

$.$defineNativeClass('MimeType', {
 is$DomMimeType: function() { return true; }
});

$.$defineNativeClass('MimeTypeArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$DomMimeType');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$DomMimeType');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.DomMimeType);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$DomMimeType');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$DomMimeType');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$DomMimeType'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$DomMimeType'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$DomMimeType');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$DomMimeTypeArray: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"":"length>",
 is$DomPlugin: function() { return true; }
});

$.$defineNativeClass('PluginArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$DomPlugin');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$DomPlugin');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.DomPlugin);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$DomPlugin');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$DomPlugin');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$DomPlugin'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$DomPlugin'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$DomPlugin');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$DomPluginArray: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);},
 is$DomSettableTokenList: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.String);
},
 add$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.stringTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.stringTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains($.stringTypeCheck(string));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {"":"length>",
 contains$1: function(token) {
  return this.contains($.stringTypeCheck(token));
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Element', {"":"$$dom_children:children~,id>,$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~,style>",
 set$innerHtml: function(v) { this.innerHTML = $.stringTypeCheck(v);},
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$innerHTML: function(value) {
  this.set$innerHtml($.stringTypeCheck(value));
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
    return $.listTypeCheck(this.get$children());
  } else {
    return Object.prototype.get$elements.call(this);
  }
},
 get$children: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$children')) {
    return $._ChildrenElementList$_wrap(this);
  } else {
    return Object.prototype.get$children.call(this);
  }
},
 set$children: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$children')) {
    var copy, children, t1;
    copy = $.List_List$from($.listTypeCheck(value));
    $.setRuntimeTypeInfo(copy, []);
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, copy);
  } else {
    return Object.prototype.set$children.call(this, value);
  }
},
 query$1: function(selectors) {
  return $.callTypeCheck(this.$$dom_querySelector$1(selectors), 'is$Element');
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.ElementEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 click$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('click$0')) {
    return this.click();
  } else {
    return Object.prototype.click$0.call(this);
  }
},
 get$click: function() {
  return new $.BoundClosure0(this, 'click$0');
},
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('Entry', {
 remove$2: function(successCallback, errorCallback) {
  $.propertyTypeCheck(successCallback, 'is$VoidCallback');
  $.propertyTypeCheck(errorCallback, 'is$ErrorCallback');
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
},
 is$Entry: function() { return true; }
});

$.$defineNativeClass('EntrySync', {
 remove$0: function() {
  return this.remove();
},
 is$EntrySync: function() { return true; }
});

$.$defineNativeClass('Event', {
 is$Event: function() { return true; }
});

$.$defineNativeClass('EventException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.Events$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, 'is$EventListener');
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }
},
 $$dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_dispatchEvent$1')) {
    return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
  } else {
    return Object.prototype.$$dom_dispatchEvent$1.call(this, event);
  }
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, 'is$EventListener');
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
},
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLFieldSetElement', {"":"elements>"
});

$.$defineNativeClass('File', {
 is$File: function() { return true; }
});

$.$defineNativeClass('FileError', {
 is$FileError: function() { return true; }
});

$.$defineNativeClass('FileException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$File');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.File);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$File'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$File'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$File');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileReader', {
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMFileSystem', {
 is$FileSystem: function() { return true; }
});

$.$defineNativeClass('DOMFileSystemSync', {
 is$FileSystemSync: function() { return true; }
});

$.$defineNativeClass('FileWriter', {"":"length>",
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"":"length>"
});

$.$defineNativeClass('Float32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.numTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.num);
},
 add$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.numTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.numTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.numTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$Float32Array: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.numTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.num);
},
 add$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.numTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.numTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.numTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {"":"length>",
 reset$0: function() {
  return this.reset();
},
 is$FormElement: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);}
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
}
});

$.$defineNativeClass('Gamepad', {"":"id>",
 is$Gamepad: function() { return true; }
});

$.$defineNativeClass('Geolocation', {
 is$Geolocation: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', {
 is$HeadElement: function() { return true; }
});

$.$defineNativeClass('History', {"":"length>",
 is$History: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Node');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Node'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Node');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {
 get$length: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$length')) {
    return this.length;
  } else {
    return Object.prototype.get$length.call(this);
  }
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Node');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Node'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$length')) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  } else {
    return Object.prototype.set$length.call(this, value);
  }
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Node');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$HtmlCollection: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {
 get$body: function() {
  return $.callTypeCheck($.document().get$$$dom_body(), 'is$BodyElement');
},
 is$HtmlDocument: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = $.intTypeCheck(value);
},
 remove$1: function(index) {
  return this.remove($.intTypeCheck(index));
}
});

$.$defineNativeClass('XMLHttpRequest', {
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$HttpRequestUpload: function() { return true; }
});

$.$defineNativeClass('HTMLIFrameElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);}
});

$.$defineNativeClass('ImageData', {
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 complete$1: function(arg0) {
  return this.complete.call$1(arg0);
},
 is$ImageElement: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"":"value>",
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 set$value: function(v) { this.value = $.stringTypeCheck(v);},
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Int16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {
 is$JavaScriptCallFrame: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"":"value>",
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 set$value: function(v) { this.value = $.intTypeCheck(v);},
 is$LIElement: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {
 set$href: function(v) { this.href = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('LocalMediaStream', {
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Location', {
 set$href: function(v) { this.href = $.stringTypeCheck(v);},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MediaController', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MediaController: function() { return true; }
});

$.$defineNativeClass('HTMLMediaElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 is$MediaElement: function() { return true; }
});

$.$defineNativeClass('MediaError', {
 is$MediaError: function() { return true; }
});

$.$defineNativeClass('MediaKeyError', {
 is$MediaKeyError: function() { return true; }
});

$.$defineNativeClass('MediaList', {"":"length>",
 is$MediaList: function() { return true; }
});

$.$defineNativeClass('MediaSource', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MediaStream: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MediaStreamTrack: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackList', {"":"length>",
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add($.callTypeCheck(track, 'is$MediaStreamTrack'));
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 remove$1: function(track) {
  return this.remove($.callTypeCheck(track, 'is$MediaStreamTrack'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MediaStreamTrackList: function() { return true; }
});

$.$defineNativeClass('MemoryInfo', {
 is$MemoryInfo: function() { return true; }
});

$.$defineNativeClass('MessageEvent', {"":"ports>"
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  t1 = !t1;
  $.listTypeCheck(messagePorts);
  if (t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MessagePort: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);}
});

$.$defineNativeClass('MutationEvent', {"":"newValue>"
});

$.$defineNativeClass('NamedNodeMap', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Node');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Node'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Node');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$NamedNodeMap: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"":"userAgent>",
 is$Navigator: function() { return true; }
});

$.$defineNativeClass('Node', {"":"$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,nextNode:nextSibling~,parent:parentElement~,parentNode>,previousNode:previousSibling~",
 set$text: function(v) { this.textContent = $.stringTypeCheck(v);},
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
    var t1 = this.parentNode;
    if (!(t1 == null))
      $.callTypeCheck(t1, 'is$Node').$$dom_removeChild$1(this);
  } else {
    return Object.prototype.remove$0.call(this);
  }
},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  $.callTypeCheck(otherNode, 'is$Node');
  try {
    parent$ = $.callTypeCheck(this.parentNode, 'is$Node');
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild($.callTypeCheck(newChild, 'is$Node'));
},
 contains$1: function(other) {
  return this.contains($.callTypeCheck(other, 'is$Node'));
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 insertBefore$2: function(newChild, refChild) {
  return this.insertBefore($.callTypeCheck(newChild, 'is$Node'),$.callTypeCheck(refChild, 'is$Node'));
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild($.callTypeCheck(oldChild, 'is$Node'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild($.callTypeCheck(newChild, 'is$Node'),$.callTypeCheck(oldChild, 'is$Node'));
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('NodeFilter', {
 is$NodeFilter: function() { return true; }
});

$.$defineNativeClass('NodeIterator', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
},
 nextNode$0: function() {
  return this.nextNode();
},
 get$nextNode: function() {
  return new $.BoundClosure1(this, 'nextNode$0');
}
});

$.$defineNativeClass('NodeList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Node');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Node);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Node'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Node');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {
 is$NotificationCenter: function() { return true; }
});

$.$defineNativeClass('HTMLOListElement', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('HTMLObjectElement', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('HTMLOptionElement', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('HTMLOutputElement', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('PagePopupController', {
 is$PagePopupController: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', {
 is$ParagraphElement: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('Performance', {
 is$Performance: function() { return true; }
});

$.$defineNativeClass('PerformanceNavigation', {
 is$PerformanceNavigation: function() { return true; }
});

$.$defineNativeClass('PerformanceTiming', {
 is$PerformanceTiming: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);}
});

$.$defineNativeClass('RadioNodeList', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('Range', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RGBColor', {
 is$RgbColor: function() { return true; }
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RtcDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$RtcDataChannel: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidate', {
 is$RtcIceCandidate: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RtcPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 is$RtcSessionDescription: function() { return true; }
});

$.$defineNativeClass('RTCStatsElement', {
 is$RtcStatsElement: function() { return true; }
});

$.$defineNativeClass('Screen', {
 is$Screen: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);},
 is$ScriptElement: function() { return true; }
});

$.$defineNativeClass('ScriptProfileNode', {
 children$0: function() {
  return this.children();
},
 get$children: function() {
  return new $.BoundClosure1(this, 'children$0');
},
 is$ScriptProfileNode: function() { return true; }
});

$.$defineNativeClass('HTMLSelectElement', {"":"length>,value>",
 set$length: function(v) { this.length = $.intTypeCheck(v);},
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('ShadowRoot', {
 set$innerHtml: function(v) { this.innerHTML = $.stringTypeCheck(v);},
 is$ShadowRoot: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', {
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {
 is$SourceBuffer: function() { return true; }
});

$.$defineNativeClass('SourceBufferList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$SourceBuffer');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$SourceBuffer');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SourceBuffer);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SourceBuffer');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SourceBuffer');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$SourceBuffer'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$SourceBuffer'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$SourceBuffer');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$SourceBufferList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('SpeechGrammar', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);},
 is$SpeechGrammar: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$SpeechGrammar');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$SpeechGrammar');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechGrammar);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechGrammar');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechGrammar');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$SpeechGrammar'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$SpeechGrammar'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$SpeechGrammar');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$SpeechGrammarList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResult', {
 is$SpeechInputResult: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"":"length>",
 is$SpeechRecognitionResult: function() { return true; }
});

$.$defineNativeClass('SQLResultSetRowList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Map');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Map);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Map'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Map'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Map');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$SqlResultSetRowList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1($.stringTypeCheck(key)) == null);
},
 operator$index$1: function(key) {
  return $.stringTypeCheck(this.$$dom_getItem$1($.stringTypeCheck(key)));
},
 operator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2($.stringTypeCheck(key), $.stringTypeCheck(value));
},
 remove$1: function(key) {
  var value;
  $.stringTypeCheck(key);
  value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return $.stringTypeCheck(value);
},
 clear$0: function() {
  return $.voidTypeCheck(this.$$dom_clear$0());
},
 forEach$1: function(f) {
  var i, key;
  $.functionTypeCheck(f);
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return $.intTypeCheck(this.length);
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Storage: function() { return true; },
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"":"newValue>"
});

$.$defineNativeClass('StorageInfo', {
 is$StorageInfo: function() { return true; }
});

$.$defineNativeClass('HTMLStyleElement', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('StyleMedia', {
 is$StyleMedia: function() { return true; }
});

$.$defineNativeClass('StyleSheet', {
 is$StyleSheet: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', {
 is$TableCaptionElement: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {
 is$TableSectionElement: function() { return true; }
});

$.$defineNativeClass('Text', {
 is$Text: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"":"value>",
 set$value: function(v) { this.value = $.stringTypeCheck(v);}
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$TextTrack: function() { return true; }
});

$.$defineNativeClass('TextTrackCue', {"":"id>",
 set$text: function(v) { this.text = $.stringTypeCheck(v);},
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$TextTrackCue: function() { return true; }
});

$.$defineNativeClass('TextTrackCueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$TextTrackCue');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$TextTrackCue');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.TextTrackCue);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrackCue');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrackCue');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$TextTrackCue'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$TextTrackCue'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$TextTrackCue');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$TextTrackCueList: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$TextTrack');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$TextTrack');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.TextTrack);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrack');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrack');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$TextTrack'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$TextTrack'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$TextTrack');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$TextTrackList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"":"length>",
 is$TimeRanges: function() { return true; }
});

$.$defineNativeClass('Touch', {
 is$Touch: function() { return true; }
});

$.$defineNativeClass('TouchList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Touch');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Touch);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Touch'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Touch'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Touch');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$TouchList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {
 set$src: function(v) { this.src = $.stringTypeCheck(v);}
});

$.$defineNativeClass('TreeWalker', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
},
 nextNode$0: function() {
  return this.nextNode();
},
 get$nextNode: function() {
  return new $.BoundClosure1(this, 'nextNode$0');
},
 parentNode$0: function() {
  return this.parentNode();
},
 get$parentNode: function() {
  return new $.BoundClosure1(this, 'parentNode$0');
}
});

$.$defineNativeClass('UIEvent', {"":"detail>"
});

$.$defineNativeClass('HTMLUListElement', {
 is$UListElement: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  this[$.intTypeCheck(index)] = $.intTypeCheck(value);
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.$int);
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.intTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.intTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$Uint8Array: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {
 is$Uint8ClampedArray: function() { return true; }
});

$.$defineNativeClass('ValidityState', {
 is$ValidityState: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent($.callTypeCheck(event, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close($.intTypeCheck(code),$.stringTypeCheck(reason));
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMWindow', {"":"navigator>",
 get$document: function() {
  return $.callTypeCheck(this.document, 'is$Document');
},
 lookupPort$1: function(name$) {
  var t1, port;
  t1 = this.get$document().get$documentElement().get$attributes();
  port = $.JSON_parse($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "dart-port:" + name$));
  return $.propertyTypeCheck($._JsDeserializer$().deserialize$1(port), 'is$SendPortSync');
},
 registerPort$2: function(name$, port) {
  var serialized = $._JsSerializer$().traverse$1(port);
  $.indexSet(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name$, $.JSON_stringify(serialized));
},
 get$on: function() {
  return $.WindowEvents$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.parent);
},
 get$window: function() {
  return $._convertNativeToDart_Window(this.window);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.propertyTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$Window: function() { return true; },
 is$WindowBase: function() { return true; }
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  t1 = !t1;
  $.listTypeCheck(messagePorts);
  if (t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"":"navigator>",
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.WorkerContextEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.propertyTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$WorkerContext: function() { return true; }
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
},
 is$WorkerLocation: function() { return true; }
});

$.$defineNativeClass('WorkerNavigator', {"":"userAgent>",
 is$WorkerNavigator: function() { return true; }
});

$.$defineNativeClass('XPathException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('ClientRectList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$ClientRect');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$ClientRect');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.ClientRect);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$ClientRect');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$ClientRect');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$ClientRect'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$ClientRect'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$ClientRect');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$CssRule');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$CssRule');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.CssRule);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$CssRule');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$CssRule');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$CssRule'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$CssRule'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$CssRule');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$CssValue');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$CssValue');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.CssValue);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$CssValue');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$CssValue');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$CssValue'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$CssValue'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$CssValue');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('EntryArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Entry');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Entry');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Entry);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Entry');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Entry');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Entry'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Entry'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Entry');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$EntrySync');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$EntrySync');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.EntrySync);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$EntrySync');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$EntrySync');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$EntrySync'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$EntrySync'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$EntrySync');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Gamepad');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Gamepad');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Gamepad);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Gamepad');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Gamepad');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Gamepad'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Gamepad'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Gamepad');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$MediaStream');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$MediaStream');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.MediaStream);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$MediaStream');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$MediaStream');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$MediaStream'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$MediaStream'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$MediaStream');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$SpeechInputResult');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$SpeechInputResult');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechInputResult);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechInputResult');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechInputResult');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$SpeechInputResult'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$SpeechInputResult'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$SpeechInputResult');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$SpeechRecognitionResult');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$SpeechRecognitionResult');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.SpeechRecognitionResult);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechRecognitionResult');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechRecognitionResult');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$SpeechRecognitionResult'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$SpeechRecognitionResult'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$SpeechRecognitionResult');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$StyleSheet');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.StyleSheet);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$StyleSheet'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$StyleSheet'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$StyleSheet');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('IDBCursorWithValue', {"":"value>"
});

$.$defineNativeClass('IDBDatabase', {
 get$on: function() {
  return $.DatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$Database: function() { return true; }
});

$.$defineNativeClass('IDBIndex', {
 get$1: function(key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (typeof key === 'object' && key !== null && key.is$KeyRange() || key == null)
    return $.callTypeCheck(this._get_1$1(key), 'is$Request');
  if (t1)
    return $.callTypeCheck(this._get_2$1(key), 'is$Request');
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
},
 _get_1$1: function(key) {
  return this.get($.callTypeCheck(key, 'is$KeyRange'));
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKeyRange', {
 is$KeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return $.callTypeCheck(this._add_1$2($.convertDartToNative_SerializedScriptValue(value), key), 'is$Request');
  return $.callTypeCheck(this._add_2$1($.convertDartToNative_SerializedScriptValue(value)), 'is$Request');
},
 add$1: function(value) {
  return this.add$2(value, $);
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 is$ObjectStore: function() { return true; }
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.OpenDBRequestEvents$(this);
},
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('IDBRequest', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.RequestEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$Request: function() { return true; }
});

$.$defineNativeClass('IDBTransaction', {
 get$on: function() {
  return $.TransactionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent($.callTypeCheck(evt, 'is$Event'));
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  $.stringTypeCheck(type);
  $.propertyTypeCheck(listener, 'is$EventListener');
  $.boolTypeCheck(useCapture);
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$Transaction: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.VersionChangeRequestEvents$(this);
},
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAngle', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);},
 is$Angle: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', {
 is$AnimatedAngle: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedBoolean', {
 is$AnimatedBoolean: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedEnumeration', {
 is$AnimatedEnumeration: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedInteger', {
 is$AnimatedInteger: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLength', {
 is$AnimatedLength: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLengthList', {
 is$AnimatedLengthList: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {
 is$AnimatedNumber: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', {
 is$AnimatedNumberList: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {
 is$AnimatedPreserveAspectRatio: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedRect', {
 is$AnimatedRect: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedString', {
 is$AnimatedString: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', {
 is$AnimatedTransformList: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', {"":"parentNode>",
 get$on: function() {
  return $.ElementInstanceEvents$(this);
},
 is$ElementInstance: function() { return true; }
});

$.$defineNativeClass('SVGLength', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);},
 is$Length: function() { return true; }
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Length');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Length');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Length);
},
 get$length: function() {
  return $.intTypeCheck(this.numberOfItems);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Length');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Length');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Length'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Length'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Length');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$LengthList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', {
 is$Matrix: function() { return true; }
});

$.$defineNativeClass('SVGNumber', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);},
 is$Number: function() { return true; }
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Number');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Number');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Number);
},
 get$length: function() {
  return $.intTypeCheck(this.numberOfItems);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Number');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Number');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Number'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Number'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Number');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$NumberList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSeg', {
 is$PathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$PathSeg');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$PathSeg');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.PathSeg);
},
 get$length: function() {
  return $.intTypeCheck(this.numberOfItems);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$PathSeg');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$PathSeg');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$PathSeg'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$PathSeg'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$PathSeg');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$PathSegList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPoint', {
 is$Point: function() { return true; }
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
},
 is$PointList: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {
 is$PreserveAspectRatio: function() { return true; }
});

$.$defineNativeClass('SVGRect', {
 is$Rect: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[$.intTypeCheck(index)];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.String);
},
 get$length: function() {
  return $.intTypeCheck(this.numberOfItems);
},
 add$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.stringTypeCheck(element));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.stringTypeCheck(element), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.stringTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$StringList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {
 set$type: function(v) { this.type = $.stringTypeCheck(v);}
});

$.$defineNativeClass('SVGDocument', {
 $$dom_createEvent$1: function(eventType) {
  return this.createEvent(eventType);
}
});

$.$defineNativeClass('SVGElement', {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 get$children: function() {
  return $.FilteredElementList$(this);
},
 set$children: function(value) {
  var children, t1;
  $.listTypeCheck(value);
  children = this.get$children();
  t1 = $.getInterceptor$JSArray(children);
  t1.clear$0(children);
  t1.addAll$1(children, value);
},
 set$innerHtml: function(svg) {
  var container, t1;
  $.stringTypeCheck(svg);
  container = $.Element_Element$tag("div");
  container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
  t1 = container.get$children();
  this.set$children($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$children());
},
 get$$$dom_children: function() {
  throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
},
 click$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot invoke click SVG."));
},
 get$click: function() {
  return new $.BoundClosure3(this, 'click$0');
},
 get$id: function() {
  return this.id;
},
 is$SvgElement: function() { return true; }
});

$.$defineNativeClass('SVGException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGSVGElement', {
 is$SvgSvgElement: function() { return true; }
});

$.$defineNativeClass('SVGTransform', {
 is$Transform: function() { return true; }
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$Transform');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Transform');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.Transform);
},
 get$length: function() {
  return $.intTypeCheck(this.numberOfItems);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Transform');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Transform');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$Transform'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$Transform'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$Transform');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$TransformList: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {
 is$UseElement: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', {
 is$ViewSpec: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return $.callTypeCheck(this[$.intTypeCheck(index)], 'is$ElementInstance');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$ElementInstance');
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, $.ElementInstance);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$ElementInstance');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$ElementInstance');
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $.Collections_contains(this, $.callTypeCheck(element, 'is$ElementInstance'));
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, $.functionTypeCheck(f));
},
 map$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.boolTypeCheck($.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0));
},
 set$length: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, $.callTypeCheck(element, 'is$ElementInstance'), $.intTypeCheck(start), $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return $.callTypeCheck(this.operator$index$1($.sub(this.get$length(), 1)), 'is$ElementInstance');
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', {"":"length>",
 is$AudioBuffer: function() { return true; }
});

$.$defineNativeClass('AudioContext', {
 get$on: function() {
  return $.AudioContextEvents$(this);
},
 is$AudioContext: function() { return true; }
});

$.$defineNativeClass('AudioDestinationNode', {
 is$AudioDestinationNode: function() { return true; }
});

$.$defineNativeClass('AudioGain', {
 is$AudioGain: function() { return true; }
});

$.$defineNativeClass('AudioListener', {
 is$AudioListener: function() { return true; }
});

$.$defineNativeClass('AudioParam', {"":"value>",
 set$value: function(v) { this.value = $.numTypeCheck(v);},
 is$AudioParam: function() { return true; }
});

$.$defineNativeClass('BiquadFilterNode', {
 set$type: function(v) { this.type = $.intTypeCheck(v);}
});

$.$defineNativeClass('OfflineAudioContext', {
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {
 set$type: function(v) { this.type = $.intTypeCheck(v);}
});

$.$defineNativeClass('ScriptProcessorNode', {
 is$EventTarget: function() { return true; }
});

// 254 dynamic classes.
// 442 classes
// 38 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_Text = 'Text|CDATASection', v2__CssValueList = 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue', v3_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v4_SvgElement = 'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement', v5_UIEvent = 'UIEvent|CompositionEvent|KeyboardEvent|MouseEvent|WheelEvent|TextEvent|TouchEvent|SVGZoomEvent', v6_Element = [v3_MediaElement, v4_SvgElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|'), v7_CharacterData = [v1_Text, 'CharacterData|Comment'].join('|'), v8_Document = 'Document|HTMLDocument|SVGDocument', v9_DocumentFragment = 'DocumentFragment|ShadowRoot', v10_Node = [v6_Element, v7_CharacterData, v8_Document, v9_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v11_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v12_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v13_MediaStream = 'MediaStream|LocalMediaStream', v14_Request = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest', v15_AudioContext = 'AudioContext|OfflineAudioContext';
  $.dynamicSetMetadata([['UIEvent', v5_UIEvent], ['Uint8Array', v0_Uint8Array], ['WorkerContext', v12_WorkerContext], ['CSSValueList', v2__CssValueList], ['IDBRequest', v14_Request], ['AbstractWorker', v11_AbstractWorker], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['Blob', 'Blob|File'], ['Text', v1_Text], ['CharacterData', v7_CharacterData], ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'], ['CSSValue', [v2__CssValueList, 'CSSValue|CSSPrimitiveValue|SVGColor|SVGPaint'].join('|')], ['SVGPathSeg', 'SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel'], ['Document', v8_Document], ['DocumentFragment', v9_DocumentFragment], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['HTMLMediaElement', v3_MediaElement], ['SVGElement', v4_SvgElement], ['Element', v6_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['Event', [v5_UIEvent, 'Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent'].join('|')], ['Node', v10_Node], ['MediaStream', v13_MediaStream], ['AudioContext', v15_AudioContext], ['EventTarget', [v10_Node, v11_AbstractWorker, v12_WorkerContext, v13_MediaStream, v14_Request, v15_AudioContext, 'EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance'].join('|')], ['AudioParam', 'AudioParam|AudioGain'], ['HTMLCollection', 'HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection'], ['NodeList', 'NodeList|RadioNodeList'], ['StyleSheet', 'StyleSheet|CSSStyleSheet']]);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main0.call$0 = $.main0

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main0); });
      } else {
        $.startRootIsolate($.main0);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main0); });
  } else {
    $.startRootIsolate($.main0);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=google_plus.html_bootstrap.dart.js.map