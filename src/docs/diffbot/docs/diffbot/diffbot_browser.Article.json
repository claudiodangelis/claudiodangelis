{"name":"Article","qualifiedName":"diffbot/diffbot_browser.Article","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"text":{"name":"text","qualifiedName":"diffbot/diffbot_browser.Article.text","comment":"<p>Plain-text of the extracted article.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"title":{"name":"title","qualifiedName":"diffbot/diffbot_browser.Article.title","comment":"<p>Title of extracted article</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"author":{"name":"author","qualifiedName":"diffbot/diffbot_browser.Article.author","comment":"<p>Article author</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"url":{"name":"url","qualifiedName":"diffbot/diffbot_browser.Article.url","comment":"<p>Submitted URL</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"resolved_url":{"name":"resolved_url","qualifiedName":"diffbot/diffbot_browser.Article.resolved_url","comment":"<p>Returned if the resolving URL is different from the submitted URL (e.g.,\nlink shortening services)</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"icon":{"name":"icon","qualifiedName":"diffbot/diffbot_browser.Article.icon","comment":"<p>Page favicon</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"html":{"name":"html","qualifiedName":"diffbot/diffbot_browser.Article.html","comment":"<p>HTML of the extracted article (returned in place of <a>diffbot/diffbot_browser.Article.text</a> if the <a>diffbot/diffbot_browser.Article.html</a>\nparameter is used)</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"summary":{"name":"summary","qualifiedName":"diffbot/diffbot_browser.Article.summary","comment":"<p>Summary text (returned if summary parameter is used)</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"date":{"name":"date","qualifiedName":"diffbot/diffbot_browser.Article.date","comment":"<p>Article date, normalized in most cases to GMT.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"numPages":{"name":"numPages","qualifiedName":"diffbot/diffbot_browser.Article.numPages","comment":"<p>Number of pages automatically concatenated to form the <a>diffbot/diffbot_browser.Article.text</a> response (By\ndefault, Diffbot will automatically concatenate multiple-page articles)</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"media":{"name":"media","qualifiedName":"diffbot/diffbot_browser.Article.media","comment":"<p>Array of media items (images or videos), if detected and extracted</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}]}],"parameters":{},"annotations":[]},"tags":{"name":"tags","qualifiedName":"diffbot/diffbot_browser.Article.tags","comment":"<p>Array of tags (returned if tags parameter is used)</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"meta":{"name":"meta","qualifiedName":"diffbot/diffbot_browser.Article.meta","comment":"<p>If the meta parameter is used, will return an object containing the page's\nmetatag names and values, if found. Includes nested objects for OpenGraph\n(og), Twitter (twitter) and schema.org (microdata) tags.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"diffbot/diffbot_browser.Article.Article-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_data":{"name":"_data","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"diffbot/diffbot_browser.Article.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>diffbot/diffbot_browser.Article.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"diffbot/diffbot_browser.Article.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"diffbot/diffbot_browser.Article.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>diffbot/diffbot_browser.Article.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>diffbot/diffbot_browser.Article.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"diffbot/diffbot_browser.Article.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"diffbot/diffbot_browser.Article.noSuchMethod","comment":"<p><a>diffbot/diffbot_browser.Article.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>diffbot/diffbot_browser.Article.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>diffbot/diffbot_browser.Article.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>diffbot/diffbot_browser.Article.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}