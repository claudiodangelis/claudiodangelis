{"name":"Proxy","qualifiedName":"js/js.Proxy","comment":"<p>Proxies to JavaScript objects.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["js/js.Serializable"],"subclass":["js/js.FunctionProxy"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"js/js.Proxy.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>js/js.Proxy.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"fromBrowserObject":{"name":"fromBrowserObject","qualifiedName":"js/js.Proxy.Proxy-fromBrowserObject","comment":"<p>Constructs a <a>js/js.Proxy</a> that proxies a native Dart object; <em>for expert use\nonly</em>.</p>\n<p>Use this constructor only if you wish to get access to JavaScript\nproperties attached to a browser host object, such as a Node or Blob, that\nis normally automatically converted into a native Dart object.</p>\n<p>An exception will be thrown if object either is <code>null</code> or has the type\n<code>bool</code>, <code>num</code>, or <code>String</code>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"o":{"name":"o","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"":{"name":"","qualifiedName":"js/js.Proxy.Proxy-","comment":"<p>Constructs a <a>js/js.Proxy</a> to a new JavaScript object by invoking a (proxy to a)\nJavaScript <a>js/js.Proxy.Proxy-.constructor</a>. The arguments should be either\nprimitive values, DOM elements, or Proxies.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"js/js.Proxy","inner":[{"outer":"js/js.FunctionProxy","inner":[]}]}],"parameters":{"constructor":{"name":"constructor","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.FunctionProxy","inner":[]}]}],"value":"null","annotations":[]},"arg1":{"name":"arg1","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]},"arg2":{"name":"arg2","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]},"arg3":{"name":"arg3","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]},"arg4":{"name":"arg4","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]},"arg5":{"name":"arg5","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]},"arg6":{"name":"arg6","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Undefined())","annotations":[]}},"annotations":[]},"withArgList":{"name":"withArgList","qualifiedName":"js/js.Proxy.Proxy-withArgList","comment":"<p>Constructs a <a>js/js.Proxy</a> to a new JavaScript object by invoking a (proxy to a)\nJavaScript <a>js/js.Proxy.Proxy-withArgList.constructor</a>. The <a>js/js.Proxy.Proxy-withArgList.arguments</a> list should contain either\nprimitive values, DOM elements, or Proxies.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"js/js.Proxy","inner":[{"outer":"js/js.FunctionProxy","inner":[]}]}],"parameters":{"constructor":{"name":"constructor","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.FunctionProxy","inner":[]}]}],"value":"null","annotations":[]},"arguments":{"name":"arguments","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"js/js.Proxy.[]","comment":"","commentFrom":"js.Proxy.[]","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"arg":{"name":"arg","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"js/js.Proxy.[]=","comment":"","commentFrom":"js.Proxy.[]=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"js/js.Proxy.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>js/js.Proxy.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>js/js.Proxy.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toJs":{"name":"toJs","qualifiedName":"js/js.Proxy.toJs","comment":"","commentFrom":"js.Serializable.toJs","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"js/js.Proxy","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"js/js.Proxy.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"js/js.Proxy.noSuchMethod","comment":"<p><a>js/js.Proxy.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>js/js.Proxy.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>js/js.Proxy.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>js/js.Proxy.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"js/js.Proxy.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>js/js.Proxy.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"js/js.Proxy.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"js/js.Proxy.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>js/js.Proxy.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>js/js.Proxy.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"js/js.Proxy.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"js/js.Proxy.noSuchMethod","comment":"<p><a>js/js.Proxy.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>js/js.Proxy.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>js/js.Proxy.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>js/js.Proxy.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toJs":{"name":"toJs","qualifiedName":"js/js.Proxy.toJs","comment":"","commentFrom":"","inheritedFrom":"js.Serializable.toJs","static":"false","abstract":"true","constant":"false","return":[{"outer":"js/js.Serializable.T","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"dart-core._Proxy","parameters":[]}],"generics":{"T":{"name":"T","type":"js.Proxy"}}}