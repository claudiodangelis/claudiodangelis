{"name":"js","qualifiedName":"js/js","comment":"<p>The js.dart library provides simple JavaScript invocation from Dart that\nworks on both Dartium and on other modern browsers via Dart2JS.</p>\n<p>It provides a model based on scoped <a>js/js.Proxy</a> objects.  Proxies give Dart\ncode access to JavaScript objects, fields, and functions as well as the\nability to pass Dart objects and functions to JavaScript functions.  Scopes\nenable developers to use proxies without memory leaks - a common challenge\nwith cross-runtime interoperation.</p>\n<p>The top-level <a>js/js.context</a> getter provides a <a>js/js.Proxy</a> to the global JavaScript\ncontext for the page your Dart code is running on. In the following example:</p>\n<pre><code>import 'package:js/js.dart' as js;\n\nvoid main() {\n  js.context.alert('Hello from Dart via JavaScript');\n}\n</code></pre>\n<p>js.context.alert creates a proxy to the top-level alert function in\nJavaScript.  It is invoked from Dart as a regular function that forwards to\nthe underlying JavaScript one. By default, proxies are released when\nthe currently executing event completes, e.g., when main is completes\nin this example.</p>\n<p>The library also enables JavaScript proxies to Dart objects and functions.\nFor example, the following Dart code:</p>\n<pre><code>js.context.dartCallback = (x) =&gt; print(x*2);\n</code></pre>\n<p>defines a top-level JavaScript function 'dartCallback' that is a proxy to\nthe corresponding Dart function.</p>\n<p>Note, parameters and return values are intuitively passed by value for\nprimitives and by reference for non-primitives. In the latter case, the\nreferences are automatically wrapped and unwrapped as proxies by the library.</p>\n<p>This library also allows construction of JavaScripts objects given a <a>js/js.Proxy</a>\nto a corresponding JavaScript constructor. For example, if the following\nJavaScript is loaded on the page:</p>\n<pre><code>function Foo(x) {\n  this.x = x;\n}\n\nFoo.prototype.add = function(other) {\n  return new Foo(this.x + other.x);\n}\n</code></pre>\n<p>then, the following Dart:</p>\n<pre><code>var foo = new js.Proxy(js.context.Foo, 42);\nvar foo2 = foo.add(foo);\nprint(foo2.x);\n</code></pre>\n<p>will construct a JavaScript Foo object with the parameter 42, invoke its\nadd method, and return a <a>js/js.Proxy</a> to a new Foo object whose x field is 84.</p>\n<p>See <a href=\"http://dart-lang.github.com/js-interop/example\">samples</a> for more\nexamples of usage.</p>\n<p>See this <a href=\"http://www.dartlang.org/articles/js-dart-interop\">article</a> for\nmore detailed discussion.</p>","variables":{"context":{"name":"context","qualifiedName":"js/js.context","comment":"<p>A proxy on the global JavaScript context for this page.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"js/js.Proxy","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"array":{"name":"array","qualifiedName":"js/js.array","comment":"<p>Converts a Dart <a>dart-core.Iterable</a> to a JavaScript array and return a <a>js/js.Proxy</a> to it.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"js/js.Proxy","inner":[]}],"parameters":{"data":{"name":"data","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"js/js.map","comment":"<p>Converts a Dart map <a>js/js.map.data</a> to a JavaScript map and return a <a>js/js.Proxy</a> to it.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"js/js.Proxy","inner":[]}],"parameters":{"data":{"name":"data","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"deleteProperty":{"name":"deleteProperty","qualifiedName":"js/js.deleteProperty","comment":"<p>Delete the <a>js/js.deleteProperty.name</a> property of <a>js/js.deleteProperty.proxy</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.Proxy","inner":[]}]}],"value":"null","annotations":[]},"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasProperty":{"name":"hasProperty","qualifiedName":"js/js.hasProperty","comment":"<p>Check if <a>js/js.hasProperty.proxy</a> has a <a>js/js.hasProperty.name</a> property.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.Proxy","inner":[]}]}],"value":"null","annotations":[]},"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"instanceof":{"name":"instanceof","qualifiedName":"js/js.instanceof","comment":"<p>Check if <a>js/js.instanceof.proxy</a> is instance of <a>js/js.instanceof.type</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.Proxy","inner":[]}]}],"value":"null","annotations":[]},"type":{"name":"type","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Serializable","inner":[{"outer":"js/js.FunctionProxy","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Serializable","qualifiedName":"js/js.Serializable","preview":"<p>Marker class used to indicate it is serializable to js. If a class is a\n<a>js/js.Serializable</a> the \"toJs\" method will be called and the result will be used\nas value.</p>"},{"name":"FunctionProxy","qualifiedName":"js/js.FunctionProxy","preview":"<p>A <a>js/js.Proxy</a> subtype to JavaScript functions.</p>"},{"name":"Proxy","qualifiedName":"js/js.Proxy","preview":"<p>Proxies to JavaScript objects.</p>"}],"typedef":{},"error":[]},"packageName":"js","packageIntro":"<h1>Dart JavaScript Interop</h1>\n<p>The js.dart library allows Dart code running in the browser to\nmanipulate JavaScript running in the same page.  It is intended to\nallow Dart code to easily interact with third-party JavaScript libraries.</p>\n<h2>Warning</h2>\n<p>The use of this library may result in a sizable increase in code size\nwhen compiled to JavaScript, because names cannot be minified. If the\nsize of the generated JavaScript is a concern, use the <a href=\"http://api.dartlang.org/docs/channels/stable/latest/dart_js.html\">dart:js</a>\nlibrary.</p>\n<h2>Documentation</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop\">API documentation</a>. You should also watch this <a href=\"http://www.youtube.com/watch?v=QFuCFUd2Zsw\">video tutorial</a>.</p>\n<h2>Samples</h2>\n<p>See <a href=\"http://dart-lang.github.com/js-interop/example\">samples</a> that demonstrate interaction with JavaScript\ncode.  These include interoperation with the Google Maps JavaScript\nlibrary, the Google Visualization JavaScript library, and Twitter's\nquery API via JSONP.</p>\n<h2>Usage</h2>\n<p>The <a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Dart Editor</a> now includes pub support.  To try out this\nlibrary in the editor:</p><ol><li>\n<p><a href=\"http://www.dartlang.org/docs/editor/getting-started/\">Update to the latest editor</a>.</p></li><li>\n<p>From the \"File\" menu, open a \"New Application\" (and make sure \"Add</p>\n<pre><code>Pub support\" is checked).\n</code></pre></li><li>\n<p>Add the following to your pubspec.yaml:</p>\n<pre><code>dependencies:\n  js: any\n</code></pre></li><li>\n<p>Under the \"Tools\" menu, run \"Pub Install\".</p></li><li>\n<p>Try the following test Dart file:</p>\n<pre><code>import 'package:js/js.dart' as js;\n\nvoid main() {\n  js.context.alert('Hello from Dart via JS');\n}\n</code></pre></li><li>\n<p>Add the script to your HTML page:</p>\n<pre><code>&lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n&lt;script src=\"packages/browser/interop.js\"&gt;&lt;/script&gt; \n</code></pre></li></ol>\n<h2>Running Tests</h2>\n<p>First, use the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> to install dependencies:</p>\n<pre><code>pub install\n</code></pre>\n<p>To run browser tests on Dartium, simply open <strong>test/browser_tests.html</strong>\nin Dartium.</p>\n<p>To run browser tests using JavaScript in any modern browser, first use the\nfollowing command to compile to JavaScript:</p>\n<pre><code>dart2js -otest/browser_tests.dart.js test/browser_tests.dart\n</code></pre>\n<p>and then open <strong>test/browser_tests.html</strong> in any browser.</p>"}