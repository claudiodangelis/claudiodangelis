{"name":"JsDateToDateTimeAdapter","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter","comment":"<p>Adapter to handle a js date as a dart <a>js/dart-core.DateTime</a>.</p>","isAbstract":false,"superclass":"js/js-wrapping.TypedProxy","implements":["dart-core.DateTime"],"subclass":[],"variables":{},"inheritedVariables":{"$unsafe":{"name":"$unsafe","qualifiedName":"js/js-wrapping.TypedProxy.$unsafe","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"js/js.Proxy","inner":[]}],"annotations":[]},"millisecondsSinceEpoch":{"name":"millisecondsSinceEpoch","qualifiedName":"dart-core.DateTime.millisecondsSinceEpoch","comment":"<p>The number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).</p>\n<p>This value is independent of the time zone.</p>\n<p>This value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: <code>millisecondsSinceEpoch.abs() &lt;= 8640000000000000</code>.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"isUtc":{"name":"isUtc","qualifiedName":"dart-core.DateTime.isUtc","comment":"<p>True if this <a>dart-core.DateTime</a> is set to UTC time.</p>\n<pre><code>DateTime dDay = new DateTime.utc(1944, 6, 6);\nassert(dDay.isUtc);\n</code></pre>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"methods":{"setters":{"millisecondsSinceEpoch=":{"name":"millisecondsSinceEpoch=","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.millisecondsSinceEpoch=","comment":"","commentFrom":"js-wrapping.JsDateToDateTimeAdapter.millisecondsSinceEpoch=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"isUtc=":{"name":"isUtc=","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isUtc=","comment":"","commentFrom":"js-wrapping.JsDateToDateTimeAdapter.isUtc=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"getters":{"timeZoneName":{"name":"timeZoneName","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.timeZoneName","comment":"<p>The abbreviated time zone name&mdash;for example,\n<code>\"CET\"</code> or <code>\"CEST\"</code>.</p>","commentFrom":"dart-core.DateTime.timeZoneName","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"timeZoneOffset":{"name":"timeZoneOffset","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.timeZoneOffset","comment":"<p>The time zone offset, which\nis the difference between local time and UTC.</p>\n<p>The offset is positive for time zones west of UTC.</p>\n<p>Note, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.</p>","commentFrom":"dart-core.DateTime.timeZoneOffset","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"year":{"name":"year","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.year","comment":"<p>The year.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.year == 1969);\n</code></pre>","commentFrom":"dart-core.DateTime.year","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"month":{"name":"month","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.month","comment":"<p>The month 1..12.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.month == 7);\nassert(moonLanding.month == DateTime.JULY);\n</code></pre>","commentFrom":"dart-core.DateTime.month","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"day":{"name":"day","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.day","comment":"<p>The day of the month 1..31.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.day == 20);\n</code></pre>","commentFrom":"dart-core.DateTime.day","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"hour":{"name":"hour","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.hour","comment":"<p>The hour of the day, expressed as in a 24-hour clock 0..23.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.hour == 20);\n</code></pre>","commentFrom":"dart-core.DateTime.hour","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"minute":{"name":"minute","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.minute","comment":"<p>The minute 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.minute == 18);\n</code></pre>","commentFrom":"dart-core.DateTime.minute","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"second":{"name":"second","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.second","comment":"<p>The second 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.second == 0);\n</code></pre>","commentFrom":"dart-core.DateTime.second","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"millisecond":{"name":"millisecond","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.millisecond","comment":"<p>The millisecond 0...999.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.millisecond == 0);\n</code></pre>","commentFrom":"dart-core.DateTime.millisecond","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"weekday":{"name":"weekday","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.weekday","comment":"<p>The day of the week MONDAY..SUNDAY.</p>\n<p>In accordance with ISO 8601\na week starts with Monday, which has the value 1.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.weekday == 7);\nassert(moonLanding.weekday == DateTime.SUNDAY);\n</code></pre>","commentFrom":"dart-core.DateTime.weekday","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"millisecondsSinceEpoch":{"name":"millisecondsSinceEpoch","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.millisecondsSinceEpoch","comment":"","commentFrom":"js-wrapping.JsDateToDateTimeAdapter.millisecondsSinceEpoch","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"isUtc":{"name":"isUtc","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isUtc","comment":"","commentFrom":"js-wrapping.JsDateToDateTimeAdapter.isUtc","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"constructors":{"":{"name":"","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.JsDateToDateTimeAdapter-","comment":"<p>Create a new adapter from a dart <a>js/js-wrapping.JsDateToDateTimeAdapter.JsDateToDateTimeAdapter-.dateTime</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"dateTime":{"name":"dateTime","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fromProxy":{"name":"fromProxy","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.JsDateToDateTimeAdapter-fromProxy","comment":"<p>Create a new adapter from a <a>js/js-wrapping.JsDateToDateTimeAdapter.JsDateToDateTimeAdapter-fromProxy.proxy</a> of a Js Date object.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Proxy","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.==","comment":"<p>Returns true if <a>js/js-wrapping.JsDateToDateTimeAdapter.==.other</a> is a <a>dart-core.DateTime</a> at the same moment and in the\nsame time zone (UTC or local).</p>\n<pre><code>DateTime dDayUtc   = new DateTime.utc(1944, DateTime.JUNE, 6);\nDateTime dDayLocal = new DateTime(1944, DateTime.JUNE, 6);\n\nassert(dDayUtc.isAtSameMomentAs(dDayLocal) == false);\n</code></pre>\n<p>See <a>js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs</a> for a comparison that adjusts for time zone.</p>","commentFrom":"dart-core.DateTime.==","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"methods":{"cast":{"name":"cast","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.cast","comment":"<p>Like <a>js/js-wrapping.JsDateToDateTimeAdapter.JsDateToDateTimeAdapter-fromProxy</a> but with <code>null</code> handling for\n<a>js/js-wrapping.JsDateToDateTimeAdapter.cast.proxy</a>.</p>","commentFrom":"","inheritedFrom":"","static":"true","abstract":"false","constant":"false","return":[{"outer":"js/js-wrapping.JsDateToDateTimeAdapter","inner":[]}],"parameters":{"proxy":{"name":"proxy","optional":"false","named":"false","default":"false","type":[{"outer":"js/js.Proxy","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.compareTo","comment":"<p>Compares this DateTime object to <a>js/js-wrapping.JsDateToDateTimeAdapter.compareTo.other</a>,\nreturning zero if the values are equal.</p>\n<p>This function returns a negative integer\nif this DateTime is smaller (earlier) than <a>js/js-wrapping.JsDateToDateTimeAdapter.compareTo.other</a>,\nor a positive integer if it is greater (later).</p>","commentFrom":"dart-core.DateTime.compareTo","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"isBefore":{"name":"isBefore","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isBefore","comment":"<p>Returns true if this occurs before <a>js/js-wrapping.JsDateToDateTimeAdapter.isBefore.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isBefore(moonLanding) == false);\n</code></pre>","commentFrom":"dart-core.DateTime.isBefore","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"isAfter":{"name":"isAfter","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isAfter","comment":"<p>Returns true if this occurs after <a>js/js-wrapping.JsDateToDateTimeAdapter.isAfter.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAfter(moonLanding) == true);\n</code></pre>","commentFrom":"dart-core.DateTime.isAfter","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"isAtSameMomentAs":{"name":"isAtSameMomentAs","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs","comment":"<p>Returns true if this occurs at the same moment as <a>js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs.other</a>.</p>\n<p>The comparison is independent of whether the time is in UTC or in the local\ntime zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAtSameMomentAs(moonLanding) == false);\n</code></pre>","commentFrom":"dart-core.DateTime.isAtSameMomentAs","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"toLocal":{"name":"toLocal","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toLocal","comment":"<p>Returns this DateTime value in the local time zone.</p>\n<p>Returns this if it is already in the local time zone.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: false)\n</code></pre>","commentFrom":"dart-core.DateTime.toLocal","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"toUtc":{"name":"toUtc","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toUtc","comment":"<p>Returns this DateTime value in the UTC time zone.</p>\n<p>Returns this if it is already in UTC.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: true)\n</code></pre>","commentFrom":"dart-core.DateTime.toUtc","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"toString":{"name":"toString","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toString","comment":"<p>Returns a human-readable string for this instance.</p>\n<p>The returned string is constructed for the time zone of this instance.\nThe <code>toString()</code> method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the <a href=\"http://pub.dartlang.org/packages/intl\">intl</a> package\nat the pub shared packages repo.</p>","commentFrom":"dart-core.DateTime.toString","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"add":{"name":"add","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.add","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>js/js-wrapping.JsDateToDateTimeAdapter.add.duration</a> added to this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n</code></pre>","commentFrom":"dart-core.DateTime.add","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"subtract":{"name":"subtract","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.subtract","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>js/js-wrapping.JsDateToDateTimeAdapter.subtract.duration</a> subtracted from this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysAgo = today.subtract(new Duration(days: 60));\n</code></pre>","commentFrom":"dart-core.DateTime.subtract","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"difference":{"name":"difference","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.difference","comment":"<p>Returns a <a>dart-core.Duration</a> with the difference between this and <a>js/js-wrapping.JsDateToDateTimeAdapter.difference.other</a>.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\nDateTime dDay = new DateTime(1944, DateTime.JUNE, 6);\n\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n</code></pre>","commentFrom":"dart-core.DateTime.difference","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>js/js-wrapping.JsDateToDateTimeAdapter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-core.DateTime.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"timeZoneName":{"name":"timeZoneName","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.timeZoneName","comment":"<p>The abbreviated time zone name&mdash;for example,\n<code>\"CET\"</code> or <code>\"CEST\"</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.DateTime.timeZoneName","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"timeZoneOffset":{"name":"timeZoneOffset","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.timeZoneOffset","comment":"<p>The time zone offset, which\nis the difference between local time and UTC.</p>\n<p>The offset is positive for time zones west of UTC.</p>\n<p>Note, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.</p>","commentFrom":"","inheritedFrom":"dart-core.DateTime.timeZoneOffset","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]},"year":{"name":"year","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.year","comment":"<p>The year.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.year == 1969);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.year","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"month":{"name":"month","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.month","comment":"<p>The month 1..12.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.month == 7);\nassert(moonLanding.month == DateTime.JULY);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.month","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"day":{"name":"day","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.day","comment":"<p>The day of the month 1..31.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.day == 20);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.day","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hour":{"name":"hour","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.hour","comment":"<p>The hour of the day, expressed as in a 24-hour clock 0..23.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.hour == 20);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.hour","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"minute":{"name":"minute","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.minute","comment":"<p>The minute 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.minute == 18);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.minute","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"second":{"name":"second","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.second","comment":"<p>The second 0...59.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.second == 0);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.second","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"millisecond":{"name":"millisecond","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.millisecond","comment":"<p>The millisecond 0...999.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.millisecond == 0);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.millisecond","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"weekday":{"name":"weekday","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.weekday","comment":"<p>The day of the week <a>js/dart-core.DateTime.MONDAY</a>..<a>js/dart-core.DateTime.SUNDAY</a>.</p>\n<p>In accordance with ISO 8601\na week starts with Monday, which has the value 1.</p>\n<pre><code>DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\nassert(moonLanding.weekday == 7);\nassert(moonLanding.weekday == DateTime.SUNDAY);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.weekday","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.==","comment":"<p>Returns true if <a>js/js-wrapping.JsDateToDateTimeAdapter.==.other</a> is a <a>dart-core.DateTime</a> at the same moment and in the\nsame time zone (UTC or local).</p>\n<pre><code>DateTime dDayUtc   = new DateTime.utc(1944, DateTime.JUNE, 6);\nDateTime dDayLocal = new DateTime(1944, DateTime.JUNE, 6);\n\nassert(dDayUtc.isAtSameMomentAs(dDayLocal) == false);\n</code></pre>\n<p>See <a>js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs</a> for a comparison that adjusts for time zone.</p>","commentFrom":"","inheritedFrom":"dart-core.DateTime.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toString","comment":"<p>Returns a human-readable string for this instance.</p>\n<p>The returned string is constructed for the time zone of this instance.\nThe <code>toString()</code> method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the <a href=\"http://pub.dartlang.org/packages/intl\">intl</a> package\nat the pub shared packages repo.</p>","commentFrom":"","inheritedFrom":"dart-core.DateTime.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.noSuchMethod","comment":"<p><a>js/js-wrapping.JsDateToDateTimeAdapter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>js/js-wrapping.JsDateToDateTimeAdapter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>js/js-wrapping.JsDateToDateTimeAdapter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>js/js-wrapping.JsDateToDateTimeAdapter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toJs":{"name":"toJs","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toJs","comment":"","commentFrom":"","inheritedFrom":"js-wrapping.TypedProxy.toJs","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"compareTo":{"name":"compareTo","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.compareTo","comment":"<p>Compares this DateTime object to <a>js/js-wrapping.JsDateToDateTimeAdapter.compareTo.other</a>,\nreturning zero if the values are equal.</p>\n<p>This function returns a negative integer\nif this DateTime is smaller (earlier) than <a>js/js-wrapping.JsDateToDateTimeAdapter.compareTo.other</a>,\nor a positive integer if it is greater (later).</p>","commentFrom":"","inheritedFrom":"dart-core.DateTime.compareTo","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isBefore":{"name":"isBefore","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isBefore","comment":"<p>Returns true if this occurs before <a>js/js-wrapping.JsDateToDateTimeAdapter.isBefore.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isBefore(moonLanding) == false);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.isBefore","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isAfter":{"name":"isAfter","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isAfter","comment":"<p>Returns true if this occurs after <a>js/js-wrapping.JsDateToDateTimeAdapter.isAfter.other</a>.</p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAfter(moonLanding) == true);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.isAfter","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isAtSameMomentAs":{"name":"isAtSameMomentAs","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs","comment":"<p>Returns true if this occurs at the same moment as <a>js/js-wrapping.JsDateToDateTimeAdapter.isAtSameMomentAs.other</a>.</p>\n<p>The comparison is independent of whether the time is in UTC or in the local\ntime zone.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, 11, 9);\nDateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\nassert(berlinWallFell.isAtSameMomentAs(moonLanding) == false);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.isAtSameMomentAs","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toLocal":{"name":"toLocal","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toLocal","comment":"<p>Returns this DateTime value in the local time zone.</p>\n<p>Returns this if it is already in the local time zone.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: false)\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.toLocal","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"toUtc":{"name":"toUtc","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.toUtc","comment":"<p>Returns this DateTime value in the UTC time zone.</p>\n<p>Returns this if it is already in UTC.\nOtherwise this method is equivalent to:</p>\n<pre><code>new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                        isUtc: true)\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.toUtc","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"add":{"name":"add","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.add","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>js/js-wrapping.JsDateToDateTimeAdapter.add.duration</a> added to this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.add","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"subtract":{"name":"subtract","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.subtract","comment":"<p>Returns a new <a>dart-core.DateTime</a> instance with <a>js/js-wrapping.JsDateToDateTimeAdapter.subtract.duration</a> subtracted from this.</p>\n<pre><code>DateTime today = new DateTime.now();\nDateTime sixtyDaysAgo = today.subtract(new Duration(days: 60));\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.subtract","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{"duration":{"name":"duration","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"difference":{"name":"difference","qualifiedName":"js/js-wrapping.JsDateToDateTimeAdapter.difference","comment":"<p>Returns a <a>dart-core.Duration</a> with the difference between this and <a>js/js-wrapping.JsDateToDateTimeAdapter.difference.other</a>.</p>\n<pre><code>DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\nDateTime dDay = new DateTime(1944, DateTime.JUNE, 6);\n\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.DateTime.difference","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}